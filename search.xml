<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="2021/03/04/golang/gin-huan-jing-an-zhuang/"/>
      <url>2021/03/04/golang/gin-huan-jing-an-zhuang/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-go" data-language="go"><code class="language-go">$ mkdir <span class="token keyword">go</span><span class="token operator">-</span>gin<span class="token operator">-</span>example <span class="token operator">&amp;&amp;</span> cd <span class="token keyword">go</span><span class="token operator">-</span>gin<span class="token operator">-</span>example$ <span class="token keyword">go</span> env <span class="token operator">-</span>w GO111MODULE<span class="token operator">=</span>on$ <span class="token keyword">go</span> env <span class="token operator">-</span>w GOPROXY<span class="token operator">=</span>https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>goproxy<span class="token punctuation">.</span>cn<span class="token punctuation">,</span>direct$ <span class="token keyword">go</span> mod init github<span class="token punctuation">.</span>com<span class="token operator">/</span>EDDYCJY<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">-</span>gin<span class="token operator">-</span>example<span class="token keyword">go</span><span class="token punctuation">:</span> creating <span class="token builtin">new</span> <span class="token keyword">go</span><span class="token punctuation">.</span>mod<span class="token punctuation">:</span> module github<span class="token punctuation">.</span>com<span class="token operator">/</span>EDDYCJY<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">-</span>gin<span class="token operator">-</span>example$ ls<span class="token keyword">go</span><span class="token punctuation">.</span>mod<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>mkdir xxx &amp;&amp; cd xxx</code>：创建并切换到项目目录里去。</li><li><code>go env -w GO111MODULE=on</code>：打开 Go modules 开关（目前在 Go1.13 中默认值为 <code>auto</code>）。</li><li><code>go env -w GOPROXY=...</code>：设置 GOPROXY 代理，这里主要涉及到两个值，第一个是 <code>https://goproxy.cn</code>，它是由七牛云背书的一个强大稳定的 Go 模块代理，可以有效地解决你的外网问题；第二个是 <code>direct</code>，它是一个特殊的 fallback 选项，它的作用是用于指示 Go 在拉取模块时遇到错误会回源到模块版本的源地址去抓取（比如 GitHub 等）。</li><li><code>go mod init [MODULE_PATH]</code>：初始化 Go modules，它将会生成 go.mod 文件，需要注意的是 <code>MODULE_PATH</code> 填写的是模块引入路径，你可以根据自己的情况修改路径。</li></ul><h3 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h3><ul><li>用 <code>go get</code> 拉取新的依赖<ul><li>拉取最新的版本(优先择取 tag)：<code>go get golang.org/x/text@latest</code></li><li>拉取 <code>master</code> 分支的最新 commit：<code>go get golang.org/x/text@master</code></li><li>拉取 tag 为 v0.3.2 的 commit：<code>go get golang.org/x/text@v0.3.2</code></li><li>拉取 hash 为 342b231 的 commit，最终会被转换为 v0.3.2：<code>go get golang.org/x/text@342b2e</code></li><li>用 <code>go get -u</code> 更新现有的依赖</li><li>用 <code>go mod download</code> 下载 go.mod 文件中指明的所有依赖</li><li>用 <code>go mod tidy</code> 整理现有的依赖</li><li>用 <code>go mod graph</code> 查看现有的依赖结构</li><li>用 <code>go mod init</code> 生成 go.mod 文件 (Go 1.13 中唯一一个可以生成 go.mod 文件的子命令)</li></ul></li><li>用 <code>go mod edit</code> 编辑 go.mod 文件</li><li>用 <code>go mod vendor</code> 导出现有的所有依赖 (事实上 Go modules 正在淡化 Vendor 的概念)</li><li>用 <code>go mod verify</code> 校验一个模块是否被篡改过</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Front-matter</title>
      <link href="2021/03/01/front-matter-xuan-xiang-xiang-jie/"/>
      <url>2021/03/01/front-matter-xuan-xiang-xiang-jie/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th align="left">配置选项</th><th align="left">默认值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">title</td><td align="left"><code>Markdown</code> 的文件标题</td><td align="left">文章标题，强烈建议填写此选项</td></tr><tr><td align="left">date</td><td align="left">文件创建时的日期时间</td><td align="left">发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td align="left">author</td><td align="left">根 <code>_config.yml</code> 中的 <code>author</code></td><td align="left">文章作者</td></tr><tr><td align="left">img</td><td align="left"><code>featureImages</code> 中的某个值</td><td align="left">文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td align="left">top</td><td align="left"><code>true</code></td><td align="left">推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td align="left">cover</td><td align="left"><code>false</code></td><td align="left">表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td align="left">coverImg</td><td align="left">无</td><td align="left">表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td align="left">password</td><td align="left">无</td><td align="left">文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td align="left">toc</td><td align="left"><code>true</code></td><td align="left">是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td align="left">mathjax</td><td align="left"><code>false</code></td><td align="left">是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td align="left">summary</td><td align="left">无</td><td align="left">文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td align="left">categories</td><td align="left">无</td><td align="left">文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td align="left">tags</td><td align="left">无</td><td align="left">文章标签，一篇文章可以多个标签</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li></ol></blockquote><pre class="line-numbers language-none"><code class="language-none">上传文件hexo clean hexo g hexo deployhexo clean &amp;&amp; hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> theme </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>django中pymysql问题</title>
      <link href="2021/03/01/pymysql-wen-ti/"/>
      <url>2021/03/01/pymysql-wen-ti/</url>
      
        <content type="html"><![CDATA[<h3 id="找不到mysqlclient"><a href="#找不到mysqlclient" class="headerlink" title="找不到mysqlclient"></a>找不到mysqlclient</h3><p>django.core.exceptions.ImproperlyConfigured: Error loading MySQLdb module. Did you install mysqlclient?</p><p>解决方法<br>项目（settings.py同级)目录中<strong>init</strong>.py中添加</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymysql<span class="token comment"># 加上version, 避免django版本过高而导致不匹配</span><span class="token comment">#</span><span class="token comment"># 本机  django==2.2.0,  pymysql==0.9.3</span>pymysql<span class="token punctuation">.</span>version_info <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token string">'final'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>pymysql<span class="token punctuation">.</span>install_as_MySQLdb<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>linux常用命令</title>
      <link href="2021/03/01/linux-ming-ling/"/>
      <url>2021/03/01/linux-ming-ling/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h3 id="scp"><a href="#scp" class="headerlink" title="scp"></a>scp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">基本使用：<span class="token number">1</span><span class="token punctuation">.</span>从本地上传文件到远程服务器：    先进入本地目录下；    运行：scp my_local_file<span class="token punctuation">.</span><span class="token builtin">zip</span> root@<span class="token number">192.168</span><span class="token number">.2</span><span class="token number">.10</span><span class="token punctuation">:</span><span class="token operator">/</span>home<span class="token operator">/</span>daemon<span class="token number">2</span><span class="token punctuation">.</span>从远程主机复制文件到本地主机（下载）：    先进入本地目录下；    scp root@<span class="token number">192.168</span><span class="token number">.2</span><span class="token number">.10</span><span class="token punctuation">:</span><span class="token operator">/</span>home<span class="token operator">/</span>daemon<span class="token operator">/</span>about<span class="token punctuation">.</span><span class="token builtin">zip</span><span class="token number">3</span><span class="token punctuation">.</span>从本地复制多个文件到远程主机（多个文件使用空格分隔开）：    scp index<span class="token punctuation">.</span>css json<span class="token punctuation">.</span>js root@<span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.104</span><span class="token punctuation">:</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>nginx<span class="token operator">/</span>html<span class="token operator">/</span>webs<span class="token number">4</span><span class="token punctuation">.</span>从远程主机复制多个文件到当前目录    scp root@<span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.104</span><span class="token punctuation">:</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>nginx<span class="token operator">/</span>html<span class="token operator">/</span>webs<span class="token operator">/</span>\<span class="token punctuation">&#123;</span>index<span class="token punctuation">.</span>css<span class="token punctuation">,</span>json<span class="token punctuation">.</span>js\<span class="token punctuation">&#125;</span><span class="token number">5</span><span class="token punctuation">.</span>从本地文件复制整个文件夹到远程主机上    scp <span class="token operator">-</span>v <span class="token operator">-</span>r diff root@<span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.104</span><span class="token punctuation">:</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>nginx<span class="token operator">/</span>html<span class="token operator">/</span>webs<span class="token number">6</span><span class="token punctuation">.</span>从远程主机复制整个文件夹到本地目录下    scp <span class="token operator">-</span>r root@<span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.104</span><span class="token punctuation">:</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>nginx<span class="token operator">/</span>html<span class="token operator">/</span>webs<span class="token operator">/</span>diff<span class="token number">7</span><span class="token punctuation">.</span>在两个远程主机之间复制文件    scp root@<span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.104</span><span class="token punctuation">:</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>nginx<span class="token operator">/</span>html<span class="token operator">/</span>webs<span class="token operator">/</span>xx<span class="token punctuation">.</span>txt root@<span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.105</span><span class="token punctuation">:</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>nginx<span class="token operator">/</span>html<span class="token operator">/</span>webs<span class="token operator">/</span>  <span class="token number">8</span><span class="token punctuation">.</span> 指定端口 scp <span class="token operator">-</span>P port file_name user@ip<span class="token punctuation">:</span><span class="token operator">/</span>dir_name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>指定端口-P 在 -v -r 之前, 否则可能会出错</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Liunx </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>接口二</title>
      <link href="2019/06/20/golang/19.jie-kou-er/"/>
      <url>2019/06/20/golang/19.jie-kou-er/</url>
      
        <content type="html"><![CDATA[<h1 id="19-接口（二）"><a href="#19-接口（二）" class="headerlink" title="19. 接口（二）"></a>19. 接口（二）</h1><h3 id="实现接口：指针接受者与值接受者"><a href="#实现接口：指针接受者与值接受者" class="headerlink" title="实现接口：指针接受者与值接受者"></a>实现接口：指针接受者与值接受者</h3><p>在接口（一）上的所有示例中，我们都是使用值接受者（Value Receiver）来实现接口的。我们同样可以使用指针接受者（Pointer Receiver）来实现接口。只不过在用指针接受者实现接口时，还有一些细节需要注意。我们通过下面的代码来理解吧。 </p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">type</span> Describer <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>      <span class="token function">Describe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>      name <span class="token builtin">string</span>    age  <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p Person<span class="token punctuation">)</span> <span class="token function">Describe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 使用值接受者实现  </span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s is %d years old\n"</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>name<span class="token punctuation">,</span> p<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> Address <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    state   <span class="token builtin">string</span>    country <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>a <span class="token operator">*</span>Address<span class="token punctuation">)</span> <span class="token function">Describe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 使用指针接受者实现</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"State %s Country %s"</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>state<span class="token punctuation">,</span> a<span class="token punctuation">.</span>country<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> d1 Describer    p1 <span class="token operator">:=</span> Person<span class="token punctuation">&#123;</span><span class="token string">"Sam"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">&#125;</span>    d1 <span class="token operator">=</span> p1    d1<span class="token punctuation">.</span><span class="token function">Describe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    p2 <span class="token operator">:=</span> Person<span class="token punctuation">&#123;</span><span class="token string">"James"</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">&#125;</span>    d1 <span class="token operator">=</span> <span class="token operator">&amp;</span>p2    d1<span class="token punctuation">.</span><span class="token function">Describe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> d2 Describer    a <span class="token operator">:=</span> Address<span class="token punctuation">&#123;</span><span class="token string">"Washington"</span><span class="token punctuation">,</span> <span class="token string">"USA"</span><span class="token punctuation">&#125;</span>    <span class="token comment">/* 如果下面一行取消注释会导致编译错误：       cannot use a (type Address) as type Describer       in assignment: Address does not implement       Describer (Describe method has pointer       receiver)    */</span>    <span class="token comment">//d2 = a</span>    d2 <span class="token operator">=</span> <span class="token operator">&amp;</span>a <span class="token comment">// 这是合法的</span>    <span class="token comment">// 因为在第 22 行，Address 类型的指针实现了 Describer 接口</span>    d2<span class="token punctuation">.</span><span class="token function">Describe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面程序中的第 13 行，结构体 <code>Person</code> 使用值接受者，实现了 <code>Describer</code> 接口。  </p><p>我们在讨论方法的时候就已经提到过，使用值接受者声明的方法，既可以用值来调用，也能用指针调用。<strong>不管是一个值，还是一个可以解引用的指针，调用这样的方法都是合法的</strong>。</p><p><code>p1</code> 的类型是 <code>Person</code>，在第 29 行，<code>p1</code> 赋值给了 <code>d1</code>。由于 <code>Person</code> 实现了接口变量 <code>d1</code>，因此在第 30 行，会打印 <code>Sam is 25 years old</code>。</p><p>接下来在第 32 行，<code>d1</code> 又赋值为 <code>&amp;p2</code>，在第 33 行同样打印输出了 <code>James is 32 years old</code>。棒棒哒。:) </p><p>在 22 行，结构体 <code>Address</code> 使用指针接受者实现了 <code>Describer</code> 接口。 </p><p>在上面程序里，如果去掉第 45 行的注释，我们会得到编译错误：<code>main.go:42: cannot use a (type  Address) as type Describer in assignment: Address does not implement  Describer (Describe method has pointer receiver)</code>。这是因为在第 22 行，我们使用 <code>Address</code> 类型的指针接受者实现了接口 <code>Describer</code>，而接下来我们试图用 <code>a</code> 来赋值 <code>d2</code>。然而 <code>a</code> 属于值类型，它并没有实现 <code>Describer</code> 接口。你应该会很惊讶，因为我们曾经学习过，使用指针接受者的方法，无论指针还是值都可以调用它。那么为什么第 45 行的代码就不管用呢？</p><p><strong>其原因是：对于使用指针接受者的方法，用一个指针或者一个可取得地址的值来调用都是合法的。但接口中存储的具体值（Concrete Value）并不能取到地址，因此在第 45 行，对于编译器无法自动获取 a 的地址，于是程序报错</strong>。  </p><p>第 47 行就可以成功运行，因为我们将 <code>a</code> 的地址 <code>&amp;a</code> 赋值给了 <code>d2</code>。  </p><p>程序的其他部分不言而喻。该程序会打印：  </p><pre class="line-numbers language-none"><code class="language-none">Sam is 25 years old  James is 32 years old  State Washington Country USA<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="实现多个接口"><a href="#实现多个接口" class="headerlink" title="实现多个接口"></a>实现多个接口</h3><p>类型可以实现多个接口。我们看看下面程序是如何做到的。  </p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">type</span> SalaryCalculator <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>      <span class="token function">DisplaySalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> LeaveCalculator <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>      <span class="token function">CalculateLeavesLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> Employee <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>      firstName <span class="token builtin">string</span>    lastName <span class="token builtin">string</span>    basicPay <span class="token builtin">int</span>    pf <span class="token builtin">int</span>    totalLeaves <span class="token builtin">int</span>    leavesTaken <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>e Employee<span class="token punctuation">)</span> <span class="token function">DisplaySalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s %s has salary $%d"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>firstName<span class="token punctuation">,</span> e<span class="token punctuation">.</span>lastName<span class="token punctuation">,</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>basicPay <span class="token operator">+</span> e<span class="token punctuation">.</span>pf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>e Employee<span class="token punctuation">)</span> <span class="token function">CalculateLeavesLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> e<span class="token punctuation">.</span>totalLeaves <span class="token operator">-</span> e<span class="token punctuation">.</span>leavesTaken<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      e <span class="token operator">:=</span> Employee <span class="token punctuation">&#123;</span>        firstName<span class="token punctuation">:</span> <span class="token string">"Naveen"</span><span class="token punctuation">,</span>        lastName<span class="token punctuation">:</span> <span class="token string">"Ramanathan"</span><span class="token punctuation">,</span>        basicPay<span class="token punctuation">:</span> <span class="token number">5000</span><span class="token punctuation">,</span>        pf<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span>        totalLeaves<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span>        leavesTaken<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> s SalaryCalculator <span class="token operator">=</span> e    s<span class="token punctuation">.</span><span class="token function">DisplaySalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> l LeaveCalculator <span class="token operator">=</span> e    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"\nLeaves left ="</span><span class="token punctuation">,</span> l<span class="token punctuation">.</span><span class="token function">CalculateLeavesLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述程序在第 7 行和第 11 行分别声明了两个接口：<code>SalaryCalculator</code> 和 <code>LeaveCalculator</code>。  </p><p>第 15 行定义了结构体 <code>Employee</code>，它在第 24 行实现了 <code>SalaryCalculator</code> 接口的 <code>DisplaySalary</code> 方法，接着在第 28 行又实现了 <code>LeaveCalculator</code> 接口里的 <code>CalculateLeavesLeft</code> 方法。于是 <code>Employee</code> 就实现了 <code>SalaryCalculator</code> 和 <code>LeaveCalculator</code> 两个接口。  </p><p>第 41 行，我们把 <code>e</code> 赋值给了 <code>SalaryCalculator</code> 类型的接口变量 ，而在 43 行，我们同样把 <code>e</code> 赋值给 <code>LeaveCalculator</code> 类型的接口变量 。由于 <code>e</code> 的类型 <code>Employee</code> 实现了 <code>SalaryCalculator</code> 和 <code>LeaveCalculator</code> 两个接口，因此这是合法的。  </p><p>该程序会输出：</p><pre class="line-numbers language-none"><code class="language-none">Naveen Ramanathan has salary $5200  Leaves left &#x3D; 25<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="接口的嵌套"><a href="#接口的嵌套" class="headerlink" title="接口的嵌套"></a>接口的嵌套</h3><p>尽管 Go 语言没有提供继承机制，但可以通过嵌套其他的接口，创建一个新接口。  </p><p>我们来看看这如何实现。  </p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">type</span> SalaryCalculator <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>      <span class="token function">DisplaySalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> LeaveCalculator <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>      <span class="token function">CalculateLeavesLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> EmployeeOperations <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>      SalaryCalculator    LeaveCalculator<span class="token punctuation">&#125;</span><span class="token keyword">type</span> Employee <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>      firstName <span class="token builtin">string</span>    lastName <span class="token builtin">string</span>    basicPay <span class="token builtin">int</span>    pf <span class="token builtin">int</span>    totalLeaves <span class="token builtin">int</span>    leavesTaken <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>e Employee<span class="token punctuation">)</span> <span class="token function">DisplaySalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s %s has salary $%d"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>firstName<span class="token punctuation">,</span> e<span class="token punctuation">.</span>lastName<span class="token punctuation">,</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>basicPay <span class="token operator">+</span> e<span class="token punctuation">.</span>pf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>e Employee<span class="token punctuation">)</span> <span class="token function">CalculateLeavesLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> e<span class="token punctuation">.</span>totalLeaves <span class="token operator">-</span> e<span class="token punctuation">.</span>leavesTaken<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      e <span class="token operator">:=</span> Employee <span class="token punctuation">&#123;</span>        firstName<span class="token punctuation">:</span> <span class="token string">"Naveen"</span><span class="token punctuation">,</span>        lastName<span class="token punctuation">:</span> <span class="token string">"Ramanathan"</span><span class="token punctuation">,</span>        basicPay<span class="token punctuation">:</span> <span class="token number">5000</span><span class="token punctuation">,</span>        pf<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span>        totalLeaves<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span>        leavesTaken<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> empOp EmployeeOperations <span class="token operator">=</span> e    empOp<span class="token punctuation">.</span><span class="token function">DisplaySalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"\nLeaves left ="</span><span class="token punctuation">,</span> empOp<span class="token punctuation">.</span><span class="token function">CalculateLeavesLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述程序的第 15 行，我们创建了一个新的接口 <code>EmployeeOperations</code>，它嵌套了两个接口：<code>SalaryCalculator</code> 和 <code>LeaveCalculator</code>。</p><p>如果一个类型定义了 <code>SalaryCalculator</code> 和 <code>LeaveCalculator</code> 接口里包含的方法，我们就称该类型实现了 <code>EmployeeOperations</code> 接口。</p><p>在第 29 行和第 33 行，由于 <code>Employee</code> 结构体定义了 <code>DisplaySalary</code> 和 <code>CalculateLeavesLeft</code> 方法，因此它实现了接口 <code>EmployeeOperations</code>。</p><p>在 46 行，<code>empOp</code> 的类型是 <code>EmployeeOperations</code>，<code>e</code> 的类型是 <code>Employee</code>，我们把 <code>empOp</code> 赋值为 <code>e</code>。接下来的两行，<code>empOp</code> 调用了 <code>DisplaySalary()</code> 和 <code>CalculateLeavesLeft()</code> 方法。</p><p>该程序输出：</p><pre class="line-numbers language-none"><code class="language-none">Naveen Ramanathan has salary $5200Leaves left &#x3D; 25<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="接口的零值"><a href="#接口的零值" class="headerlink" title="接口的零值"></a>接口的零值</h3><p>接口的零值是 <code>nil</code>。对于值为 <code>nil</code> 的接口，其底层值（Underlying Value）和具体类型（Concrete Type）都为 <code>nil</code>。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">type</span> Describer <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>      <span class="token function">Describe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> d1 Describer    <span class="token keyword">if</span> d1 <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"d1 is nil and has type %T value %v\n"</span><span class="token punctuation">,</span> d1<span class="token punctuation">,</span> d1<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面程序里的 <code>d1</code> 等于 <code>nil</code>，程序会输出：</p><pre class="line-numbers language-none"><code class="language-none">d1 is nil and has type &lt;nil&gt; value &lt;nil&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对于值为 <code>nil</code> 的接口，由于没有底层值和具体类型，当我们试图调用它的方法时，程序会产生 <code>panic</code> 异常。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">type</span> Describer <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>    <span class="token function">Describe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> d1 Describer    d1<span class="token punctuation">.</span><span class="token function">Describe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述程序中，<code>d1</code> 等于 <code>nil</code>，程序产生运行时错误 <code>panic</code>： <strong>panic: runtime error: invalid memory address or nil pointer dereference  [signal SIGSEGV: segmentation violation code=0xffffffff addr=0x0 pc=0xc8527]</strong> 。  </p>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口一</title>
      <link href="2019/06/20/golang/18.jie-kou-yi/"/>
      <url>2019/06/20/golang/18.jie-kou-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="18-接口（一）"><a href="#18-接口（一）" class="headerlink" title="18. 接口（一）"></a>18. 接口（一）</h1><h3 id="什么是接口？"><a href="#什么是接口？" class="headerlink" title="什么是接口？"></a>什么是接口？</h3><p>在面向对象的领域里，接口一般这样定义：<strong>接口定义一个对象的行为</strong>。接口只指定了对象应该做什么，至于如何实现这个行为（即实现细节），则由对象本身去确定。  </p><p>在 Go 语言中，接口就是方法签名（Method Signature）的集合。当一个类型定义了接口中的所有方法，我们称它实现了该接口。这与面向对象编程（OOP）的说法很类似。<strong>接口指定了一个类型应该具有的方法，并由该类型决定如何实现这些方法</strong>。  </p><p>例如，<code>WashingMachine</code> 是一个含有 <code>Cleaning()</code> 和 <code>Drying()</code> 两个方法的接口。任何定义了 <code>Cleaning()</code> 和 <code>Drying()</code> 的类型，都称它实现了 <code>WashingMachine</code> 接口。  </p><h3 id="接口的声明与实现"><a href="#接口的声明与实现" class="headerlink" title="接口的声明与实现"></a>接口的声明与实现</h3><p>让我们编写代码，创建一个接口并且实现它。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token comment">//interface definition</span><span class="token keyword">type</span> VowelsFinder <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>      <span class="token function">FindVowels</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">rune</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> MyString <span class="token builtin">string</span><span class="token comment">//MyString implements VowelsFinder</span><span class="token keyword">func</span> <span class="token punctuation">(</span>ms MyString<span class="token punctuation">)</span> <span class="token function">FindVowels</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">rune</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> vowels <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">rune</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> <span class="token builtin">rune</span> <span class="token operator">:=</span> <span class="token keyword">range</span> ms <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token builtin">rune</span> <span class="token operator">==</span> <span class="token string">'a'</span> <span class="token operator">||</span> <span class="token builtin">rune</span> <span class="token operator">==</span> <span class="token string">'e'</span> <span class="token operator">||</span> <span class="token builtin">rune</span> <span class="token operator">==</span> <span class="token string">'i'</span> <span class="token operator">||</span> <span class="token builtin">rune</span> <span class="token operator">==</span> <span class="token string">'o'</span> <span class="token operator">||</span> <span class="token builtin">rune</span> <span class="token operator">==</span> <span class="token string">'u'</span> <span class="token punctuation">&#123;</span>            vowels <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>vowels<span class="token punctuation">,</span> <span class="token builtin">rune</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> vowels<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      name <span class="token operator">:=</span> <span class="token function">MyString</span><span class="token punctuation">(</span><span class="token string">"Sam Anderson"</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> v VowelsFinder    v <span class="token operator">=</span> name <span class="token comment">// possible since MyString implements VowelsFinder</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Vowels are %c"</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">FindVowels</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面程序的第 8 行，创建了一个名为 <code>VowelsFinder</code> 的接口，该接口有一个 <code>FindVowels() []rune</code> 的方法。  </p><p>在接下来的一行，我们创建了一个 <code>MyString</code> 类型。  </p><p><strong>在第 15 行，我们给接受者类型（Receiver Type） MyString 添加了方法 FindVowels() []rune。现在，我们称 MyString 实现了 VowelsFinder 接口。这就和其他语言（如 Java）很不同，其他一些语言要求一个类使用 implement 关键字，来显式地声明该类实现了接口。而在 Go 中，并不需要这样。如果一个类型包含了接口中声明的所有方法，那么它就隐式地实现了 Go 接口</strong>。  </p><p>在第 28 行，<code>v</code> 的类型为 <code>VowelsFinder</code>，<code>name</code> 的类型为 <code>MyString</code>，我们把 <code>name</code> 赋值给了 <code>v</code>。由于 <code>MyString</code> 实现了 <code>VowelFinder</code>，因此这是合法的。在下一行，<code>v.FindVowels()</code> 调用了 <code>MyString</code> 类型的 <code>FindVowels</code> 方法，打印字符串 <code>Sam Anderson</code> 里所有的元音。该程序输出 <code>Vowels are [a e o]</code>。  </p><p>祝贺！你已经创建并实现了你的第一个接口。  </p><h3 id="接口的实际用途"><a href="#接口的实际用途" class="headerlink" title="接口的实际用途"></a>接口的实际用途</h3><p>前面的例子教我们创建并实现了接口，但还没有告诉我们接口的实际用途。在上面的程序里，如果我们使用 <code>name.FindVowels()</code>，而不是 <code>v.FindVowels()</code>，程序依然能够照常运行，但接口并没有体现出实际价值。  </p><p>因此，我们现在讨论一下接口的实际应用场景。  </p><p>我们编写一个简单程序，根据公司员工的个人薪资，计算公司的总支出。为了简单起见，我们假定支出的单位都是美元。  </p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">type</span> SalaryCalculator <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>      <span class="token function">CalculateSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> Permanent <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>      empId    <span class="token builtin">int</span>    basicpay <span class="token builtin">int</span>    pf       <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> Contract <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>      empId  <span class="token builtin">int</span>    basicpay <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token comment">//salary of permanent employee is sum of basic pay and pf</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p Permanent<span class="token punctuation">)</span> <span class="token function">CalculateSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> p<span class="token punctuation">.</span>basicpay <span class="token operator">+</span> p<span class="token punctuation">.</span>pf<span class="token punctuation">&#125;</span><span class="token comment">//salary of contract employee is the basic pay alone</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c Contract<span class="token punctuation">)</span> <span class="token function">CalculateSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> c<span class="token punctuation">.</span>basicpay<span class="token punctuation">&#125;</span><span class="token comment">/*total expense is calculated by iterating though the SalaryCalculator slice and summing  the salaries of the individual employees  */</span><span class="token keyword">func</span> <span class="token function">totalExpense</span><span class="token punctuation">(</span>s <span class="token punctuation">[</span><span class="token punctuation">]</span>SalaryCalculator<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      expense <span class="token operator">:=</span> <span class="token number">0</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> s <span class="token punctuation">&#123;</span>        expense <span class="token operator">=</span> expense <span class="token operator">+</span> v<span class="token punctuation">.</span><span class="token function">CalculateSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Total Expense Per Month $%d"</span><span class="token punctuation">,</span> expense<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      pemp1 <span class="token operator">:=</span> Permanent<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">&#125;</span>    pemp2 <span class="token operator">:=</span> Permanent<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6000</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">&#125;</span>    cemp1 <span class="token operator">:=</span> Contract<span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">&#125;</span>    employees <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>SalaryCalculator<span class="token punctuation">&#123;</span>pemp1<span class="token punctuation">,</span> pemp2<span class="token punctuation">,</span> cemp1<span class="token punctuation">&#125;</span>    <span class="token function">totalExpense</span><span class="token punctuation">(</span>employees<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面程序的第 7 行声明了一个 <code>SalaryCalculator</code> 接口类型，它只有一个方法 <code>CalculateSalary() int</code>。  </p><p>在公司里，我们有两类员工，即第 11 行和第 17 行定义的结构体：<code>Permanent</code> 和 <code>Contract</code>。长期员工（<code>Permanent</code>）的薪资是 <code>basicpay</code> 与 <code>pf</code> 相加之和，而合同员工（<code>Contract</code>）只有基本工资 <code>basicpay</code>。在第 23 行和第 28 行中，方法 <code>CalculateSalary</code> 分别实现了以上关系。由于 <code>Permanent</code> 和 <code>Contract</code> 都声明了该方法，因此它们都实现了 <code>SalaryCalculator</code> 接口。  </p><p>第 36 行声明的 <code>totalExpense</code> 方法体现出了接口的妙用。该方法接收一个 <code>SalaryCalculator</code> 接口的切片（<code>[]SalaryCalculator</code>）作为参数。在第 49 行，我们向 <code>totalExpense</code> 方法传递了一个包含 <code>Permanent</code> 和 <code>Contact</code> 类型的切片。在第 39 行中，通过调用不同类型对应的 <code>CalculateSalary</code> 方法，<code>totalExpense</code> 可以计算得到支出。  </p><p>这样做最大的优点是：<code>totalExpense</code> 可以扩展新的员工类型，而不需要修改任何代码。假如公司增加了一种新的员工类型 <code>Freelancer</code>，它有着不同的薪资结构。<code>Freelancer</code>只需传递到 <code>totalExpense</code> 的切片参数中，无需 <code>totalExpense</code> 方法本身进行修改。只要 <code>Freelancer</code> 也实现了 <code>SalaryCalculator</code> 接口，<code>totalExpense</code> 就能够实现其功能。  </p><p>该程序输出 <code>Total Expense Per Month $14050</code>。  </p><h3 id="接口的内部表示"><a href="#接口的内部表示" class="headerlink" title="接口的内部表示"></a>接口的内部表示</h3><p>我们可以把接口看作内部的一个元组 <code>(type, value)</code>。 <code>type</code> 是接口底层的具体类型（Concrete Type），而 <code>value</code> 是具体类型的值。  </p><p>我们编写一个程序来更好地理解它。  </p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">type</span> Test <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>      <span class="token function">Tester</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> MyFloat <span class="token builtin">float64</span><span class="token keyword">func</span> <span class="token punctuation">(</span>m MyFloat<span class="token punctuation">)</span> <span class="token function">Tester</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">describe</span><span class="token punctuation">(</span>t Test<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Interface type %T value %v\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> t Test    f <span class="token operator">:=</span> <span class="token function">MyFloat</span><span class="token punctuation">(</span><span class="token number">89.7</span><span class="token punctuation">)</span>    t <span class="token operator">=</span> f    <span class="token function">describe</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>    t<span class="token punctuation">.</span><span class="token function">Tester</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Test</code> 接口只有一个方法 <code>Tester()</code>，而 <code>MyFloat</code> 类型实现了该接口。在第 24 行，我们把变量 <code>f</code>（<code>MyFloat</code> 类型）赋值给了 <code>t</code>（<code>Test</code> 类型）。现在 <code>t</code> 的具体类型为 <code>MyFloat</code>，而 <code>t</code> 的值为 <code>89.7</code>。第 17 行的 <code>describe</code> 函数打印出了接口的具体类型和值。该程序输出：  </p><pre class="line-numbers language-none"><code class="language-none">Interface type main.MyFloat value 89.7  89.7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="空接口"><a href="#空接口" class="headerlink" title="空接口"></a>空接口</h3><p>没有包含方法的接口称为空接口。空接口表示为 <code>interface&#123;&#125;</code>。由于空接口没有方法，因此所有类型都实现了空接口。  </p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">describe</span><span class="token punctuation">(</span>i <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Type = %T, value = %v\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      s <span class="token operator">:=</span> <span class="token string">"Hello World"</span>    <span class="token function">describe</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>    i <span class="token operator">:=</span> <span class="token number">55</span>    <span class="token function">describe</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    strt <span class="token operator">:=</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>        name <span class="token builtin">string</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>        name<span class="token punctuation">:</span> <span class="token string">"Naveen R"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    <span class="token function">describe</span><span class="token punctuation">(</span>strt<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的程序的第 7 行，<code>describe(i interface&#123;&#125;)</code> 函数接收空接口作为参数，因此，可以给这个函数传递任何类型。  </p><p>在第 13 行、第 15 行和第 21 行，我们分别给 <code>describe</code> 函数传递了 <code>string</code>、<code>int</code> 和 <code>struct</code>。该程序打印：  </p><pre class="line-numbers language-none"><code class="language-none">Type &#x3D; string, value &#x3D; Hello World  Type &#x3D; int, value &#x3D; 55  Type &#x3D; struct &#123; name string &#125;, value &#x3D; &#123;Naveen R&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h3><p>类型断言用于提取接口的底层值（Underlying Value）。  </p><p>在语法 <code>i.(T)</code> 中，接口 <code>i</code> 的具体类型是 <code>T</code>，该语法用于获得接口的底层值。  </p><p>一段代码胜过千言。下面编写个关于类型断言的程序。  </p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">assert</span><span class="token punctuation">(</span>i <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      s <span class="token operator">:=</span> i<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token comment">//get the underlying int value from i</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> s <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token number">56</span>    <span class="token function">assert</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在第 12 行，<code>s</code> 的具体类型是 <code>int</code>。在第 8 行，我们使用了语法 <code>i.(int)</code> 来提取 <code>i</code> 的底层 int 值。该程序会打印 <code>56</code>。  </p><p>在上面程序中，如果具体类型不是 int，会发生什么呢？接下来看看。  </p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">assert</span><span class="token punctuation">(</span>i <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      s <span class="token operator">:=</span> i<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>     fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> s <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token string">"Steven Paul"</span>    <span class="token function">assert</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面程序中，我们把具体类型为 <code>string</code> 的 <code>s</code> 传递给了 <code>assert</code> 函数，试图从它提取出 int 值。该程序会报错：<code>panic: interface conversion: interface &#123;&#125; is string, not int.</code>。  </p><p>要解决该问题，我们可以使用以下语法：  </p><pre class="line-numbers language-go" data-language="go"><code class="language-go">v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> i<span class="token punctuation">.</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果 <code>i</code> 的具体类型是 <code>T</code>，那么 <code>v</code> 赋值为 <code>i</code> 的底层值，而 <code>ok</code> 赋值为 <code>true</code>。  </p><p>如果 <code>i</code> 的具体类型不是 <code>T</code>，那么 <code>ok</code> 赋值为 <code>false</code>，<code>v</code> 赋值为 <code>T</code> 类型的零值，<strong>此时程序不会报错</strong>。  </p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">assert</span><span class="token punctuation">(</span>i <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> i<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> ok<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> s <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token number">56</span>    <span class="token function">assert</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>    <span class="token keyword">var</span> i <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token string">"Steven Paul"</span>    <span class="token function">assert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当给 <code>assert</code> 函数传递 <code>Steven Paul</code> 时，由于 <code>i</code> 的具体类型不是 <code>int</code>，<code>ok</code> 赋值为 <code>false</code>，而 <code>v</code> 赋值为 0（int 的零值）。该程序打印：  </p><pre class="line-numbers language-none"><code class="language-none">56 true  0 false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="类型选择（Type-Switch）"><a href="#类型选择（Type-Switch）" class="headerlink" title="类型选择（Type Switch）"></a>类型选择（Type Switch）</h3><p>类型选择用于将接口的具体类型与很多 case 语句所指定的类型进行比较。它与一般的 switch 语句类似。唯一的区别在于类型选择指定的是类型，而一般的 switch 指定的是值。  </p><p>类型选择的语法类似于类型断言。类型断言的语法是 <code>i.(T)</code>，而对于类型选择，类型 <code>T</code> 由关键字 <code>type</code> 代替。下面看看程序是如何工作的。  </p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">findType</span><span class="token punctuation">(</span>i <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">switch</span> i<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token builtin">string</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"I am a string and my value is %s\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"I am an int and my value is %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Unknown type\n"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">findType</span><span class="token punctuation">(</span><span class="token string">"Naveen"</span><span class="token punctuation">)</span>    <span class="token function">findType</span><span class="token punctuation">(</span><span class="token number">77</span><span class="token punctuation">)</span>    <span class="token function">findType</span><span class="token punctuation">(</span><span class="token number">89.98</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述程序的第 8 行，<code>switch i.(type)</code> 表示一个类型选择。每个 case 语句都把 <code>i</code> 的具体类型和一个指定类型进行了比较。如果 case 匹配成功，会打印出相应的语句。该程序输出：  </p><pre class="line-numbers language-none"><code class="language-none">I am a string and my value is Naveen  I am an int and my value is 77  Unknown type<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>第 20 行中的 <code>89.98</code> 的类型是 <code>float64</code>，没有在 case 上匹配成功，因此最后一行打印了 <code>Unknown type</code>。  </p><p><strong>还可以将一个类型和接口相比较。如果一个类型实现了接口，那么该类型与其实现的接口就可以互相比较</strong>。  </p><p>为了阐明这一点，下面写一个程序。  </p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">type</span> Describer <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>      <span class="token function">Describe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>      name <span class="token builtin">string</span>    age  <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p Person<span class="token punctuation">)</span> <span class="token function">Describe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s is %d years old"</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>name<span class="token punctuation">,</span> p<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">findType</span><span class="token punctuation">(</span>i <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">switch</span> v <span class="token operator">:=</span> i<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> Describer<span class="token punctuation">:</span>        v<span class="token punctuation">.</span><span class="token function">Describe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"unknown type\n"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">findType</span><span class="token punctuation">(</span><span class="token string">"Naveen"</span><span class="token punctuation">)</span>    p <span class="token operator">:=</span> Person<span class="token punctuation">&#123;</span>        name<span class="token punctuation">:</span> <span class="token string">"Naveen R"</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span>  <span class="token number">25</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    <span class="token function">findType</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面程序中，结构体 <code>Person</code> 实现了 <code>Describer</code> 接口。在第 19 行的 case 语句中，<code>v</code> 与接口类型 <code>Describer</code> 进行了比较。<code>p</code> 实现了 <code>Describer</code>，因此满足了该 case 语句，于是当程序运行到第 32 行的 <code>findType(p)</code> 时，程序调用了 <code>Describe()</code> 方法。  </p><p>该程序输出：</p><pre class="line-numbers language-none"><code class="language-none">unknown type  Naveen R is 25 years old<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>接口（一）的内容到此结束。在接口（二）中我们还会继续讨论接口</p>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>方法</title>
      <link href="2019/06/20/golang/17.fang-fa/"/>
      <url>2019/06/20/golang/17.fang-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="17-方法"><a href="#17-方法" class="headerlink" title="17. 方法"></a>17. 方法</h1><h3 id="什么是方法？"><a href="#什么是方法？" class="headerlink" title="什么是方法？"></a>什么是方法？</h3><p>方法其实就是一个函数，在 <code>func</code> 这个关键字和方法名中间加入了一个特殊的接收器类型。接收器可以是结构体类型或者是非结构体类型。接收器是可以在方法的内部访问的。</p><p>下面就是创建一个方法的语法。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>t Type<span class="token punctuation">)</span> <span class="token function">methodName</span><span class="token punctuation">(</span>parameter list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>上面的代码片段创建了一个接收器类型为 <code>Type</code> 的方法 <code>methodName</code>。</p><h3 id="方法示例"><a href="#方法示例" class="headerlink" title="方法示例"></a>方法示例</h3><p>让我们来编写一个简单的小程序，它会在结构体类型上创建一个方法并调用它。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">type</span> Employee <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    name     <span class="token builtin">string</span>    salary   <span class="token builtin">int</span>    currency <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token comment">/*  displaySalary() 方法将 Employee 做为接收器类型*/</span><span class="token keyword">func</span> <span class="token punctuation">(</span>e Employee<span class="token punctuation">)</span> <span class="token function">displaySalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Salary of %s is %s%d"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>name<span class="token punctuation">,</span> e<span class="token punctuation">.</span>currency<span class="token punctuation">,</span> e<span class="token punctuation">.</span>salary<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    emp1 <span class="token operator">:=</span> Employee <span class="token punctuation">&#123;</span>        name<span class="token punctuation">:</span>     <span class="token string">"Sam Adolf"</span><span class="token punctuation">,</span>        salary<span class="token punctuation">:</span>   <span class="token number">5000</span><span class="token punctuation">,</span>        currency<span class="token punctuation">:</span> <span class="token string">"$"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    emp1<span class="token punctuation">.</span><span class="token function">displaySalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 调用 Employee 类型的 displaySalary() 方法</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面程序的第 16 行，我们在 <code>Employee</code> 结构体类型上创建了一个 <code>displaySalary</code> 方法。displaySalary()方法在方法的内部访问了接收器 <code>e Employee</code>。在第 17 行，我们使用接收器 <code>e</code>，并打印 employee 的 name、currency 和 salary 这 3 个字段。</p><p>在第 26 行，我们调用了方法 <code>emp1.displaySalary()</code>。</p><p>程序输出：<code>Salary of Sam Adolf is $5000</code>。</p><h3 id="为什么我们已经有函数了还需要方法呢？"><a href="#为什么我们已经有函数了还需要方法呢？" class="headerlink" title="为什么我们已经有函数了还需要方法呢？"></a>为什么我们已经有函数了还需要方法呢？</h3><p>上面的程序已经被重写为只使用函数，没有方法。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">type</span> Employee <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    name     <span class="token builtin">string</span>    salary   <span class="token builtin">int</span>    currency <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token comment">/*displaySalary()方法被转化为一个函数，把 Employee 当做参数传入。*/</span><span class="token keyword">func</span> <span class="token function">displaySalary</span><span class="token punctuation">(</span>e Employee<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Salary of %s is %s%d"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>name<span class="token punctuation">,</span> e<span class="token punctuation">.</span>currency<span class="token punctuation">,</span> e<span class="token punctuation">.</span>salary<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    emp1 <span class="token operator">:=</span> Employee<span class="token punctuation">&#123;</span>        name<span class="token punctuation">:</span>     <span class="token string">"Sam Adolf"</span><span class="token punctuation">,</span>        salary<span class="token punctuation">:</span>   <span class="token number">5000</span><span class="token punctuation">,</span>        currency<span class="token punctuation">:</span> <span class="token string">"$"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    <span class="token function">displaySalary</span><span class="token punctuation">(</span>emp1<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的程序中，<code>displaySalary</code> 方法被转化为一个函数，<code>Employee</code> 结构体被当做参数传递给它。这个程序也产生完全相同的输出：<code>Salary of Sam Adolf is $5000</code>。</p><p>既然我们可以使用函数写出相同的程序，那么为什么我们需要方法？这有着几个原因，让我们一个个的看看。</p><ul><li><code> Go 不是纯粹的面向对象编程语言</code>，而且Go不支持类。因此，基于类型的方法是一种实现和类相似行为的途径。</li><li>相同的名字的方法可以定义在不同的类型上，而相同名字的函数是不被允许的。假设我们有一个 <code>Square</code> 和 <code>Circle</code> 结构体。可以在 <code>Square</code> 和 <code>Circle</code> 上分别定义一个 <code>Area</code> 方法。见下面的程序。</li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"math"</span><span class="token punctuation">)</span><span class="token keyword">type</span> Rectangle <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    length <span class="token builtin">int</span>    width  <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> Circle <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    radius <span class="token builtin">float64</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>r Rectangle<span class="token punctuation">)</span> <span class="token function">Area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> r<span class="token punctuation">.</span>length <span class="token operator">*</span> r<span class="token punctuation">.</span>width<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c Circle<span class="token punctuation">)</span> <span class="token function">Area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> math<span class="token punctuation">.</span>Pi <span class="token operator">*</span> c<span class="token punctuation">.</span>radius <span class="token operator">*</span> c<span class="token punctuation">.</span>radius<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    r <span class="token operator">:=</span> Rectangle<span class="token punctuation">&#123;</span>        length<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>        width<span class="token punctuation">:</span>  <span class="token number">5</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Area of rectangle %d\n"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span><span class="token function">Area</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    c <span class="token operator">:=</span> Circle<span class="token punctuation">&#123;</span>        radius<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Area of circle %f"</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">Area</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该程序输出：</p><pre class="line-numbers language-none"><code class="language-none">Area of rectangle 50Area of circle 452.389342<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>上面方法的属性被使用在接口中。我们将在接下来的教程中讨论这个问题。</p><h3 id="指针接收器与值接收器"><a href="#指针接收器与值接收器" class="headerlink" title="指针接收器与值接收器"></a>指针接收器与值接收器</h3><p>到目前为止，我们只看到了使用值接收器的方法。还可以创建使用指针接收器的方法。值接收器和指针接收器之间的区别在于，在指针接收器的方法内部的改变对于调用者是可见的，然而值接收器的情况不是这样的。让我们用下面的程序来帮助理解这一点。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">type</span> Employee <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    name <span class="token builtin">string</span>    age  <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token comment">/*使用值接收器的方法。*/</span><span class="token keyword">func</span> <span class="token punctuation">(</span>e Employee<span class="token punctuation">)</span> <span class="token function">changeName</span><span class="token punctuation">(</span>newName <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span>name <span class="token operator">=</span> newName<span class="token punctuation">&#125;</span><span class="token comment">/*使用指针接收器的方法。*/</span><span class="token keyword">func</span> <span class="token punctuation">(</span>e <span class="token operator">*</span>Employee<span class="token punctuation">)</span> <span class="token function">changeAge</span><span class="token punctuation">(</span>newAge <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span>age <span class="token operator">=</span> newAge<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e <span class="token operator">:=</span> Employee<span class="token punctuation">&#123;</span>        name<span class="token punctuation">:</span> <span class="token string">"Mark Andrew"</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span>  <span class="token number">50</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Employee name before change: %s"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    e<span class="token punctuation">.</span><span class="token function">changeName</span><span class="token punctuation">(</span><span class="token string">"Michael Andrew"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"\nEmployee name after change: %s"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"\n\nEmployee age before change: %d"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>age<span class="token punctuation">)</span>    <span class="token punctuation">(</span><span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">changeAge</span><span class="token punctuation">(</span><span class="token number">51</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"\nEmployee age after change: %d"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的程序中，<code>changeName</code> 方法有一个值接收器 <code>(e Employee)</code>，而 <code>changeAge</code> 方法有一个指针接收器 <code>(e *Employee)</code>。在 <code>changeName</code> 方法中对 <code>Employee</code> 结构体的字段 <code>name</code> 所做的改变对调用者是不可见的，因此程序在调用 <code>e.changeName(&quot;Michael Andrew&quot;)</code> 这个方法的前后打印出相同的名字。由于 <code>changeAge</code> 方法是使用指针 <code>(e *Employee)</code> 接收器的，所以在调用 <code>(&amp;e).changeAge(51)</code> 方法对 <code>age</code> 字段做出的改变对调用者将是可见的。该程序输出如下：</p><pre class="line-numbers language-none"><code class="language-none">Employee name before change: Mark AndrewEmployee name after change: Mark AndrewEmployee age before change: 50Employee age after change: 51<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面程序的第 36 行，我们使用 <code>(&amp;e).changeAge(51)</code> 来调用 <code>changeAge</code> 方法。由于 <code>changeAge</code> 方法有一个指针接收器，所以我们使用 <code>(&amp;e)</code> 来调用这个方法。其实没有这个必要，Go语言让我们可以直接使用 <code>e.changeAge(51)</code>。<code>e.changeAge(51)</code> 会自动被Go语言解释为 <code>(&amp;e).changeAge(51)</code>。</p><p>下面的程序重写了，使用 <code>e.changeAge(51)</code> 来代替 <code>(&amp;e).changeAge(51)</code>，它输出相同的结果。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">type</span> Employee <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    name <span class="token builtin">string</span>    age  <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token comment">/*使用值接收器的方法。*/</span><span class="token keyword">func</span> <span class="token punctuation">(</span>e Employee<span class="token punctuation">)</span> <span class="token function">changeName</span><span class="token punctuation">(</span>newName <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span>name <span class="token operator">=</span> newName<span class="token punctuation">&#125;</span><span class="token comment">/*使用指针接收器的方法。*/</span><span class="token keyword">func</span> <span class="token punctuation">(</span>e <span class="token operator">*</span>Employee<span class="token punctuation">)</span> <span class="token function">changeAge</span><span class="token punctuation">(</span>newAge <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span>age <span class="token operator">=</span> newAge<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e <span class="token operator">:=</span> Employee<span class="token punctuation">&#123;</span>        name<span class="token punctuation">:</span> <span class="token string">"Mark Andrew"</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span>  <span class="token number">50</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Employee name before change: %s"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    e<span class="token punctuation">.</span><span class="token function">changeName</span><span class="token punctuation">(</span><span class="token string">"Michael Andrew"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"\nEmployee name after change: %s"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"\n\nEmployee age before change: %d"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>age<span class="token punctuation">)</span>    e<span class="token punctuation">.</span><span class="token function">changeAge</span><span class="token punctuation">(</span><span class="token number">51</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"\nEmployee age after change: %d"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="那么什么时候使用指针接收器，什么时候使用值接收器？"><a href="#那么什么时候使用指针接收器，什么时候使用值接收器？" class="headerlink" title="那么什么时候使用指针接收器，什么时候使用值接收器？"></a>那么什么时候使用指针接收器，什么时候使用值接收器？</h3><p>一般来说，指针接收器可以使用在：对方法内部的接收器所做的改变应该对调用者可见时。</p><p>指针接收器也可以被使用在如下场景：当拷贝一个结构体的代价过于昂贵时。考虑下一个结构体有很多的字段。在方法内使用这个结构体做为值接收器需要拷贝整个结构体，这是很昂贵的。在这种情况下使用指针接收器，结构体不会被拷贝，只会传递一个指针到方法内部使用。</p><p>在其他的所有情况，值接收器都可以被使用。</p><h3 id="匿名字段的方法"><a href="#匿名字段的方法" class="headerlink" title="匿名字段的方法"></a>匿名字段的方法</h3><p>属于结构体的匿名字段的方法可以被直接调用，就好像这些方法是属于定义了匿名字段的结构体一样。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">type</span> address <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    city  <span class="token builtin">string</span>    state <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>a address<span class="token punctuation">)</span> <span class="token function">fullAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Full address: %s, %s"</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>city<span class="token punctuation">,</span> a<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> person <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    firstName <span class="token builtin">string</span>    lastName  <span class="token builtin">string</span>    address<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    p <span class="token operator">:=</span> person<span class="token punctuation">&#123;</span>        firstName<span class="token punctuation">:</span> <span class="token string">"Elon"</span><span class="token punctuation">,</span>        lastName<span class="token punctuation">:</span>  <span class="token string">"Musk"</span><span class="token punctuation">,</span>        address<span class="token punctuation">:</span> address <span class="token punctuation">&#123;</span>            city<span class="token punctuation">:</span>  <span class="token string">"Los Angeles"</span><span class="token punctuation">,</span>            state<span class="token punctuation">:</span> <span class="token string">"California"</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    p<span class="token punctuation">.</span><span class="token function">fullAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//访问 address 结构体的 fullAddress 方法</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面程序的第 32 行，我们通过使用 <code>p.fullAddress()</code> 来访问 <code>address</code> 结构体的 <code>fullAddress()</code> 方法。明确的调用 <code>p.address.fullAddress()</code> 是没有必要的。该程序输出：</p><pre class="line-numbers language-none"><code class="language-none">Full address: Los Angeles, California<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="在方法中使用值接收器-与-在函数中使用值参数"><a href="#在方法中使用值接收器-与-在函数中使用值参数" class="headerlink" title="在方法中使用值接收器 与 在函数中使用值参数"></a>在方法中使用值接收器 与 在函数中使用值参数</h3><p>这个话题很多Go语言新手都弄不明白。我会尽量讲清楚。</p><p>当一个函数有一个值参数，它只能接受一个值参数。</p><p>当一个方法有一个值接收器，它可以接受值接收器和指针接收器。</p><p>让我们通过一个例子来理解这一点。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">type</span> rectangle <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    length <span class="token builtin">int</span>    width  <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">area</span><span class="token punctuation">(</span>r rectangle<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Area Function result: %d\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>length <span class="token operator">*</span> r<span class="token punctuation">.</span>width<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>r rectangle<span class="token punctuation">)</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Area Method result: %d\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span>length <span class="token operator">*</span> r<span class="token punctuation">.</span>width<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    r <span class="token operator">:=</span> rectangle<span class="token punctuation">&#123;</span>        length<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>        width<span class="token punctuation">:</span>  <span class="token number">5</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    <span class="token function">area</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>    r<span class="token punctuation">.</span><span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    p <span class="token operator">:=</span> <span class="token operator">&amp;</span>r    <span class="token comment">/*       compilation error, cannot use p (type *rectangle) as type rectangle       in argument to area    */</span>    <span class="token comment">//area(p)</span>    p<span class="token punctuation">.</span><span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//通过指针调用值接收器</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第 12 行的函数 <code>func area(r rectangle)</code> 接受一个值参数，方法 <code>func (r rectangle) area()</code> 接受一个值接收器。</p><p>在第 25 行，我们通过值参数 <code>area(r)</code> 来调用 area 这个函数，这是合法的。同样，我们使用值接收器来调用 area 方法 <code>r.area()</code>，这也是合法的。</p><p>在第 28 行，我们创建了一个指向 <code>r</code> 的指针 <code>p</code>。如果我们试图把这个指针传递到只能接受一个值参数的函数 area，编译器将会报错。所以我把代码的第 33 行注释了。如果你把这行的代码注释去掉，编译器将会抛出错误 <code>compilation error, cannot use p (type *rectangle) as type rectangle in argument to area.</code>。这将会按预期抛出错误。</p><p>现在到了棘手的部分了，在第35行的代码 <code>p.area()</code> 使用指针接收器 <code>p</code> 调用了只接受一个值接收器的方法 <code>area</code>。这是完全有效的。原因是当 <code>area</code> 有一个值接收器时，为了方便Go语言把 <code>p.area()</code> 解释为 <code>(*p).area()</code>。</p><p>该程序将会输出：</p><pre class="line-numbers language-none"><code class="language-none">Area Function result: 50Area Method result: 50Area Method result: 50<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="在方法中使用指针接收器-与-在函数中使用指针参数"><a href="#在方法中使用指针接收器-与-在函数中使用指针参数" class="headerlink" title="在方法中使用指针接收器 与 在函数中使用指针参数"></a>在方法中使用指针接收器 与 在函数中使用指针参数</h3><p>和值参数相类似，函数使用指针参数只接受指针，而使用指针接收器的方法可以使用值接收器和指针接收器。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">type</span> rectangle <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    length <span class="token builtin">int</span>    width  <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">perimeter</span><span class="token punctuation">(</span>r <span class="token operator">*</span>rectangle<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"perimeter function output:"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>length<span class="token operator">+</span>r<span class="token punctuation">.</span>width<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>rectangle<span class="token punctuation">)</span> <span class="token function">perimeter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"perimeter method output:"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>length<span class="token operator">+</span>r<span class="token punctuation">.</span>width<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    r <span class="token operator">:=</span> rectangle<span class="token punctuation">&#123;</span>        length<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>        width<span class="token punctuation">:</span>  <span class="token number">5</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    p <span class="token operator">:=</span> <span class="token operator">&amp;</span>r <span class="token comment">//pointer to r</span>    <span class="token function">perimeter</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>    p<span class="token punctuation">.</span><span class="token function">perimeter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">/*        cannot use r (type rectangle) as type *rectangle in argument to perimeter    */</span>    <span class="token comment">//perimeter(r)</span>    r<span class="token punctuation">.</span><span class="token function">perimeter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//使用值来调用指针接收器</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面程序的第 12 行，定义了一个接受指针参数的函数 <code>perimeter</code>。第 17 行定义了一个有一个指针接收器的方法。</p><p>在第 27 行，我们调用 perimeter 函数时传入了一个指针参数。在第 28 行，我们通过指针接收器调用了 perimeter 方法。所有一切看起来都这么完美。</p><p>在被注释掉的第 33 行，我们尝试通过传入值参数 <code>r</code> 调用函数 <code>perimeter</code>。这是不被允许的，因为函数的指针参数不接受值参数。如果你把这行的代码注释去掉并把程序运行起来，编译器将会抛出错误 <code>main.go:33: cannot use r (type rectangle) as type *rectangle in argument to perimeter.</code>。</p><p>在第 35 行，我们通过值接收器 <code>r</code> 来调用有指针接收器的方法 <code>perimeter</code>。这是被允许的，为了方便Go语言把代码 <code>r.perimeter()</code> 解释为 <code>(&amp;r).perimeter()</code>。该程序输出：</p><pre class="line-numbers language-none"><code class="language-none">perimeter function output: 30perimeter method output: 30perimeter method output: 30<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="在非结构体上的方法"><a href="#在非结构体上的方法" class="headerlink" title="在非结构体上的方法"></a>在非结构体上的方法</h3><p>到目前为止，我们只在结构体类型上定义方法。也可以在非结构体类型上定义方法，但是有一个问题。<strong>为了在一个类型上定义一个方法，方法的接收器类型定义和方法的定义应该在同一个包中。到目前为止，我们定义的所有结构体和结构体上的方法都是在同一个 main 包中，因此它们是可以运行的。</strong></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">func</span> <span class="token punctuation">(</span>a <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token function">add</span><span class="token punctuation">(</span>b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面程序的第 3 行，我们尝试把一个 <code>add</code> 方法添加到内置的类型 <code>int</code>。这是不允许的，因为 <code>add</code> 方法的定义和 <code>int</code> 类型的定义不在同一个包中。该程序会抛出编译错误 <code>cannot define new methods on non-local type int</code>。</p><p>让该程序工作的方法是为内置类型 int 创建一个类型别名，然后创建一个以该类型别名为接收器的方法。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">type</span> myInt <span class="token builtin">int</span><span class="token keyword">func</span> <span class="token punctuation">(</span>a myInt<span class="token punctuation">)</span> <span class="token function">add</span><span class="token punctuation">(</span>b myInt<span class="token punctuation">)</span> myInt <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    num1 <span class="token operator">:=</span> <span class="token function">myInt</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    num2 <span class="token operator">:=</span> <span class="token function">myInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    sum <span class="token operator">:=</span> num1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Sum is"</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面程序的第5行，我们为 <code>int</code> 创建了一个类型别名 <code>myInt</code>。在第7行，我们定义了一个以 <code>myInt</code> 为接收器的的方法 <code>add</code>。</p><p>该程序将会打印出 <code>Sum is 15</code>。</p><p>我已经创建了一个程序，包含了我们迄今为止所讨论的所有概念</p>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>结构体</title>
      <link href="2019/06/19/golang/16.jie-gou-ti/"/>
      <url>2019/06/19/golang/16.jie-gou-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="16-结构体"><a href="#16-结构体" class="headerlink" title="16. 结构体"></a>16. 结构体</h1><h3 id="什么是结构体？"><a href="#什么是结构体？" class="headerlink" title="什么是结构体？"></a>什么是结构体？</h3><p>结构体是用户定义的类型，表示若干个字段（Field）的集合。有时应该把数据整合在一起，而不是让这些数据没有联系。这种情况下可以使用结构体。</p><p>例如，一个职员有 <code>firstName</code>、<code>lastName</code> 和 <code>age</code> 三个属性，而把这些属性组合在一个结构体 <code>employee</code> 中就很合理。</p><h3 id="结构体的声明"><a href="#结构体的声明" class="headerlink" title="结构体的声明"></a>结构体的声明</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Employee <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    firstName <span class="token builtin">string</span>    lastName  <span class="token builtin">string</span>    age       <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的代码片段里，声明了一个结构体类型 <code>Employee</code>，它有 <code>firstName</code>、<code>lastName</code> 和 <code>age</code> 三个字段。通过把相同类型的字段声明在同一行，结构体可以变得更加紧凑。在上面的结构体中，<code>firstName</code> 和 <code>lastName</code> 属于相同的 <code>string</code> 类型，于是这个结构体可以重写为：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Employee <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    firstName<span class="token punctuation">,</span> lastName <span class="token builtin">string</span>    age<span class="token punctuation">,</span> salary         <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上面的结构体 <code>Employee</code> 称为 <strong>命名的结构体（Named Structure）</strong>。我们创建了名为 <code>Employee</code> 的新类型，而它可以用于创建 <code>Employee</code> 类型的结构体变量。  </p><p>声明结构体时也可以不用声明一个新类型，这样的结构体类型称为 <strong>匿名结构体（Anonymous Structure）</strong>。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> employee <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    firstName<span class="token punctuation">,</span> lastName <span class="token builtin">string</span>    age <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上述代码片段创建一个<strong>匿名结构体</strong> <code>employee</code>。</p><h3 id="创建命名的结构体"><a href="#创建命名的结构体" class="headerlink" title="创建命名的结构体"></a>创建命名的结构体</h3><p>通过下面代码，我们定义了一个<strong>命名的结构体 Employee</strong>。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">type</span> Employee <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>      firstName<span class="token punctuation">,</span> lastName <span class="token builtin">string</span>    age<span class="token punctuation">,</span> salary         <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//creating structure using field names</span>    emp1 <span class="token operator">:=</span> Employee<span class="token punctuation">&#123;</span>        firstName<span class="token punctuation">:</span> <span class="token string">"Sam"</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span>       <span class="token number">25</span><span class="token punctuation">,</span>        salary<span class="token punctuation">:</span>    <span class="token number">500</span><span class="token punctuation">,</span>        lastName<span class="token punctuation">:</span>  <span class="token string">"Anderson"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//creating structure without using field names</span>    emp2 <span class="token operator">:=</span> Employee<span class="token punctuation">&#123;</span><span class="token string">"Thomas"</span><span class="token punctuation">,</span> <span class="token string">"Paul"</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">800</span><span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Employee 1"</span><span class="token punctuation">,</span> emp1<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Employee 2"</span><span class="token punctuation">,</span> emp2<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述程序的第 7 行，我们创建了一个命名的结构体 <code>Employee</code>。而在第 15 行，通过指定每个字段名的值，我们定义了结构体变量 <code>emp1</code>。字段名的顺序不一定要与声明结构体类型时的顺序相同。在这里，我们改变了 <code>lastName</code> 的位置，将其移到了末尾。这样做也不会有任何的问题。</p><p>在上面程序的第 23 行，定义 <code>emp2</code> 时我们省略了字段名。在这种情况下，就需要保证字段名的顺序与声明结构体时的顺序相同。</p><p>该程序将输出：</p><pre class="line-numbers language-none"><code class="language-none">Employee 1 &#123;Sam Anderson 25 500&#125;Employee 2 &#123;Thomas Paul 29 800&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="创建匿名结构体"><a href="#创建匿名结构体" class="headerlink" title="创建匿名结构体"></a>创建匿名结构体</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    emp3 <span class="token operator">:=</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>        firstName<span class="token punctuation">,</span> lastName <span class="token builtin">string</span>        age<span class="token punctuation">,</span> salary         <span class="token builtin">int</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>        firstName<span class="token punctuation">:</span> <span class="token string">"Andreah"</span><span class="token punctuation">,</span>        lastName<span class="token punctuation">:</span>  <span class="token string">"Nikola"</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span>       <span class="token number">31</span><span class="token punctuation">,</span>        salary<span class="token punctuation">:</span>    <span class="token number">5000</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Employee 3"</span><span class="token punctuation">,</span> emp3<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述程序的第 3 行，我们定义了一个<strong>匿名结构体变量</strong> <code>emp3</code>。上面我们已经提到，之所以称这种结构体是匿名的，是因为它只是创建一个新的结构体变量 <code>em3</code>，而没有定义任何结构体类型。</p><p>该程序会输出：</p><pre class="line-numbers language-none"><code class="language-none">Employee 3 &#123;Andreah Nikola 31 5000&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="结构体的零值（Zero-Value）"><a href="#结构体的零值（Zero-Value）" class="headerlink" title="结构体的零值（Zero Value）"></a>结构体的零值（Zero Value）</h3><p>当定义好的结构体并没有被显式地初始化时，该结构体的字段将默认赋为零值。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">type</span> Employee <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>      firstName<span class="token punctuation">,</span> lastName <span class="token builtin">string</span>    age<span class="token punctuation">,</span> salary         <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> emp4 Employee <span class="token comment">//zero valued structure</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Employee 4"</span><span class="token punctuation">,</span> emp4<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该程序定义了 <code>emp4</code>，却没有初始化任何值。因此 <code>firstName</code> 和 <code>lastName</code> 赋值为 string 的零值（<code>&quot;&quot;</code>）。而 <code>age</code> 和 <code>salary</code> 赋值为 int 的零值（0）。该程序会输出：</p><pre class="line-numbers language-none"><code class="language-none">Employee 4 &#123; 0 0&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当然还可以为某些字段指定初始值，而忽略其他字段。这样，忽略的字段名会赋值为零值。  </p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">type</span> Employee <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>      firstName<span class="token punctuation">,</span> lastName <span class="token builtin">string</span>    age<span class="token punctuation">,</span> salary         <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      emp5 <span class="token operator">:=</span> Employee<span class="token punctuation">&#123;</span>        firstName<span class="token punctuation">:</span> <span class="token string">"John"</span><span class="token punctuation">,</span>        lastName<span class="token punctuation">:</span>  <span class="token string">"Paul"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Employee 5"</span><span class="token punctuation">,</span> emp5<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面程序中的第 14 行和第 15 行，我们初始化了 <code>firstName</code> 和 <code>lastName</code>，而 <code>age</code> 和 <code>salary</code> 没有进行初始化。因此 <code>age</code> 和 <code>salary</code> 赋值为零值。该程序会输出：</p><pre class="line-numbers language-none"><code class="language-none">Employee 5 &#123;John Paul 0 0&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="访问结构体的字段"><a href="#访问结构体的字段" class="headerlink" title="访问结构体的字段"></a>访问结构体的字段</h3><p>点号操作符 <code>.</code> 用于访问结构体的字段。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">type</span> Employee <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>      firstName<span class="token punctuation">,</span> lastName <span class="token builtin">string</span>    age<span class="token punctuation">,</span> salary         <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      emp6 <span class="token operator">:=</span> Employee<span class="token punctuation">&#123;</span><span class="token string">"Sam"</span><span class="token punctuation">,</span> <span class="token string">"Anderson"</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">6000</span><span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"First Name:"</span><span class="token punctuation">,</span> emp6<span class="token punctuation">.</span>firstName<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Last Name:"</span><span class="token punctuation">,</span> emp6<span class="token punctuation">.</span>lastName<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Age:"</span><span class="token punctuation">,</span> emp6<span class="token punctuation">.</span>age<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Salary: $%d"</span><span class="token punctuation">,</span> emp6<span class="token punctuation">.</span>salary<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面程序中的 <strong>emp6.firstName</strong> 访问了结构体 <code>emp6</code> 的字段 <code>firstName</code>。该程序输出：</p><pre class="line-numbers language-none"><code class="language-none">First Name: Sam  Last Name: Anderson  Age: 55  Salary: $6000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>还可以创建零值的 <code>struct</code>，以后再给各个字段赋值。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">type</span> Employee <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>      firstName<span class="token punctuation">,</span> lastName <span class="token builtin">string</span>    age<span class="token punctuation">,</span> salary         <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> emp7 Employee    emp7<span class="token punctuation">.</span>firstName <span class="token operator">=</span> <span class="token string">"Jack"</span>    emp7<span class="token punctuation">.</span>lastName <span class="token operator">=</span> <span class="token string">"Adams"</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Employee 7:"</span><span class="token punctuation">,</span> emp7<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面程序中，我们定义了 <code>emp7</code>，接着给 <code>firstName</code> 和 <code>lastName</code> 赋值。该程序会输出：  </p><pre class="line-numbers language-none"><code class="language-none">Employee 7: &#123;Jack Adams 0 0&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="结构体的指针"><a href="#结构体的指针" class="headerlink" title="结构体的指针"></a>结构体的指针</h3><p>还可以创建指向结构体的指针。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">type</span> Employee <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>      firstName<span class="token punctuation">,</span> lastName <span class="token builtin">string</span>    age<span class="token punctuation">,</span> salary         <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      emp8 <span class="token operator">:=</span> <span class="token operator">&amp;</span>Employee<span class="token punctuation">&#123;</span><span class="token string">"Sam"</span><span class="token punctuation">,</span> <span class="token string">"Anderson"</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">6000</span><span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"First Name:"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>emp8<span class="token punctuation">)</span><span class="token punctuation">.</span>firstName<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Age:"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>emp8<span class="token punctuation">)</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面程序中，<strong>emp8</strong> 是一个指向结构体 <code>Employee</code> 的指针。<code>(*emp8).firstName</code> 表示访问结构体 <code>emp8</code> 的 <code>firstName</code> 字段。该程序会输出：</p><pre class="line-numbers language-none"><code class="language-none">First Name: SamAge: 55<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>Go 语言允许我们在访问 firstName 字段时，可以使用 emp8.firstName 来代替显式的解引用 (*emp8).firstName</strong>。  </p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">type</span> Employee <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>      firstName<span class="token punctuation">,</span> lastName <span class="token builtin">string</span>    age<span class="token punctuation">,</span> salary         <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      emp8 <span class="token operator">:=</span> <span class="token operator">&amp;</span>Employee<span class="token punctuation">&#123;</span><span class="token string">"Sam"</span><span class="token punctuation">,</span> <span class="token string">"Anderson"</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">6000</span><span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"First Name:"</span><span class="token punctuation">,</span> emp8<span class="token punctuation">.</span>firstName<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Age:"</span><span class="token punctuation">,</span> emp8<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的程序中，我们使用 <code>emp8.firstName</code> 来访问 <code>firstName</code> 字段，该程序会输出：  </p><pre class="line-numbers language-none"><code class="language-none">First Name: SamAge: 55<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="匿名字段"><a href="#匿名字段" class="headerlink" title="匿名字段"></a>匿名字段</h3><p>当我们创建结构体时，字段可以只有类型，而没有字段名。这样的字段称为匿名字段（Anonymous Field）。  </p><p>以下代码创建一个 <code>Person</code> 结构体，它含有两个匿名字段 <code>string</code> 和 <code>int</code>。  </p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>      <span class="token builtin">string</span>    <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我们接下来使用匿名字段来编写一个程序。  </p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>      <span class="token builtin">string</span>    <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      p <span class="token operator">:=</span> Person<span class="token punctuation">&#123;</span><span class="token string">"Naveen"</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的程序中，结构体 <code>Person</code> 有两个匿名字段。<code>p := Person&#123;&quot;Naveen&quot;, 50&#125;</code> 定义了一个 <code>Person</code> 类型的变量。该程序输出 <code>&#123;Naveen 50&#125;</code>。  </p><p><strong>虽然匿名字段没有名称，但其实匿名字段的名称就默认为它的类型</strong>。比如在上面的 <code>Person</code> 结构体里，虽说字段是匿名的，但 Go 默认这些字段名是它们各自的类型。所以 <code>Person</code> 结构体有两个名为 <code>string</code> 和 <code>int</code> 的字段。  </p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>      <span class="token builtin">string</span>    <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> p1 Person    p1<span class="token punctuation">.</span><span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"naveen"</span>    p1<span class="token punctuation">.</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">50</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面程序的第 14 行和第 15 行，我们访问了 <code>Person</code> 结构体的匿名字段，我们把字段类型作为字段名，分别为 “string” 和 “int”。上面程序的输出如下：  </p><pre class="line-numbers language-none"><code class="language-none">&#123;naveen 50&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="嵌套结构体（Nested-Structs）"><a href="#嵌套结构体（Nested-Structs）" class="headerlink" title="嵌套结构体（Nested Structs）"></a>嵌套结构体（Nested Structs）</h3><p>结构体的字段有可能也是一个结构体。这样的结构体称为嵌套结构体。  </p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">type</span> Address <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>      city<span class="token punctuation">,</span> state <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>      name <span class="token builtin">string</span>    age <span class="token builtin">int</span>    address Address<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> p Person    p<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Naveen"</span>    p<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">50</span>    p<span class="token punctuation">.</span>address <span class="token operator">=</span> Address <span class="token punctuation">&#123;</span>        city<span class="token punctuation">:</span> <span class="token string">"Chicago"</span><span class="token punctuation">,</span>        state<span class="token punctuation">:</span> <span class="token string">"Illinois"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Name:"</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Age:"</span><span class="token punctuation">,</span>p<span class="token punctuation">.</span>age<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"City:"</span><span class="token punctuation">,</span>p<span class="token punctuation">.</span>address<span class="token punctuation">.</span>city<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"State:"</span><span class="token punctuation">,</span>p<span class="token punctuation">.</span>address<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的结构体 <code>Person</code> 有一个字段 <code>address</code>，而 <code>address</code> 也是结构体。该程序输出：  </p><pre class="line-numbers language-none"><code class="language-none">Name: Naveen  Age: 50  City: Chicago  State: Illinois<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="提升字段（Promoted-Fields）"><a href="#提升字段（Promoted-Fields）" class="headerlink" title="提升字段（Promoted Fields）"></a>提升字段（Promoted Fields）</h3><p>如果是结构体中有匿名的结构体类型字段，则该匿名结构体里的字段就称为提升字段。这是因为提升字段就像是属于外部结构体一样，可以用外部结构体直接访问。我知道这种定义很复杂，所以我们直接研究下代码来理解吧。  </p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Address <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>      city<span class="token punctuation">,</span> state <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>      name <span class="token builtin">string</span>    age  <span class="token builtin">int</span>    Address<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的代码片段中，<code>Person</code> 结构体有一个匿名字段 <code>Address</code>，而 <code>Address</code> 是一个结构体。现在结构体 <code>Address</code> 有 <code>city</code> 和 <code>state</code> 两个字段，访问这两个字段就像在 <code>Person</code> 里直接声明的一样，因此我们称之为提升字段。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">type</span> Address <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    city<span class="token punctuation">,</span> state <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    name <span class="token builtin">string</span>    age  <span class="token builtin">int</span>    Address<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> p Person    p<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Naveen"</span>    p<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">50</span>    p<span class="token punctuation">.</span>Address <span class="token operator">=</span> Address<span class="token punctuation">&#123;</span>        city<span class="token punctuation">:</span>  <span class="token string">"Chicago"</span><span class="token punctuation">,</span>        state<span class="token punctuation">:</span> <span class="token string">"Illinois"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Name:"</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Age:"</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>age<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"City:"</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>city<span class="token punctuation">)</span> <span class="token comment">//city is promoted field</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"State:"</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>state<span class="token punctuation">)</span> <span class="token comment">//state is promoted field</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面代码中的第 26 行和第 27 行，我们使用了语法 <code>p.city</code> 和 <code>p.state</code>，访问提升字段 <code>city</code> 和 <code>state</code> 就像它们是在结构体 <code>p</code> 中声明的一样。该程序会输出：</p><pre class="line-numbers language-none"><code class="language-none">Name: Naveen  Age: 50  City: Chicago  State: Illinois<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="导出结构体和字段"><a href="#导出结构体和字段" class="headerlink" title="导出结构体和字段"></a>导出结构体和字段</h3><p>如果结构体名称以大写字母开头，则它是其他包可以访问的导出类型（Exported Type）。同样，如果结构体里的字段首字母大写，它也能被其他包访问到。  </p><p>让我们使用自定义包，编写一个程序来更好地去理解它。  </p><p>在你的 Go 工作区的 <code>src</code> 目录中，创建一个名为 <code>structs</code> 的文件夹。另外在 <code>structs</code> 中再创建一个目录 <code>computer</code>。  </p><p>在 <code>computer</code> 目录中，在名为 <code>spec.go</code> 的文件中保存下面的程序。  </p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> computer<span class="token keyword">type</span> Spec <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span> <span class="token comment">//exported struct  </span>    Maker <span class="token builtin">string</span> <span class="token comment">//exported field</span>    model <span class="token builtin">string</span> <span class="token comment">//unexported field</span>    Price <span class="token builtin">int</span> <span class="token comment">//exported field</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码片段中，创建了一个 <code>computer</code> 包，里面有一个导出结构体类型 <code>Spec</code>。<code>Spec</code> 有两个导出字段 <code>Maker</code> 和 <code>Price</code>，和一个未导出的字段 <code>model</code>。接下来我们会在 main 包中导入这个包，并使用 <code>Spec</code> 结构体。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"structs/computer"</span>  <span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> spec computer<span class="token punctuation">.</span>Spec    spec<span class="token punctuation">.</span>Maker <span class="token operator">=</span> <span class="token string">"apple"</span>    spec<span class="token punctuation">.</span>Price <span class="token operator">=</span> <span class="token number">50000</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Spec:"</span><span class="token punctuation">,</span> spec<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>包结构如下所示：  </p><pre class="line-numbers language-none"><code class="language-none">src     structs        computer            spec.go        main.go<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述程序的第 3 行，我们导入了 <code>computer</code> 包。在第 8 行和第 9 行，我们访问了结构体 <code>Spec</code> 的两个导出字段 <code>Maker</code> 和 <code>Price</code>。执行命令 <code>go install structs</code> 和 <code>workspacepath/bin/structs</code>，运行该程序。  </p><p>如果我们试图访问未导出的字段 <code>model</code>，编译器会报错。将 <code>main.go</code> 的内容替换为下面的代码。  </p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"structs/computer"</span>  <span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> spec computer<span class="token punctuation">.</span>Spec    spec<span class="token punctuation">.</span>Maker <span class="token operator">=</span> <span class="token string">"apple"</span>    spec<span class="token punctuation">.</span>Price <span class="token operator">=</span> <span class="token number">50000</span>    spec<span class="token punctuation">.</span>model <span class="token operator">=</span> <span class="token string">"Mac Mini"</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Spec:"</span><span class="token punctuation">,</span> spec<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面程序的第 10 行，我们试图访问未导出的字段 <code>model</code>。如果运行这个程序，编译器会产生错误：**spec.model undefined (cannot refer to unexported field or method model)**。  </p><h3 id="结构体相等性（Structs-Equality）"><a href="#结构体相等性（Structs-Equality）" class="headerlink" title="结构体相等性（Structs Equality）"></a>结构体相等性（Structs Equality）</h3><p><strong>结构体是值类型。如果它的每一个字段都是可比较的，则该结构体也是可比较的。如果两个结构体变量的对应字段相等，则这两个变量也是相等的</strong>。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">type</span> name <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>      firstName <span class="token builtin">string</span>    lastName <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      name1 <span class="token operator">:=</span> name<span class="token punctuation">&#123;</span><span class="token string">"Steve"</span><span class="token punctuation">,</span> <span class="token string">"Jobs"</span><span class="token punctuation">&#125;</span>    name2 <span class="token operator">:=</span> name<span class="token punctuation">&#123;</span><span class="token string">"Steve"</span><span class="token punctuation">,</span> <span class="token string">"Jobs"</span><span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> name1 <span class="token operator">==</span> name2 <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"name1 and name2 are equal"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"name1 and name2 are not equal"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    name3 <span class="token operator">:=</span> name<span class="token punctuation">&#123;</span>firstName<span class="token punctuation">:</span><span class="token string">"Steve"</span><span class="token punctuation">,</span> lastName<span class="token punctuation">:</span><span class="token string">"Jobs"</span><span class="token punctuation">&#125;</span>    name4 <span class="token operator">:=</span> name<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    name4<span class="token punctuation">.</span>firstName <span class="token operator">=</span> <span class="token string">"Steve"</span>    <span class="token keyword">if</span> name3 <span class="token operator">==</span> name4 <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"name3 and name4 are equal"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"name3 and name4 are not equal"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的代码中，结构体类型 <code>name</code> 包含两个 <code>string</code> 类型。由于字符串是可比较的，因此可以比较两个 <code>name</code> 类型的结构体变量。  </p><p>上面代码中 <code>name1</code> 和 <code>name2</code> 相等，而 <code>name3</code> 和 <code>name4</code> 不相等。该程序会输出：  </p><pre class="line-numbers language-none"><code class="language-none">name1 and name2 are equal  name3 and name4 are not equal<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>如果结构体包含不可比较的字段，则结构体变量也不可比较。</strong>  </p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">type</span> image <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>      data <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      image1 <span class="token operator">:=</span> image<span class="token punctuation">&#123;</span>data<span class="token punctuation">:</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span>        <span class="token number">0</span><span class="token punctuation">:</span> <span class="token number">155</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    image2 <span class="token operator">:=</span> image<span class="token punctuation">&#123;</span>data<span class="token punctuation">:</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span>        <span class="token number">0</span><span class="token punctuation">:</span> <span class="token number">155</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> image1 <span class="token operator">==</span> image2 <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"image1 and image2 are equal"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面代码中，结构体类型 <code>image</code> 包含一个 <code>map</code> 类型的字段。由于 <code>map</code> 类型是不可比较的，因此 <code>image1</code> 和 <code>image2</code> 也不可比较。如果运行该程序，编译器会报错：**main.go:18: invalid operation: image1 == image2 (struct containing map[int]int cannot be compared)**。  </p>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>golang目录</title>
      <link href="2019/06/18/golang/00.golang-mu-lu/"/>
      <url>2019/06/18/golang/00.golang-mu-lu/</url>
      
        <content type="html"><![CDATA[<ol><li><p><a href="https://www.kongpan.xyz/2019/06/17/go%E8%AF%AD%E8%A8%80/1.%20%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%AE%89%E8%A3%85/">介绍与安装</a></p></li><li><p><a href="https://www.kongpan.xyz/2019/06/17/go%E8%AF%AD%E8%A8%80/2.%20Hello%20World/">hello world</a></p></li><li><p><a href="https://www.kongpan.xyz/2019/06/17/go%E8%AF%AD%E8%A8%80/3.%20%E5%8F%98%E9%87%8F/">变量</a></p></li><li><p><a href="https://www.kongpan.xyz/2019/06/17/go%E8%AF%AD%E8%A8%80/4.%20%E7%B1%BB%E5%9E%8B/">类型</a></p></li><li><p><a href="https://www.kongpan.xyz/2019/06/17/go%E8%AF%AD%E8%A8%80/5.%20%E5%B8%B8%E9%87%8F/">常量</a></p></li><li><p><a href="https://www.kongpan.xyz/2019/06/17/go%E8%AF%AD%E8%A8%80/6.%20%E5%87%BD%E6%95%B0%EF%BC%88Function%EF%BC%89/">函数</a></p></li><li><p><a href="https://www.kongpan.xyz/2019/06/17/go%E8%AF%AD%E8%A8%80/7.%20%E5%8C%85/">包</a></p></li><li><p><a href="https://www.kongpan.xyz/2019/06/17/go%E8%AF%AD%E8%A8%80/8.%20if-else%20%E8%AF%AD%E5%8F%A5/">if-else语句</a></p></li><li><p><a href="https://www.kongpan.xyz/2019/06/17/go%E8%AF%AD%E8%A8%80/9.%20%E5%BE%AA%E7%8E%AF/">循环</a></p></li><li><p><a href="https://www.kongpan.xyz/2019/06/17/go%E8%AF%AD%E8%A8%80/9.%20%E5%BE%AA%E7%8E%AF/">switch语句</a></p></li><li><p><a href="https://www.kongpan.xyz/2019/06/17/go%E8%AF%AD%E8%A8%80/10.%20switch%20%E8%AF%AD%E5%8F%A5/">数组和切片</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指针</title>
      <link href="2019/06/18/golang/15.zhi-zhen/"/>
      <url>2019/06/18/golang/15.zhi-zhen/</url>
      
        <content type="html"><![CDATA[<h1 id="15-指针"><a href="#15-指针" class="headerlink" title="15. 指针"></a>15. 指针</h1><h3 id="什么是指针？"><a href="#什么是指针？" class="headerlink" title="什么是指针？"></a>什么是指针？</h3><p>指针是一种存储变量内存地址（Memory Address）的变量。</p><p><img src="https://file.moetu.org/images/2019/06/18/image-20190209154549871a36f5ae22fe01461.png" alt="image-20190209154549871a36f5ae22fe01461.png"></p><p>如上图所示，变量 <code>b</code> 的值为 <code>156</code>，而 <code>b</code> 的内存地址为 <code>0x1040a124</code>。变量 <code>a</code> 存储了 <code>b</code> 的地址。我们就称 <code>a</code> 指向了 <code>b</code>。</p><h3 id="指针的声明"><a href="#指针的声明" class="headerlink" title="指针的声明"></a>指针的声明</h3><p>指针变量的类型为 *<strong>T</strong>，该指针指向一个 <strong>T</strong> 类型的变量。</p><p>接下来我们写点代码。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    b <span class="token operator">:=</span> <span class="token number">255</span>    <span class="token keyword">var</span> a <span class="token operator">*</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>b    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Type of a is %T\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"address of b is"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>&amp;</strong> 操作符用于获取变量的地址。上面程序的第 9 行我们把 <code>b</code> 的地址赋值给 <strong>int</strong> 类型的 <code>a</code>。我们称 <code>a</code> 指向了 <code>b</code>。当我们打印 <code>a</code> 的值时，会打印出 <code>b</code> 的地址。程序将输出：</p><pre class="line-numbers language-none"><code class="language-none">Type of a is *int  address of b is 0x1040a124<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>由于 b 可能处于内存的任何位置，你应该会得到一个不同的地址。</p><h3 id="指针的零值（Zero-Value）"><a href="#指针的零值（Zero-Value）" class="headerlink" title="指针的零值（Zero Value）"></a>指针的零值（Zero Value）</h3><p>指针的零值是 <code>nil</code>。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      a <span class="token operator">:=</span> <span class="token number">25</span>    <span class="token keyword">var</span> b <span class="token operator">*</span><span class="token builtin">int</span>    <span class="token keyword">if</span> b <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"b is"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span>        b <span class="token operator">=</span> <span class="token operator">&amp;</span>a        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"b after initialization is"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的程序中，<code>b</code> 初始化为 <code>nil</code>，接着将 <code>a</code> 的地址赋值给 <code>b</code>。程序会输出：</p><pre class="line-numbers language-none"><code class="language-none">b is &lt;nil&gt;  b after initialisation is 0x1040a124<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="指针的解引用"><a href="#指针的解引用" class="headerlink" title="指针的解引用"></a>指针的解引用</h3><p>指针的解引用可以获取指针所指向的变量的值。将 <code>a</code> 解引用的语法是 <code>*a</code>。</p><p>通过下面的代码，可以看到如何使用解引用。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main  <span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      b <span class="token operator">:=</span> <span class="token number">255</span>    a <span class="token operator">:=</span> <span class="token operator">&amp;</span>b    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"address of b is"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"value of b is"</span><span class="token punctuation">,</span> <span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面程序的第 10 行，我们将 <code>a</code> 解引用，并打印了它的值。不出所料，我们会打印出 <code>b</code> 的值。程序会输出：</p><pre class="line-numbers language-none"><code class="language-none">address of b is 0x1040a124  value of b is 255<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>我们再编写一个程序，用指针来修改 b 的值。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      b <span class="token operator">:=</span> <span class="token number">255</span>    a <span class="token operator">:=</span> <span class="token operator">&amp;</span>b    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"address of b is"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"value of b is"</span><span class="token punctuation">,</span> <span class="token operator">*</span>a<span class="token punctuation">)</span>    <span class="token operator">*</span>a<span class="token operator">++</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"new value of b is"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面程序的第 12 行中，我们把 <code>a</code> 指向的值加 1，由于 <code>a</code> 指向了 <code>b</code>，因此 <code>b</code> 的值也发生了同样的改变。于是 <code>b</code> 的值变为 256。程序会输出：</p><pre class="line-numbers language-none"><code class="language-none">address of b is 0x1040a124  value of b is 255  new value of b is 256<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="向函数传递指针参数"><a href="#向函数传递指针参数" class="headerlink" title="向函数传递指针参数"></a>向函数传递指针参数</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">change</span><span class="token punctuation">(</span>val <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token operator">*</span>val <span class="token operator">=</span> <span class="token number">55</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      a <span class="token operator">:=</span> <span class="token number">58</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"value of a before function call is"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span>    b <span class="token operator">:=</span> <span class="token operator">&amp;</span>a    <span class="token function">change</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"value of a after function call is"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面程序中的第 14 行，我们向函数 <code>change</code> 传递了指针变量 <code>b</code>，而 <code>b</code> 存储了 <code>a</code> 的地址。程序的第 8 行在 <code>change</code> 函数内使用解引用，修改了 a 的值。该程序会输出：</p><pre class="line-numbers language-none"><code class="language-none">value of a before function call is 58  value of a after function call is 55<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="不要向函数传递数组的指针，而应该使用切片"><a href="#不要向函数传递数组的指针，而应该使用切片" class="headerlink" title="不要向函数传递数组的指针，而应该使用切片"></a>不要向函数传递数组的指针，而应该使用切片</h3><p>假如我们想要在函数内修改一个数组，并希望调用函数的地方也能得到修改后的数组，一种解决方案是把一个指向数组的指针传递给这个函数。 </p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">modify</span><span class="token punctuation">(</span>arr <span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token punctuation">(</span><span class="token operator">*</span>arr<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">90</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      a <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">91</span><span class="token punctuation">&#125;</span>    <span class="token function">modify</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面程序的第 13 行中，我们将数组的地址传递给了 <code>modify</code> 函数。在第 8 行，我们在 <code>modify</code> 函数里把 <code>arr</code> 解引用，并将 <code>90</code> 赋值给这个数组的第一个元素。程序会输出 <code>[90 90 91]</code>。</p><p>*<em>a[x] 是 (\</em>a)[x] 的简写形式，因此上面代码中的 (*arr)[0] 可以替换为 arr[0]**。下面我们用简写形式重写以上代码。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">modify</span><span class="token punctuation">(</span>arr <span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">90</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      a <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">91</span><span class="token punctuation">&#125;</span>    <span class="token function">modify</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该程序也会输出 <code>[90 90 91]</code>。</p><p><strong>这种方式向函数传递一个数组指针参数，并在函数内修改数组。尽管它是有效的，但却不是 Go 语言惯用的实现方式。我们最好使用切片来处理。</strong></p><p>接下来我们用[切片]来重写之前的代码。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">modify</span><span class="token punctuation">(</span>sls <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      sls<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">90</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      a <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">91</span><span class="token punctuation">&#125;</span>    <span class="token function">modify</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面程序的第 13 行，我们将一个切片传递给了 <code>modify</code> 函数。在 <code>modify</code> 函数中，我们把切片的第一个元素修改为 <code>90</code>。程序也会输出 <code>[90 90 91]</code>。<strong>所以别再传递数组指针了，而是使用切片吧</strong>。上面的代码更加简洁，也更符合 Go 语言的习惯。</p><h3 id="Go-不支持指针运算"><a href="#Go-不支持指针运算" class="headerlink" title="Go 不支持指针运算"></a>Go 不支持指针运算</h3><p>Go 并不支持其他语言（例如 C）中的指针运算。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      b <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">109</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">&#125;</span>    p <span class="token operator">:=</span> <span class="token operator">&amp;</span>b    p<span class="token operator">++</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的程序会抛出编译错误：*<em>main.go:6: invalid operation: p++ (non-numeric type \</em>[3]int)**。</p>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串</title>
      <link href="2019/06/18/golang/14.zi-fu-chuan/"/>
      <url>2019/06/18/golang/14.zi-fu-chuan/</url>
      
        <content type="html"><![CDATA[<h1 id="14-字符串"><a href="#14-字符串" class="headerlink" title="14. 字符串"></a>14. 字符串</h1><h2 id="什么是字符串？"><a href="#什么是字符串？" class="headerlink" title="什么是字符串？"></a>什么是字符串？</h2><p>Go 语言中的字符串是一个字节切片。把内容放在双引号””之间，我们可以创建一个字符串。让我们来看一个创建并打印字符串的简单示例。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    name <span class="token operator">:=</span> <span class="token string">"Hello World"</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的程序将会输出 <code>Hello World</code>。</p><p>Go 中的字符串是兼容 Unicode 编码的，并且使用 UTF-8 进行编码。</p><h2 id="单独获取字符串的每一个字节"><a href="#单独获取字符串的每一个字节" class="headerlink" title="单独获取字符串的每一个字节"></a>单独获取字符串的每一个字节</h2><p>由于字符串是一个字节切片，所以我们可以获取字符串的每一个字节。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">printBytes</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> i<span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%x "</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    name <span class="token operator">:=</span> <span class="token string">"Hello World"</span>    <span class="token function">printBytes</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面程序的第 8 行，<strong>len(s) 返回字符串中字节的数量</strong>，然后我们用了一个 for 循环以 16 进制的形式打印这些字节。<code>%x</code> 格式限定符用于指定 16 进制编码。上面的程序输出 <code>48 65 6c 6c 6f 20 57 6f 72 6c 64</code>。这些打印出来的字符是 “Hello World” 以 [Unicode UTF-8 编码]的结果。为了更好的理解 go 中的字符串，需要对 Unicode 和 UTF-8 有基础的理解。我推荐阅读一下 <a href="https://naveenr.net/unicode-character-set-and-utf-8-utf-16-utf-32-encoding/">https://naveenr.net/unicode-character-set-and-utf-8-utf-16-utf-32-encoding/</a> 来理解一下什么是 Unicode 和 UTF-8。</p><p>让我们稍微修改一下上面的程序，让它打印字符串的每一个字符。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">printBytes</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> i<span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%x "</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">printChars</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> i<span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    name <span class="token operator">:=</span> <span class="token string">"Hello World"</span>    <span class="token function">printBytes</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>    <span class="token function">printChars</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>printChars</code> 方法(第 16 行中)中，<code>%c</code> 格式限定符用于打印字符串的字符。这个程序输出结果是：</p><pre class="line-numbers language-none"><code class="language-none">48 65 6c 6c 6f 20 57 6f 72 6c 64  H e l l o   W o r l d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>上面的程序获取字符串的每一个字符，虽然看起来是合法的，但却有一个严重的 bug。让我拆解这个代码来看看我们做错了什么。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">printBytes</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> i<span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%x "</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">printChars</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> i<span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    name <span class="token operator">:=</span> <span class="token string">"Hello World"</span>    <span class="token function">printBytes</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>    <span class="token function">printChars</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> <span class="token string">"Señor"</span>    <span class="token function">printBytes</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>    <span class="token function">printChars</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码输出的结果是：</p><pre class="line-numbers language-none"><code class="language-none">48 65 6c 6c 6f 20 57 6f 72 6c 64  H e l l o   W o r l d  53 65 c3 b1 6f 72  S e Ã ± o r<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在上面程序的第 28 行，我们尝试输出 <strong>Señor</strong> 的字符，但却输出了错误的 <strong>S e Ã ± o r</strong>。 为什么程序分割 <code>Hello World</code> 时表现完美，但分割 <code>Señor</code> 就出现了错误呢？这是因为 <code>ñ</code> 的 Unicode 代码点（Code Point）是 <code>U+00F1</code>。它的 [UTF-8 编码]占用了  c3 和 b1 两个字节。它的 UTF-8 编码占用了两个字节 c3 和  b1。而我们打印字符时，却假定每个字符的编码只会占用一个字节，这是错误的。在 UTF-8  编码中，一个代码点可能会占用超过一个字节的空间。那么我们该怎么办呢？rune 能帮我们解决这个难题。</p><h2 id="rune"><a href="#rune" class="headerlink" title="rune"></a>rune</h2><p>rune 是 Go 语言的内建类型，它也是 int32 的别称。在 Go 语言中，rune 表示一个代码点。代码点无论占用多少个字节，都可以用一个 rune 来表示。让我们修改一下上面的程序，用 rune 来打印字符。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">printBytes</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> i<span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%x "</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">printChars</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    runes <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">rune</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>    <span class="token keyword">for</span> i<span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>runes<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span>runes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    name <span class="token operator">:=</span> <span class="token string">"Hello World"</span>    <span class="token function">printBytes</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>    <span class="token function">printChars</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"\n\n"</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> <span class="token string">"Señor"</span>    <span class="token function">printBytes</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>    <span class="token function">printChars</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面代码的第 14 行，字符串被转化为一个 rune 切片。然后我们循环打印字符。程序的输出结果是</p><pre class="line-numbers language-none"><code class="language-none">48 65 6c 6c 6f 20 57 6f 72 6c 64  H e l l o   W o r l d 53 65 c3 b1 6f 72  S e ñ o r<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的输出结果非常完美，就是我们想要的结果:)。</p><h2 id="字符串的-for-range-循环"><a href="#字符串的-for-range-循环" class="headerlink" title="字符串的 for range 循环"></a>字符串的 for range 循环</h2><p>上面的程序是一种遍历字符串的好方法，但是 Go 给我们提供了一种更简单的方法来做到这一点：使用 <strong>for range</strong> 循环。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">printCharsAndBytes</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> index<span class="token punctuation">,</span> <span class="token builtin">rune</span> <span class="token operator">:=</span> <span class="token keyword">range</span> s <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%c starts at byte %d\n"</span><span class="token punctuation">,</span> <span class="token builtin">rune</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    name <span class="token operator">:=</span> <span class="token string">"Señor"</span>    <span class="token function">printCharsAndBytes</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面程序中的第8行，使用 <code>for range</code> 循环遍历了字符串。循环返回的是是当前 rune 的字节位置。程序的输出结果为：</p><pre class="line-numbers language-none"><code class="language-none">S starts at byte 0  e starts at byte 1  ñ starts at byte 2o starts at byte 4  r starts at byte 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上面的输出中可以清晰的看到 <code>ñ</code> 占了两个字节:)。</p><h2 id="用字节切片构造字符串"><a href="#用字节切片构造字符串" class="headerlink" title="用字节切片构造字符串"></a>用字节切片构造字符串</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      byteSlice <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">&#123;</span><span class="token number">0x43</span><span class="token punctuation">,</span> <span class="token number">0x61</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0xC3</span><span class="token punctuation">,</span> <span class="token number">0xA9</span><span class="token punctuation">&#125;</span>    str <span class="token operator">:=</span> <span class="token function">string</span><span class="token punctuation">(</span>byteSlice<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的程序中 <code>byteSlice</code> 包含字符串 <code>Café</code> 用 UTF-8 编码后的 16 进制字节。程序输出结果是 <code>Café</code>。</p><p>如果我们把 16 进制换成对应的 10 进制值会怎么样呢？上面的程序还能工作吗？让我们来试一试：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      byteSlice <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">&#123;</span><span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">102</span><span class="token punctuation">,</span> <span class="token number">195</span><span class="token punctuation">,</span> <span class="token number">169</span><span class="token punctuation">&#125;</span><span class="token comment">//decimal equivalent of &#123;'\x43', '\x61', '\x66', '\xC3', '\xA9'&#125;</span>    str <span class="token operator">:=</span> <span class="token function">string</span><span class="token punctuation">(</span>byteSlice<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面程序的输出结果也是<code>Café</code></p><h2 id="用-rune-切片构造字符串"><a href="#用-rune-切片构造字符串" class="headerlink" title="用 rune 切片构造字符串"></a>用 rune 切片构造字符串</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      runeSlice <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">rune</span><span class="token punctuation">&#123;</span><span class="token number">0x0053</span><span class="token punctuation">,</span> <span class="token number">0x0065</span><span class="token punctuation">,</span> <span class="token number">0x00f1</span><span class="token punctuation">,</span> <span class="token number">0x006f</span><span class="token punctuation">,</span> <span class="token number">0x0072</span><span class="token punctuation">&#125;</span>    str <span class="token operator">:=</span> <span class="token function">string</span><span class="token punctuation">(</span>runeSlice<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的程序中 <code>runeSlice</code> 包含字符串 <code>Señor</code>的 16 进制的 Unicode 代码点。这个程序将会输出<code>Señor</code>。</p><h2 id="字符串的长度"><a href="#字符串的长度" class="headerlink" title="字符串的长度"></a>字符串的长度</h2><p>[utf8 package] 包中的 <code>func RuneCountInString(s string) (n int)</code> 方法用来获取字符串的长度。这个方法传入一个字符串参数然后返回字符串中的 rune 的数量。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span>    <span class="token string">"unicode/utf8"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">length</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"length of %s is %d\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> utf8<span class="token punctuation">.</span><span class="token function">RuneCountInString</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     word1 <span class="token operator">:=</span> <span class="token string">"Señor"</span>     <span class="token function">length</span><span class="token punctuation">(</span>word1<span class="token punctuation">)</span>    word2 <span class="token operator">:=</span> <span class="token string">"Pets"</span>    <span class="token function">length</span><span class="token punctuation">(</span>word2<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面程序的输出结果是：</p><pre class="line-numbers language-none"><code class="language-none">length of Señor is 5  length of Pets is 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="字符串是不可变的"><a href="#字符串是不可变的" class="headerlink" title="字符串是不可变的"></a>字符串是不可变的</h2><p>Go 中的字符串是不可变的。一旦一个字符串被创建，那么它将无法被修改。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">mutate</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token builtin">string</span> <span class="token punctuation">&#123;</span>      s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'a'</span><span class="token comment">//any valid unicode character within single quote is a rune </span>    <span class="token keyword">return</span> s<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      h <span class="token operator">:=</span> <span class="token string">"hello"</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">mutate</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面程序中的第 8 行，我们试图把这个字符串中的第一个字符修改为 ‘a’。由于字符串是不可变的，因此这个操作是非法的。所以程序抛出了一个错误 **main.go:8: cannot assign to s[0]**。</p><p>为了修改字符串，可以把字符串转化为一个 rune 切片。然后这个切片可以进行任何想要的改变，然后再转化为一个字符串。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">mutate</span><span class="token punctuation">(</span>s <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">rune</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>      s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'a'</span>     <span class="token keyword">return</span> <span class="token function">string</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      h <span class="token operator">:=</span> <span class="token string">"hello"</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">mutate</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">rune</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面程序的第 7 行，<code>mutate</code> 函数接收一个 rune 切片参数，它将切片的第一个元素修改为 <code>&#39;a&#39;</code>，然后将 rune 切片转化为字符串，并返回该字符串。程序的第 13 行调用了该函数。我们把 <code>h</code> 转化为一个 rune 切片，并传递给了 <code>mutate</code>。这个程序输出 <code>aello</code>。</p>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maps</title>
      <link href="2019/06/18/golang/13.maps/"/>
      <url>2019/06/18/golang/13.maps/</url>
      
        <content type="html"><![CDATA[<h1 id="13-Maps"><a href="#13-Maps" class="headerlink" title="13. Maps"></a>13. Maps</h1><h2 id="什么是-map-？"><a href="#什么是-map-？" class="headerlink" title="什么是 map ？"></a>什么是 map ？</h2><p>map 是在 Go 中将值（value）与键（key）关联的内置类型。通过相应的键可以获取到值。</p><h2 id="如何创建-map-？"><a href="#如何创建-map-？" class="headerlink" title="如何创建 map ？"></a>如何创建 map ？</h2><p>通过向 <code>make</code> 函数传入键和值的类型，可以创建 map。<code>make(map[type of key]type of value)</code> 是创建 map 的语法。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">personSalary <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面的代码创建了一个名为 <code>personSalary</code> 的 map，其中键是 string 类型，而值是 int 类型。</p><p>map 的零值是 <code>nil</code>。如果你想添加元素到 nil map 中，会触发运行时 panic。因此 map 必须使用 <code>make</code> 函数初始化。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> personSalary <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span>    <span class="token keyword">if</span> personSalary <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"map is nil. Going to make one."</span><span class="token punctuation">)</span>        personSalary <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的程序中，personSalary 是 nil，因此需要使用 make 方法初始化，程序将输出 <code>map is nil. Going to make one.</code>。</p><h2 id="给-map-添加元素"><a href="#给-map-添加元素" class="headerlink" title="给 map 添加元素"></a>给 map 添加元素</h2><p>给 map 添加新元素的语法和数组相同。下面的程序给 <code>personSalary</code> map 添加了几个新元素。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    personSalary <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>    personSalary<span class="token punctuation">[</span><span class="token string">"steve"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">12000</span>    personSalary<span class="token punctuation">[</span><span class="token string">"jamie"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">15000</span>    personSalary<span class="token punctuation">[</span><span class="token string">"mike"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9000</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"personSalary map contents:"</span><span class="token punctuation">,</span> personSalary<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的程序输出：<code>personSalary map contents: map[steve:12000 jamie:15000 mike:9000]</code></p><p>你也可以在声明的时候初始化 map。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      personSalary <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">&#123;</span>        <span class="token string">"steve"</span><span class="token punctuation">:</span> <span class="token number">12000</span><span class="token punctuation">,</span>        <span class="token string">"jamie"</span><span class="token punctuation">:</span> <span class="token number">15000</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    personSalary<span class="token punctuation">[</span><span class="token string">"mike"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9000</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"personSalary map contents:"</span><span class="token punctuation">,</span> personSalary<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的程序声明了 personSalary，并在声明的同时添加两个元素。之后又添加了键 <code>mike</code>。程序输出：</p><pre class="line-numbers language-none"><code class="language-none">personSalary map contents: map[steve:12000 jamie:15000 mike:9000]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>键不一定只能是 string 类型。所有可比较的类型，如 boolean，interger，float，complex，string 等，都可以作为键。关于可比较的类型，如果你想了解更多，请访问 <a href="http://golang.org/ref/spec#Comparison_operators">http://golang.org/ref/spec#Comparison_operators</a>。</p><h2 id="获取-map-中的元素"><a href="#获取-map-中的元素" class="headerlink" title="获取 map 中的元素"></a>获取 map 中的元素</h2><p>目前我们已经给 map 添加了几个元素，现在学习下如何获取它们。获取 map 元素的语法是 <code>map[key]</code> 。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    personSalary <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span>        <span class="token string">"steve"</span><span class="token punctuation">:</span> <span class="token number">12000</span><span class="token punctuation">,</span>        <span class="token string">"jamie"</span><span class="token punctuation">:</span> <span class="token number">15000</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    personSalary<span class="token punctuation">[</span><span class="token string">"mike"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9000</span>    employee <span class="token operator">:=</span> <span class="token string">"jamie"</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Salary of"</span><span class="token punctuation">,</span> employee<span class="token punctuation">,</span> <span class="token string">"is"</span><span class="token punctuation">,</span> personSalary<span class="token punctuation">[</span>employee<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的程序很简单。获取并打印员工 <code>jamie</code> 的薪资。程序输出 <code>Salary of jamie is 15000</code>。</p><p>如果获取一个不存在的元素，会发生什么呢？map 会返回该元素类型的零值。在 <code>personSalary</code> 这个 map 里，如果我们获取一个不存在的元素，会返回 <code>int</code> 类型的零值 <code>0</code>。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    personSalary <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span>        <span class="token string">"steve"</span><span class="token punctuation">:</span> <span class="token number">12000</span><span class="token punctuation">,</span>        <span class="token string">"jamie"</span><span class="token punctuation">:</span> <span class="token number">15000</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    personSalary<span class="token punctuation">[</span><span class="token string">"mike"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9000</span>    employee <span class="token operator">:=</span> <span class="token string">"jamie"</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Salary of"</span><span class="token punctuation">,</span> employee<span class="token punctuation">,</span> <span class="token string">"is"</span><span class="token punctuation">,</span> personSalary<span class="token punctuation">[</span>employee<span class="token punctuation">]</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Salary of joe is"</span><span class="token punctuation">,</span> personSalary<span class="token punctuation">[</span><span class="token string">"joe"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面程序输出：</p><pre class="line-numbers language-none"><code class="language-none">Salary of jamie is 15000Salary of joe is 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>上面程序返回 <code>joe</code> 的薪资是 0。<code>personSalary</code> 中不包含 <code>joe</code> 的情况下我们不会获取到任何运行时错误。</p><p>如果我们想知道 map 中到底是不是存在这个 <code>key</code>，该怎么做：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">value<span class="token punctuation">,</span> ok <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面就是获取 map 中某个 key 是否存在的语法。如果 <code>ok</code> 是 true，表示 key 存在，key 对应的值就是 <code>value</code> ，反之表示 key 不存在。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    personSalary <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span>        <span class="token string">"steve"</span><span class="token punctuation">:</span> <span class="token number">12000</span><span class="token punctuation">,</span>        <span class="token string">"jamie"</span><span class="token punctuation">:</span> <span class="token number">15000</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    personSalary<span class="token punctuation">[</span><span class="token string">"mike"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9000</span>    newEmp <span class="token operator">:=</span> <span class="token string">"joe"</span>    value<span class="token punctuation">,</span> ok <span class="token operator">:=</span> personSalary<span class="token punctuation">[</span>newEmp<span class="token punctuation">]</span>    <span class="token keyword">if</span> ok <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Salary of"</span><span class="token punctuation">,</span> newEmp<span class="token punctuation">,</span> <span class="token string">"is"</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>newEmp<span class="token punctuation">,</span><span class="token string">"not found"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的程序中，第 15 行，<code>joe</code> 不存在，所以 <code>ok</code> 是 false。程序将输出：</p><pre class="line-numbers language-none"><code class="language-none">joe not found<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>遍历 map 中所有的元素需要用 <code>for range</code> 循环。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    personSalary <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span>        <span class="token string">"steve"</span><span class="token punctuation">:</span> <span class="token number">12000</span><span class="token punctuation">,</span>        <span class="token string">"jamie"</span><span class="token punctuation">:</span> <span class="token number">15000</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    personSalary<span class="token punctuation">[</span><span class="token string">"mike"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9000</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"All items of a map"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token operator">:=</span> <span class="token keyword">range</span> personSalary <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"personSalary[%s] = %d\n"</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面程序输出：</p><pre class="line-numbers language-none"><code class="language-none">All items of a mappersonSalary[mike] &#x3D; 9000personSalary[steve] &#x3D; 12000personSalary[jamie] &#x3D; 15000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>有一点很重要，当使用 for range 遍历 map 时，不保证每次执行程序获取的元素顺序相同。</strong></p><h2 id="删除-map-中的元素"><a href="#删除-map-中的元素" class="headerlink" title="删除 map 中的元素"></a>删除 map 中的元素</h2><p>删除 <code>map</code> 中 <code>key</code> 的语法是 [<em>delete(map, key)</em>]。这个函数没有返回值。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      personSalary <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span>        <span class="token string">"steve"</span><span class="token punctuation">:</span> <span class="token number">12000</span><span class="token punctuation">,</span>        <span class="token string">"jamie"</span><span class="token punctuation">:</span> <span class="token number">15000</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    personSalary<span class="token punctuation">[</span><span class="token string">"mike"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9000</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"map before deletion"</span><span class="token punctuation">,</span> personSalary<span class="token punctuation">)</span>    <span class="token function">delete</span><span class="token punctuation">(</span>personSalary<span class="token punctuation">,</span> <span class="token string">"steve"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"map after deletion"</span><span class="token punctuation">,</span> personSalary<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述程序删除了键 “steve”，输出：</p><pre class="line-numbers language-none"><code class="language-none">map before deletion map[steve:12000 jamie:15000 mike:9000]map after deletion map[mike:9000 jamie:15000]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="获取-map-的长度"><a href="#获取-map-的长度" class="headerlink" title="获取 map 的长度"></a>获取 map 的长度</h2><p>获取 map 的长度使用 [len]函数。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    personSalary <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span>        <span class="token string">"steve"</span><span class="token punctuation">:</span> <span class="token number">12000</span><span class="token punctuation">,</span>        <span class="token string">"jamie"</span><span class="token punctuation">:</span> <span class="token number">15000</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    personSalary<span class="token punctuation">[</span><span class="token string">"mike"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9000</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"length is"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>personSalary<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述程序中的 <em>len(personSalary)</em> 函数获取了 map 的长度。程序输出 <code>length is 3</code>。</p><h2 id="Map-是引用类型"><a href="#Map-是引用类型" class="headerlink" title="Map 是引用类型"></a>Map 是引用类型</h2><p>和 [slices]类似，map 也是引用类型。当 map 被赋值为一个新变量的时候，它们指向同一个内部数据结构。因此，改变其中一个变量，就会影响到另一变量。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    personSalary <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span>        <span class="token string">"steve"</span><span class="token punctuation">:</span> <span class="token number">12000</span><span class="token punctuation">,</span>        <span class="token string">"jamie"</span><span class="token punctuation">:</span> <span class="token number">15000</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    personSalary<span class="token punctuation">[</span><span class="token string">"mike"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9000</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Original person salary"</span><span class="token punctuation">,</span> personSalary<span class="token punctuation">)</span>    newPersonSalary <span class="token operator">:=</span> personSalary    newPersonSalary<span class="token punctuation">[</span><span class="token string">"mike"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">18000</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Person salary changed"</span><span class="token punctuation">,</span> personSalary<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面程序中的第 14 行，<code>personSalary</code> 被赋值给 <code>newPersonSalary</code>。下一行 ，<code>newPersonSalary</code> 中 <code>mike</code> 的薪资变成了 <code>18000</code> 。<code>personSalary</code> 中 <code>Mike</code> 的薪资也会变成 <code>18000</code>。程序输出：</p><pre class="line-numbers language-none"><code class="language-none">Original person salary map[steve:12000 jamie:15000 mike:9000]Person salary changed map[steve:12000 jamie:15000 mike:18000]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当 map 作为函数参数传递时也会发生同样的情况。函数中对 map 的任何修改，对于外部的调用都是可见的。</p><h2 id="Map-的相等性"><a href="#Map-的相等性" class="headerlink" title="Map 的相等性"></a>Map 的相等性</h2><p>map 之间不能使用 <code>==</code> 操作符判断，<code>==</code> 只能用来检查 map 是否为 <code>nil</code>。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    map1 <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span>        <span class="token string">"one"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token string">"two"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    map2 <span class="token operator">:=</span> map1    <span class="token keyword">if</span> map1 <span class="token operator">==</span> map2 <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面程序抛出编译错误 **invalid operation: map1 == map2 (map can only be compared to nil)**。</p><p>判断两个 map 是否相等的方法是遍历比较两个 map 中的每个元素。我建议你写一段这样的程序实现这个功能 </p>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>可变参数函数</title>
      <link href="2019/06/18/golang/12.ke-bian-can-shu-han-shu/"/>
      <url>2019/06/18/golang/12.ke-bian-can-shu-han-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="12-可变参数函数"><a href="#12-可变参数函数" class="headerlink" title="12. 可变参数函数"></a>12. 可变参数函数</h1><h2 id="什么是可变参数函数"><a href="#什么是可变参数函数" class="headerlink" title="什么是可变参数函数"></a>什么是可变参数函数</h2><p>可变参数函数是一种参数个数可变的函数。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>如果函数最后一个参数被记作 <code>...T</code> ，这时函数可以接受任意个 <code>T</code> 类型参数作为最后一个参数。</p><p>请注意只有函数的最后一个参数才允许是可变的。</p><h2 id="通过一些例子理解可变参数函数如何工作"><a href="#通过一些例子理解可变参数函数如何工作" class="headerlink" title="通过一些例子理解可变参数函数如何工作"></a>通过一些例子理解可变参数函数如何工作</h2><p>你是否曾经想过 append 函数是如何将任意个参数值加入到切片中的。这样 append 函数可以接受不同数量的参数。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">append</span><span class="token punctuation">(</span>slice <span class="token punctuation">[</span><span class="token punctuation">]</span>Type<span class="token punctuation">,</span> elems <span class="token operator">...</span>Type<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>Type<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面是 append 函数的定义。在定义中 elems 是可变参数。这样 append 函数可以接受可变化的参数。</p><p>让我们创建一个我们自己的可变参数函数。我们将写一段简单的程序，在输入的整数列表里查找某个整数是否存在。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">find</span><span class="token punctuation">(</span>num <span class="token builtin">int</span><span class="token punctuation">,</span> nums <span class="token operator">...</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"type of nums is %T\n"</span><span class="token punctuation">,</span> nums<span class="token punctuation">)</span>    found <span class="token operator">:=</span> <span class="token boolean">false</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> nums <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> v <span class="token operator">==</span> num <span class="token punctuation">&#123;</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token string">"found at index"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token string">"in"</span><span class="token punctuation">,</span> nums<span class="token punctuation">)</span>            found <span class="token operator">=</span> <span class="token boolean">true</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token operator">!</span>found <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token string">"not found in "</span><span class="token punctuation">,</span> nums<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">find</span><span class="token punctuation">(</span><span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">)</span>    <span class="token function">find</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">109</span><span class="token punctuation">)</span>    <span class="token function">find</span><span class="token punctuation">(</span><span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">)</span>    <span class="token function">find</span><span class="token punctuation">(</span><span class="token number">87</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面程序中 <code>func find(num int, nums ...int)</code>  中的 <code>nums</code> 可接受任意数量的参数。在 find 函数中，参数 <code>nums</code> 相当于一个整型切片。 </p><p><strong>可变参数函数的工作原理是把可变参数转换为一个新的切片。以上面程序中的第 22 行为例，find 函数中的可变参数是 89，90，95 。 find 函数接受一个 int 类型的可变参数。因此这三个参数被编译器转换为一个 int 类型切片 int []int{89, 90, 95} 然后被传入 find函数。</strong></p><p>在第 10 行， <code>for</code> 循环遍历 <code>nums</code> 切片,如果 <code>num</code> 在切片中，则打印 <code>num</code> 的位置。如果 <code>num</code> 不在切片中,则打印提示未找到该数字。</p><p>上面代码的输出值如下,</p><pre class="line-numbers language-none"><code class="language-none">type of nums is []int89 found at index 0 in [89 90 95]type of nums is []int45 found at index 2 in [56 67 45 90 109]type of nums is []int78 not found in  [38 56 98]type of nums is []int87 not found in  []<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面程序的第 25 行，find 函数仅有一个参数。我们没有给可变参数 <code>nums ...int</code> 传入任何参数。这也是合法的，在这种情况下 <code>nums</code> 是一个长度和容量为 0 的 <code>nil</code> 切片。</p><h2 id="给可变参数函数传入切片"><a href="#给可变参数函数传入切片" class="headerlink" title="给可变参数函数传入切片"></a>给可变参数函数传入切片</h2><p>下面例子中，我们给可变参数函数传入一个切片，看看会发生什么。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">find</span><span class="token punctuation">(</span>num <span class="token builtin">int</span><span class="token punctuation">,</span> nums <span class="token operator">...</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"type of nums is %T\n"</span><span class="token punctuation">,</span> nums<span class="token punctuation">)</span>    found <span class="token operator">:=</span> <span class="token boolean">false</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> nums <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> v <span class="token operator">==</span> num <span class="token punctuation">&#123;</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token string">"found at index"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token string">"in"</span><span class="token punctuation">,</span> nums<span class="token punctuation">)</span>            found <span class="token operator">=</span> <span class="token boolean">true</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token operator">!</span>found <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token string">"not found in "</span><span class="token punctuation">,</span> nums<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    nums <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">&#125;</span>    <span class="token function">find</span><span class="token punctuation">(</span><span class="token number">89</span><span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在第 23 行中，我们将一个切片传给一个可变参数函数。</p><p>这种情况下无法通过编译，编译器报出错误 <code>main.go:23: cannot use nums (type []int) as type int in argument to find</code> 。</p><p>为什么无法工作呢？原因很直接，<code>find</code> 函数的说明如下，</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">find</span><span class="token punctuation">(</span>num <span class="token builtin">int</span><span class="token punctuation">,</span> nums <span class="token operator">...</span><span class="token builtin">int</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由可变参数函数的定义可知，<code>nums ...int</code> 意味它可以接受 <code>int</code> 类型的可变参数。</p><p>在上面程序的第 23 行，<code>nums</code> 作为可变参数传入 <code>find</code> 函数。前面我们知道，这些可变参数参数会被转换为 <code>int</code> 类型切片然后在传入 <code>find</code> 函数中。但是在这里 <code>nums</code> 已经是一个 int 类型切片，编译器试图在 <code>nums</code> 基础上再创建一个切片，像下面这样</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">89</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span>nums<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里之所以会失败是因为 <code>nums</code> 是一个 <code>[]int</code>类型 而不是 <code>int</code>类型。</p><p>那么有没有办法给可变参数函数传入切片参数呢？答案是肯定的。</p><p><strong>有一个可以直接将切片传入可变参数函数的语法糖，你可以在在切片后加上 … 后缀。如果这样做，切片将直接传入函数，不再创建新的切片</strong></p><p>在上面的程序中，如果你将第 23 行的 <code>find(89, nums)</code> 替换为 <code>find(89, nums...)</code> ，程序将成功编译并有如下输出</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> of nums is <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token number">89</span> found at index <span class="token number">0</span> in <span class="token punctuation">[</span><span class="token number">89</span> <span class="token number">90</span> <span class="token number">95</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>下面是完整的程序供您参考。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">find</span><span class="token punctuation">(</span>num <span class="token builtin">int</span><span class="token punctuation">,</span> nums <span class="token operator">...</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"type of nums is %T\n"</span><span class="token punctuation">,</span> nums<span class="token punctuation">)</span>    found <span class="token operator">:=</span> <span class="token boolean">false</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> nums <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> v <span class="token operator">==</span> num <span class="token punctuation">&#123;</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token string">"found at index"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token string">"in"</span><span class="token punctuation">,</span> nums<span class="token punctuation">)</span>            found <span class="token operator">=</span> <span class="token boolean">true</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token operator">!</span>found <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token string">"not found in "</span><span class="token punctuation">,</span> nums<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    nums <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">&#125;</span>    <span class="token function">find</span><span class="token punctuation">(</span><span class="token number">89</span><span class="token punctuation">,</span> nums<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="不直观的错误"><a href="#不直观的错误" class="headerlink" title="不直观的错误"></a>不直观的错误</h2><p>当你修改可变参数函数中的切片时，请确保你知道你正在做什么。</p><p>下面让我们来看一个简单的例子。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">change</span><span class="token punctuation">(</span>s <span class="token operator">...</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Go"</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    welcome <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">&#125;</span>    <span class="token function">change</span><span class="token punctuation">(</span>welcome<span class="token operator">...</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>welcome<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你认为这段代码将输出什么呢？如果你认为它输出 <code>[Go world]</code> 。恭喜你！你已经理解了可变参数函数和切片。如果你猜错了，那也不要紧，让我来解释下为什么会有这样的输出。</p><p>在第 13 行，我们使用了语法糖 <code>...</code> 并且将切片作为可变参数传入 <code>change</code> 函数。</p><p>正如前面我们所讨论的，如果使用了 <code>...</code> ，<code>welcome</code> 切片本身会作为参数直接传入，不需要再创建一个新的切片。这样参数 <code>welcome</code> 将作为参数传入 <code>change</code> 函数</p><p>在 <code>change</code> 函数中，切片的第一个元素被替换成 <code>Go</code>，这样程序产生了下面的输出值</p><pre class="line-numbers language-none"><code class="language-none">[Go world]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里还有一个例子来理解可变参数函数。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">change</span><span class="token punctuation">(</span>s <span class="token operator">...</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Go"</span>    s <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"playground"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    welcome <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">&#125;</span>    <span class="token function">change</span><span class="token punctuation">(</span>welcome<span class="token operator">...</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>welcome<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组和切片</title>
      <link href="2019/06/18/golang/11.shu-zu-he-qie-pian/"/>
      <url>2019/06/18/golang/11.shu-zu-he-qie-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="11-数组和切片"><a href="#11-数组和切片" class="headerlink" title="11. 数组和切片"></a>11. 数组和切片</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组是同一类型元素的集合。例如，整数集合 5,8,9,79,76 形成一个数组。Go 语言中不允许混合不同类型的元素，例如包含字符串和整数的数组。（译者注：当然，如果是 interface{} 类型数组，可以包含任意类型）</p><h3 id="数组的声明"><a href="#数组的声明" class="headerlink" title="数组的声明"></a>数组的声明</h3><p>一个数组的表示形式为 <code>[n]T</code>。<code>n</code> 表示数组中元素的数量，<code>T</code> 代表每个元素的类型。元素的数量 <code>n</code> 也是该类型的一部分（稍后我们将详细讨论这一点）。</p><p>可以使用不同的方式来声明数组，让我们一个一个的来看。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> a <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token comment">//int array with length 3</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>var a[3]int</strong> 声明了一个长度为 3 的整型数组。<strong>数组中的所有元素都被自动赋值为数组类型的零值。</strong> 在这种情况下，<code>a</code> 是一个整型数组，因此 <code>a</code> 的所有元素都被赋值为 <code>0</code>，即 int 型的零值。运行上述程序将 <strong>输出</strong> <code>[0 0 0]</code>。</p><p>数组的索引从 <code>0</code> 开始到 <code>length - 1</code> 结束。让我们给上面的数组赋值。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> a <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token comment">//int array with length 3</span>    a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">12</span> <span class="token comment">// array index starts at 0</span>    a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">78</span>    a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">50</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>a[0] 将值赋给数组的第一个元素。该程序将 <strong>输出</strong> <code>[12 78 50]</code>。</p><p>让我们使用 <strong>简略声明</strong> 来创建相同的数组。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    a <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">&#125;</span> <span class="token comment">// short hand declaration to create array</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的程序将会打印相同的 <strong>输出</strong> <code>[12 78 50]</code>。</p><p>在简略声明中，不需要将数组中所有的元素赋值。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    a <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">12</span><span class="token punctuation">&#125;</span>     fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述程序中的第 8 行 <code>a := [3]int&#123;12&#125;</code> 声明一个长度为 3 的数组，但只提供了一个值 <code>12</code>，剩下的 2 个元素自动赋值为 <code>0</code>。这个程序将<strong>输出</strong> <code>[12 0 0]</code>。</p><p>你甚至可以忽略声明数组的长度，并用 <code>...</code> 代替，让编译器为你自动计算长度，这在下面的程序中实现。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    a <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">&#125;</span> <span class="token comment">// ... makes the compiler determine the length</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>数组的大小是类型的一部分</strong>。因此 <code>[5]int</code> 和 <code>[25]int</code> 是不同类型。数组不能调整大小，不要担心这个限制，因为 <code>slices</code> 的存在能解决这个问题。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    a <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> b <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span>    b <span class="token operator">=</span> a <span class="token comment">// not possible since [3]int and [5]int are distinct types</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述程序的第 6 行中, 我们试图将类型 <code>[3]int</code> 的变量赋给类型为 <code>[5]int</code> 的变量，这是不允许的，因此编译器将抛出错误 main.go:6: cannot use a (type [3]int) as type [5]int in assignment。</p><h3 id="数组是值类型"><a href="#数组是值类型" class="headerlink" title="数组是值类型"></a>数组是值类型</h3><p>Go 中的数组是值类型而不是引用类型。这意味着当数组赋值给一个新的变量时，该变量会得到一个原始数组的一个副本。如果对新变量进行更改，则不会影响原始数组。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    a <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"USA"</span><span class="token punctuation">,</span> <span class="token string">"China"</span><span class="token punctuation">,</span> <span class="token string">"India"</span><span class="token punctuation">,</span> <span class="token string">"Germany"</span><span class="token punctuation">,</span> <span class="token string">"France"</span><span class="token punctuation">&#125;</span>    b <span class="token operator">:=</span> a <span class="token comment">// a copy of a is assigned to b</span>    b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Singapore"</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"a is "</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"b is "</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述程序的第 7 行，<code>a</code> 的副本被赋给 <code>b</code>。在第 8 行中，<code>b</code> 的第一个元素改为 <code>Singapore</code>。这不会在原始数组 <code>a</code> 中反映出来。该程序将 <strong>输出</strong>,</p><pre class="line-numbers language-none"><code class="language-none">a is [USA China India Germany France]  b is [Singapore China India Germany France]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>同样，当数组作为参数传递给函数时，它们是按值传递，而原始数组保持不变。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">changeLocal</span><span class="token punctuation">(</span>num <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">55</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"inside function "</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    num <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"before passing to function "</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span>    <span class="token function">changeLocal</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token comment">//num is passed by value</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"after passing to function "</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述程序的 13 行中, 数组 <code>num</code> 实际上是通过值传递给函数 <code>changeLocal</code>，数组不会因为函数调用而改变。这个程序将输出</p><pre class="line-numbers language-none"><code class="language-none">before passing to function  [5 6 7 8 8]inside function  [55 6 7 8 8]after passing to function  [5 6 7 8 8]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="数组的长度"><a href="#数组的长度" class="headerlink" title="数组的长度"></a>数组的长度</h3><p>通过将数组作为参数传递给 <code>len</code> 函数，可以得到数组的长度。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    a <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">float64</span><span class="token punctuation">&#123;</span><span class="token number">67.7</span><span class="token punctuation">,</span> <span class="token number">89.8</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"length of a is"</span><span class="token punctuation">,</span><span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的程序输出为 <code>length of a is 4</code>。</p><h3 id="使用-range-迭代数组"><a href="#使用-range-迭代数组" class="headerlink" title="使用 range 迭代数组"></a>使用 range 迭代数组</h3><p><code>for</code> 循环可用于遍历数组中的元素。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    a <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">float64</span><span class="token punctuation">&#123;</span><span class="token number">67.7</span><span class="token punctuation">,</span> <span class="token number">89.8</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span> <span class="token comment">// looping from 0 to the length of the array</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d th element of a is %.2f\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的程序使用 <code>for</code> 循环遍历数组中的元素，从索引 <code>0</code> 到 <code>length of the array - 1</code>。这个程序运行后打印出，</p><pre class="line-numbers language-none"><code class="language-none">0 th element of a is 67.70  1 th element of a is 89.80  2 th element of a is 21.00  3 th element of a is 78.00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Go 提供了一种更好、更简洁的方法，通过使用 <code>for</code> 循环的 <strong>range</strong> 方法来遍历数组。<code>range</code> 返回索引和该索引处的值。让我们使用 range 重写上面的代码。我们还可以获取数组中所有元素的总和。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    a <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">float64</span><span class="token punctuation">&#123;</span><span class="token number">67.7</span><span class="token punctuation">,</span> <span class="token number">89.8</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">&#125;</span>    sum <span class="token operator">:=</span> <span class="token function">float64</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> a <span class="token punctuation">&#123;</span><span class="token comment">//range returns both the index and value</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d the element of a is %.2f\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> v<span class="token punctuation">)</span>        sum <span class="token operator">+=</span> v    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"\nsum of all elements of a"</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述程序的第 8 行 <code>for i, v := range a</code> 利用的是 for 循环 range 方式。 它将返回索引和该索引处的值。 我们打印这些值，并计算数组 <code>a</code> 中所有元素的总和。 程序的 <strong>输出是</strong>，</p><pre class="line-numbers language-none"><code class="language-none">0 the element of a is 67.701 the element of a is 89.802 the element of a is 21.003 the element of a is 78.00sum of all elements of a 256.5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果你只需要值并希望忽略索引，则可以通过用 <code>_</code> 空白标识符替换索引来执行。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> a <span class="token punctuation">&#123;</span> <span class="token comment">// ignores index  </span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>上面的 for 循环忽略索引，同样值也可以被忽略。</p><h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><p>到目前为止我们创建的数组都是一维的，Go 语言可以创建多维数组。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">printarray</span><span class="token punctuation">(</span>a <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v1 <span class="token operator">:=</span> <span class="token keyword">range</span> a <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v2 <span class="token operator">:=</span> <span class="token keyword">range</span> v1 <span class="token punctuation">&#123;</span>            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s "</span><span class="token punctuation">,</span> v2<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    a <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span>        <span class="token punctuation">&#123;</span><span class="token string">"lion"</span><span class="token punctuation">,</span> <span class="token string">"tiger"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span><span class="token string">"cat"</span><span class="token punctuation">,</span> <span class="token string">"dog"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span><span class="token string">"pigeon"</span><span class="token punctuation">,</span> <span class="token string">"peacock"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// this comma is necessary. The compiler will complain if you omit this comma</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printarray</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token keyword">var</span> b <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token builtin">string</span>    b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"apple"</span>    b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"samsung"</span>    b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"microsoft"</span>    b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"google"</span>    b<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"AT&amp;T"</span>    b<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"T-Mobile"</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>    <span class="token function">printarray</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述程序的第 17 行，用简略语法声明一个二维字符串数组 a 。20 行末尾的逗号是必需的。这是因为根据 Go 语言的规则自动插入分号。至于为什么这是必要的，如果你想了解更多，请阅读<a href="https://golang.org/doc/effective_go.html#semicolons">https://golang.org/doc/effective_go.html#semicolons</a>。</p><p>另外一个二维数组 b 在 23 行声明，字符串通过每个索引一个一个添加。这是另一种初始化二维数组的方法。</p><p>第 7 行的 printarray 函数使用两个 range 循环来打印二维数组的内容。上述程序的 <strong>输出是</strong></p><pre class="line-numbers language-none"><code class="language-none">lion tigercat dogpigeon peacockapple samsungmicrosoft googleAT&amp;T T-Mobile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这就是数组，尽管数组看上去似乎足够灵活，但是它们具有固定长度的限制，不可能增加数组的长度。这就要用到 <strong>切片</strong> 了。事实上，在 Go 中，切片比传统数组更常见。</p><h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><p>切片是由数组建立的一种方便、灵活且功能强大的包装（Wrapper）。切片本身不拥有任何数据。它们只是对现有数组的引用。</p><h3 id="创建一个切片"><a href="#创建一个切片" class="headerlink" title="创建一个切片"></a>创建一个切片</h3><p>带有 T 类型元素的切片由 <code>[]T</code> 表示</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    a <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">79</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> b <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token comment">// creates a slice from a[1] to a[3]</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用语法 <code>a[start:end]</code> 创建一个从 <code>a</code> 数组索引 <code>start</code> 开始到 <code>end - 1</code> 结束的切片。因此，在上述程序的第 9 行中, <code>a[1:4]</code> 从索引 1 到 3 创建了 <code>a</code> 数组的一个切片表示。因此, 切片 <code>b</code> 的值为 <code>[77 78 79]</code>。</p><p>让我们看看另一种创建切片的方法。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      c <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">&#125;</span> <span class="token comment">// creates and array and returns a slice reference</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述程序的第 9 行，<code>c：= [] int &#123;6，7，8&#125;</code> 创建一个有 3 个整型元素的数组，并返回一个存储在 c 中的切片引用。</p><h3 id="切片的修改"><a href="#切片的修改" class="headerlink" title="切片的修改"></a>切片的修改</h3><p>切片自己不拥有任何数据。它只是底层数组的一种表示。对切片所做的任何修改都会反映在底层数组中。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    darr <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">82</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">69</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">&#125;</span>    dslice <span class="token operator">:=</span> darr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"array before"</span><span class="token punctuation">,</span> darr<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> dslice <span class="token punctuation">&#123;</span>        dslice<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span>    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"array after"</span><span class="token punctuation">,</span> darr<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述程序的第 9 行，我们根据数组索引 2,3,4 创建一个切片 <code>dslice</code>。for 循环将这些索引中的值逐个递增。当我们使用 for 循环打印数组时，我们可以看到对切片的更改反映在数组中。该程序的输出是</p><pre class="line-numbers language-none"><code class="language-none">array before [57 89 90 82 100 78 67 69 59]  array after [57 89 91 83 101 78 67 69 59]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当多个切片共用相同的底层数组时，每个切片所做的更改将反映在数组中。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    numa <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">79</span> <span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">&#125;</span>    nums1 <span class="token operator">:=</span> numa<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token comment">// creates a slice which contains all elements of the array</span>    nums2 <span class="token operator">:=</span> numa<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"array before change 1"</span><span class="token punctuation">,</span> numa<span class="token punctuation">)</span>    nums1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"array after modification to slice nums1"</span><span class="token punctuation">,</span> numa<span class="token punctuation">)</span>    nums2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">101</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"array after modification to slice nums2"</span><span class="token punctuation">,</span> numa<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 9 行中，<code>numa [:]</code> 缺少开始和结束值。开始和结束的默认值分别为 <code>0</code> 和 <code>len (numa)</code>。两个切片 <code>nums1</code> 和 <code>nums2</code> 共享相同的数组。该程序的输出是</p><pre class="line-numbers language-none"><code class="language-none">array before change 1 [78 79 80]  array after modification to slice nums1 [100 79 80]  array after modification to slice nums2 [100 101 80]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>从输出中可以清楚地看出，当切片共享同一个数组时，每个所做的修改都会反映在数组中。</p><h3 id="切片的长度和容量"><a href="#切片的长度和容量" class="headerlink" title="切片的长度和容量"></a>切片的长度和容量</h3><p>切片的长度是切片中的元素数。<strong>切片的容量是从创建切片索引开始的底层数组中元素数。</strong></p><p>让我们写一段代码来更好地理解这点。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fruitarray <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"orange"</span><span class="token punctuation">,</span> <span class="token string">"grape"</span><span class="token punctuation">,</span> <span class="token string">"mango"</span><span class="token punctuation">,</span> <span class="token string">"water melon"</span><span class="token punctuation">,</span> <span class="token string">"pine apple"</span><span class="token punctuation">,</span> <span class="token string">"chikoo"</span><span class="token punctuation">&#125;</span>    fruitslice <span class="token operator">:=</span> fruitarray<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"length of slice %d capacity %d"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>fruitslice<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>fruitslice<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// length of is 2 and capacity is 6</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的程序中，<code>fruitslice</code> 是从 <code>fruitarray</code> 的索引 1 和 2 创建的。 因此，<code>fruitlice</code> 的长度为 <code>2</code>。</p><p><code>fruitarray</code> 的长度是 7。<code>fruiteslice</code> 是从 <code>fruitarray</code> 的索引 <code>1</code> 创建的。因此, <code>fruitslice</code> 的容量是从 <code>fruitarray</code> 索引为 <code>1</code> 开始，也就是说从 <code>orange</code> 开始，该值是 <code>6</code>。因此, <code>fruitslice</code> 的容量为 6。该[程序]输出切片的 <strong>长度为 2 容量为 6</strong> 。</p><p>切片可以重置其容量。任何超出这一点将导致程序运行时抛出错误。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fruitarray <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"orange"</span><span class="token punctuation">,</span> <span class="token string">"grape"</span><span class="token punctuation">,</span> <span class="token string">"mango"</span><span class="token punctuation">,</span> <span class="token string">"water melon"</span><span class="token punctuation">,</span> <span class="token string">"pine apple"</span><span class="token punctuation">,</span> <span class="token string">"chikoo"</span><span class="token punctuation">&#125;</span>    fruitslice <span class="token operator">:=</span> fruitarray<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"length of slice %d capacity %d\n"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>fruitslice<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>fruitslice<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// length of is 2 and capacity is 6</span>    fruitslice <span class="token operator">=</span> fruitslice<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">cap</span><span class="token punctuation">(</span>fruitslice<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment">// re-slicing furitslice till its capacity</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"After re-slicing length is"</span><span class="token punctuation">,</span><span class="token function">len</span><span class="token punctuation">(</span>fruitslice<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"and capacity is"</span><span class="token punctuation">,</span><span class="token function">cap</span><span class="token punctuation">(</span>fruitslice<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述程序的第 11 行中，<code>fruitslice</code> 的容量是重置的。以上程序输出为，</p><pre class="line-numbers language-none"><code class="language-none">length of slice 2 capacity 6 After re-slicing length is 6 and capacity is 6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="使用-make-创建一个切片"><a href="#使用-make-创建一个切片" class="headerlink" title="使用 make 创建一个切片"></a>使用 make 创建一个切片</h3><p>func make（[]T，len，cap）[]T 通过传递类型，长度和容量来创建切片。容量是可选参数, 默认值为切片长度。make 函数创建一个数组，并返回引用该数组的切片。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    i <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 make 创建切片时默认情况下这些值为零。上述程序的输出为 <code>[0 0 0 0 0]</code>。</p><h3 id="追加切片元素"><a href="#追加切片元素" class="headerlink" title="追加切片元素"></a>追加切片元素</h3><p>正如我们已经知道数组的长度是固定的，它的长度不能增加。 切片是动态的，使用 <code>append</code> 可以将新元素追加到切片上。append 函数的定义是 <code>func append（s[]T，x ... T）[]T</code>。</p><p><strong>x … T</strong> 在函数定义中表示该函数接受参数 x 的个数是可变的。这些类型的函数被称为[可变函数]。</p><p>有一个问题可能会困扰你。如果切片由数组支持，并且数组本身的长度是固定的，那么切片如何具有动态长度。以及内部发生了什么，当新的元素被添加到切片时，会创建一个新的数组。现有数组的元素被复制到这个新数组中，并返回这个新数组的新切片引用。现在新切片的容量是旧切片的两倍。下面的程序会让你清晰理解。</p><p><strong><em>当追加切片，容量打印底层数组，则切片以底层数组的默认长度翻倍</em></strong></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    cars <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"Ferrari"</span><span class="token punctuation">,</span> <span class="token string">"Honda"</span><span class="token punctuation">,</span> <span class="token string">"Ford"</span><span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"cars:"</span><span class="token punctuation">,</span> cars<span class="token punctuation">,</span> <span class="token string">"has old length"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>cars<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"and capacity"</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>cars<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// capacity of cars is 3</span>    cars <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>cars<span class="token punctuation">,</span> <span class="token string">"Toyota"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"cars:"</span><span class="token punctuation">,</span> cars<span class="token punctuation">,</span> <span class="token string">"has new length"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>cars<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"and capacity"</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>cars<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// capacity of cars is doubled to 6</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述程序中，<code>cars</code> 的容量最初是 3。在第 10 行，我们给 cars 添加了一个新的元素，并把 <code>append(cars, &quot;Toyota&quot;)</code> 返回的切片赋值给 cars。现在 cars 的容量翻了一番，变成了 6。上述程序的输出是</p><pre class="line-numbers language-none"><code class="language-none">cars: [Ferrari Honda Ford] has old length 3 and capacity 3  cars: [Ferrari Honda Ford Toyota] has new length 4 and capacity 6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>切片类型的零值为 <code>nil</code>。一个 <code>nil</code> 切片的长度和容量为 0。可以使用 append 函数将值追加到 <code>nil</code> 切片。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> names <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token comment">//zero value of a slice is nil</span>    <span class="token keyword">if</span> names <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"slice is nil going to append"</span><span class="token punctuation">)</span>        names <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>names<span class="token punctuation">,</span> <span class="token string">"John"</span><span class="token punctuation">,</span> <span class="token string">"Sebastian"</span><span class="token punctuation">,</span> <span class="token string">"Vinay"</span><span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"names contents:"</span><span class="token punctuation">,</span>names<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的程序 <code>names</code> 是 nil，我们已经添加 3 个字符串给 <code>names</code>。该程序的输出是</p><pre class="line-numbers language-none"><code class="language-none">slice is nil going to append  names contents: [John Sebastian Vinay]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>也可以使用 <code>...</code> 运算符将一个切片添加到另一个切片。 </p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    veggies <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"potatoes"</span><span class="token punctuation">,</span> <span class="token string">"tomatoes"</span><span class="token punctuation">,</span> <span class="token string">"brinjal"</span><span class="token punctuation">&#125;</span>    fruits <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"oranges"</span><span class="token punctuation">,</span> <span class="token string">"apples"</span><span class="token punctuation">&#125;</span>    food <span class="token operator">:=</span> <span class="token function">append</span><span class="token punctuation">(</span>veggies<span class="token punctuation">,</span> fruits<span class="token operator">...</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"food:"</span><span class="token punctuation">,</span>food<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述程序的第 10 行，food 是通过 append(veggies, fruits…) 创建。程序的输出为 <code>food: [potatoes tomatoes brinjal oranges apples]</code>。</p><h3 id="切片的函数传递"><a href="#切片的函数传递" class="headerlink" title="切片的函数传递"></a>切片的函数传递</h3><p>我们可以认为，切片在内部可由一个结构体类型表示。这是它的表现形式，</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> slice <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>      Length        <span class="token builtin">int</span>    Capacity      <span class="token builtin">int</span>    ZerothElement <span class="token operator">*</span><span class="token builtin">byte</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>切片包含长度、容量和指向数组第零个元素的指针。当切片传递给函数时，即使它通过值传递，指针变量也将引用相同的底层数组。因此，当切片作为参数传递给函数时，函数内所做的更改也会在函数外可见。让我们写一个程序来检查这点。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">subtactOne</span><span class="token punctuation">(</span>numbers <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> numbers <span class="token punctuation">&#123;</span>        numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">2</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    nos <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"slice before function call"</span><span class="token punctuation">,</span> nos<span class="token punctuation">)</span>    <span class="token function">subtactOne</span><span class="token punctuation">(</span>nos<span class="token punctuation">)</span>                               <span class="token comment">// function modifies the slice</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"slice after function call"</span><span class="token punctuation">,</span> nos<span class="token punctuation">)</span> <span class="token comment">// modifications are visible outside</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述程序的行号 17 中，调用函数将切片中的每个元素递减 2。在函数调用后打印切片时，这些更改是可见的。如果你还记得，这是不同于数组的，对于函数中一个数组的变化在函数外是不可见的。上述[程序]的输出是，</p><pre class="line-numbers language-none"><code class="language-none">array before function call [8 7 6]  array after function call [6 5 4]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="多维切片"><a href="#多维切片" class="headerlink" title="多维切片"></a>多维切片</h3><p>类似于数组，切片可以有多个维度。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       pls <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">&#123;</span><span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"C++"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span><span class="token string">"JavaScript"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span><span class="token string">"Go"</span><span class="token punctuation">,</span> <span class="token string">"Rust"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v1 <span class="token operator">:=</span> <span class="token keyword">range</span> pls <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v2 <span class="token operator">:=</span> <span class="token keyword">range</span> v1 <span class="token punctuation">&#123;</span>            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s "</span><span class="token punctuation">,</span> v2<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序的输出为，</p><pre class="line-numbers language-none"><code class="language-none">C C++  JavaScript  Go Rust<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="内存优化"><a href="#内存优化" class="headerlink" title="内存优化"></a>内存优化</h3><p>切片持有对底层数组的引用。只要切片在内存中，数组就不能被垃圾回收。在内存管理方面，这是需要注意的。让我们假设我们有一个非常大的数组，我们只想处理它的一小部分。然后，我们由这个数组创建一个切片，并开始处理切片。这里需要重点注意的是，在切片引用时数组仍然存在内存中。</p><p>一种解决方法是使用 [copy] 函数 <code>func copy(dst，src[]T)int</code> 来生成一个切片的副本。这样我们可以使用新的切片，原始数组可以被垃圾回收。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">countries</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">&#123;</span>    countries <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"USA"</span><span class="token punctuation">,</span> <span class="token string">"Singapore"</span><span class="token punctuation">,</span> <span class="token string">"Germany"</span><span class="token punctuation">,</span> <span class="token string">"India"</span><span class="token punctuation">,</span> <span class="token string">"Australia"</span><span class="token punctuation">&#125;</span>    neededCountries <span class="token operator">:=</span> countries<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>countries<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span>    countriesCpy <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>neededCountries<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">copy</span><span class="token punctuation">(</span>countriesCpy<span class="token punctuation">,</span> neededCountries<span class="token punctuation">)</span> <span class="token comment">//copies neededCountries to countriesCpy</span>    <span class="token keyword">return</span> countriesCpy<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    countriesNeeded <span class="token operator">:=</span> <span class="token function">countries</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>countriesNeeded<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述程序的第 9 行，<code>neededCountries := countries[:len(countries)-2</code> 创建一个去掉尾部 2 个元素的切片 <code>countries</code>，在上述程序的 11 行，将 <code>neededCountries</code> 复制到 <code>countriesCpy</code> 同时在函数的下一行返回 countriesCpy。现在 <code>countries</code> 数组可以被垃圾回收, 因为 <code>neededCountries</code> 不再被引用。</p>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>switch语句</title>
      <link href="2019/06/17/golang/10.switch-yu-ju/"/>
      <url>2019/06/17/golang/10.switch-yu-ju/</url>
      
        <content type="html"><![CDATA[<h1 id="10-switch-语句"><a href="#10-switch-语句" class="headerlink" title="10. switch 语句"></a>10. switch 语句</h1><p>switch 是一个条件语句，用于将表达式的值与可能匹配的选项列表进行比较，并根据匹配情况执行相应的代码块。它可以被认为是替代多个 <code>if else</code> 子句的常用方式。</p><p>看代码比文字更容易理解。让我们从一个简单的例子开始，它将把一个手指的编号作为输入，然后输出该手指对应的名字。比如 0 是拇指，1 是食指等等。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    finger <span class="token operator">:=</span> <span class="token number">4</span>    <span class="token keyword">switch</span> finger <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Thumb"</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Index"</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Middle"</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Ring"</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token number">5</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Pinky"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述程序中，<code>switch finger</code> 将 <code>finger</code> 的值与每个 <code>case</code> 语句进行比较。通过从上到下对每一个值进行对比，并执行与选项值匹配的第一个逻辑。在上述样例中， <code>finger</code> 值为 4，因此打印的结果是 <code>Ring</code> 。</p><p>在选项列表中，<code>case</code> 不允许出现重复项。如果您尝试运行下面的程序，编译器会报这样的错误: <code>main.go：18：2：在tmp / sandbox887814166 / main.go：16：7</code></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    finger <span class="token operator">:=</span> <span class="token number">4</span>    <span class="token keyword">switch</span> finger <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Thumb"</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Index"</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Middle"</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Ring"</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>重复项        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Another Ring"</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token number">5</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Pinky"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="默认情况（Default-Case）"><a href="#默认情况（Default-Case）" class="headerlink" title="默认情况（Default Case）"></a>默认情况（Default Case）</h2><p>我们每个人一只手只有 5 个手指。如果我们输入了不正确的手指编号会发生什么？这个时候就应该是属于默认情况。当其他情况都不匹配时，将运行默认情况。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">switch</span> finger <span class="token operator">:=</span> <span class="token number">8</span><span class="token punctuation">;</span> finger <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Thumb"</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Index"</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Middle"</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Ring"</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token number">5</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Pinky"</span><span class="token punctuation">)</span>    <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token comment">// 默认情况</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"incorrect finger number"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述程序中 <code>finger</code> 的值是 8，它不符合其中任何情况，因此会打印 <code>incorrect finger number</code>。default 不一定只能出现在 switch 语句的最后，它可以放在 switch 语句的任何地方。</p><p>您可能也注意到我们稍微改变了 <code>finger</code> 变量的声明方式。<code>finger</code> 声明在了 switch 语句内。在表达式求值之前，switch 可以选择先执行一个语句。在这行 <code>switch finger：= 8; finger</code> 中， 先声明了<code>finger</code> 变量，随即在表达式中使用了它。在这里，<code>finger</code> 变量的作用域仅限于这个 switch 内。</p><h2 id="多表达式判断"><a href="#多表达式判断" class="headerlink" title="多表达式判断"></a>多表达式判断</h2><p>通过用逗号分隔，可以在一个 case 中包含多个表达式。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    letter <span class="token operator">:=</span> <span class="token string">"i"</span>    <span class="token keyword">switch</span> letter <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"e"</span><span class="token punctuation">,</span> <span class="token string">"i"</span><span class="token punctuation">,</span> <span class="token string">"o"</span><span class="token punctuation">,</span> <span class="token string">"u"</span><span class="token punctuation">:</span> <span class="token comment">// 一个选项多个表达式</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"vowel"</span><span class="token punctuation">)</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"not a vowel"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>case &quot;a&quot;,&quot;e&quot;,&quot;i&quot;,&quot;o&quot;,&quot;u&quot;:</code> 这一行中，列举了所有的元音。只要匹配该项，则将输出 <code>vowel</code>。</p><h2 id="无表达式的-switch"><a href="#无表达式的-switch" class="headerlink" title="无表达式的 switch"></a>无表达式的 switch</h2><p>在 switch 语句中，表达式是可选的，可以被省略。如果省略表达式，则表示这个 switch 语句等同于 <code>switch true</code>，并且每个 <code>case</code> 表达式都被认定为有效，相应的代码块也会被执行。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    num <span class="token operator">:=</span> <span class="token number">75</span>    <span class="token keyword">switch</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 表达式被省略了</span>    <span class="token keyword">case</span> num <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> num <span class="token operator">&lt;=</span> <span class="token number">50</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"num is greater than 0 and less than 50"</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> num <span class="token operator">>=</span> <span class="token number">51</span> <span class="token operator">&amp;&amp;</span> num <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"num is greater than 51 and less than 100"</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> num <span class="token operator">>=</span> <span class="token number">101</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"num is greater than 100"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述代码中，switch 中缺少表达式，因此默认它为 true，true 值会和每一个 case 的求值结果进行匹配。<code>case num &gt;= 51 &amp;&amp; &lt;= 100:</code> 为 true，所以程序输出 <code>num is greater than 51 and less than 100</code>。这种类型的 switch 语句可以替代多个 <code>if else</code> 子句。</p><h2 id="Fallthrough-语句"><a href="#Fallthrough-语句" class="headerlink" title="Fallthrough 语句"></a>Fallthrough 语句</h2><p>在 Go 中，每执行完一个 case 后，会从 switch 语句中跳出来，不再做后续 case 的判断和执行。使用 <code>fallthrough</code> 语句可以在已经执行完成的 case 之后，把控制权转移到下一个 case 的执行代码中。</p><p>让我们写一个程序来理解 fallthrough。我们的程序将检查输入的数字是否小于 50、100 或 200。例如我们输入 75，程序将输出<code>75 is lesser than 100</code> 和 <code>75 is lesser than 200</code>。我们用 fallthrough 来实现了这个功能。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">number</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>    num <span class="token operator">:=</span> <span class="token number">15</span> <span class="token operator">*</span> <span class="token number">5</span>     <span class="token keyword">return</span> num<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">switch</span> num <span class="token operator">:=</span> <span class="token function">number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#123;</span> <span class="token comment">// num is not a constant</span>    <span class="token keyword">case</span> num <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d is lesser than 50\n"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span>        <span class="token keyword">fallthrough</span>    <span class="token keyword">case</span> num <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d is lesser than 100\n"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span>        <span class="token keyword">fallthrough</span>    <span class="token keyword">case</span> num <span class="token operator">&lt;</span> <span class="token number">200</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d is lesser than 200"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>switch 和 case 的表达式不一定是常量。它们也可以在运行过程中通过计算得到。在上面的程序中，num 被初始化为函数 <code>number()</code> 的返回值。程序运行到 switch 中时，会计算出 case 的值。<code>case num &lt; 100：</code> 的结果为 true，所以程序输出 <code>75 is lesser than 100</code>。当执行到下一句 <code>fallthrough</code> 时，程序控制直接跳转到下一个 case 的第一个执行逻辑中，所以打印出 <code>75 is lesser than 200</code>。最后这个程序的输出会是</p><pre class="line-numbers language-none"><code class="language-none">75 is lesser than 100  75 is lesser than 200<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>fallthrough 语句应该是 case 子句的最后一个语句。如果它出现在了 case 语句的中间，编译器将会报错：fallthrough statement out of place</strong></p>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>循环</title>
      <link href="2019/06/17/golang/9.xun-huan/"/>
      <url>2019/06/17/golang/9.xun-huan/</url>
      
        <content type="html"><![CDATA[<h1 id="9-循环"><a href="#9-循环" class="headerlink" title="9. 循环"></a>9. 循环</h1><p>循环语句是用来重复执行某一段代码。</p><p><code>for</code> 是 Go 语言唯一的循环语句。Go 语言中并没有其他语言比如 C 语言中的 <code>while</code> 和 <code>do while</code> 循环。</p><h2 id="for-循环语法"><a href="#for-循环语法" class="headerlink" title="for 循环语法"></a>for 循环语法</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">for</span> initialisation<span class="token punctuation">;</span> condition<span class="token punctuation">;</span> post <span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>初始化语句只执行一次。循环初始化后，将检查循环条件。如果条件的计算结果为 <code>true</code> ，则 <code>&#123;&#125;</code> 内的循环体将执行，接着执行 post 语句。post 语句将在每次成功循环迭代后执行。在执行 post 语句后，条件将被再次检查。如果为 <code>true</code>, 则循环将继续执行，否则 for 循环将终止。（译注：这是典型的 for 循环三个表达式，第一个为初始化表达式或赋值语句；第二个为循环条件判定表达式；第三个为循环变量修正表达式，即此处的 post ）</p><p>这三个组成部分，即初始化，条件和 post 都是可选的。让我们看一个例子来更好地理解循环。</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>让我们用 <code>for</code> 循环写一个打印出从 1 到 10 的程序。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">" %d"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的程序中，i 变量被初始化为 1。条件语句会检查 i 是否小于 10。如果条件成立，i 就会被打印出来，否则循环就会终止。循环语句会在每一次循环完成后自增 1。一旦 i 变得比 10 要大，循环中止。</p><p>上面的程序会打印出 <code>1 2 3 4 5 6 7 8 9 10</code> 。</p><p>在 <code>for</code> 循环中声明的变量只能在循环体内访问，因此 i 不能够在循环体外访问。</p><h2 id="break"><a href="#break" class="headerlink" title="break"></a>break</h2><p><code>break</code> 语句用于在完成正常执行之前突然终止 for 循环，之后程序将会在 for 循环下一行代码开始执行。</p><p>让我们写一个从 1 打印到 5 并且使用 <code>break</code> 跳出循环的程序。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> i <span class="token operator">></span> <span class="token number">5</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">break</span> <span class="token comment">//loop is terminated if i > 5</span>        <span class="token punctuation">&#125;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"\nline after for loop"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的程序中，在循环过程中 i 的值会被判断。如果 i 的值大于 5 然后 <code>break</code> 语句就会执行，循环就会被终止。打印语句会在 <code>for</code> 循环结束后执行，上面程序会输出为</p><pre class="line-numbers language-none"><code class="language-none">1 2 3 4 5  line after for loop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h2><p><code>continue</code> 语句用来跳出 <code>for</code> 循环中当前循环。在 <code>continue</code> 语句后的所有的 <code>for</code> 循环语句都不会在本次循环中执行。循环体会在一下次循环中继续执行。</p><p>让我们写一个打印出 1 到 10 并且使用 <code>continue</code> 的程序。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> i<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">continue</span>        <span class="token punctuation">&#125;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的程序中，这行代码 <code>if i%2==0</code> 会判断 i 除以 2 的余数是不是 0，如果是 0，这个数字就是偶数然后执行 <code>continue</code> 语句，从而控制程序进入下一个循环。因此在 <code>continue</code> 后面的打印语句不会被调用而程序会进入一下个循环。上面程序会输出 <code>1 3 5 7 9</code>。</p><h2 id="更多例子"><a href="#更多例子" class="headerlink" title="更多例子"></a>更多例子</h2><p>让我们写更多的代码来演示 <code>for</code> 循环的多样性吧</p><p>下面这个程序打印出从 0 到 10 所有的偶数。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      i <span class="token operator">:=</span> <span class="token number">0</span>    <span class="token keyword">for</span> <span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token punctuation">&#123;</span> <span class="token comment">// initialisation and post are omitted</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>        i <span class="token operator">+=</span> <span class="token number">2</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>正如我们已经知道的那样，<code>for</code> 循环的三部分，初始化语句、条件语句、post 语句都是可选的。在上面的程序中，初始化语句和 post 语句都被省略了。i 在 <code>for</code> 循环外被初始化成了 0。只要 <code>i&lt;=10</code> 循环就会被执行。在循环中，i 以 2 的增量自增。上面的程序会输出 <code>0 2 4 6 8 10</code>。</p><p>上面程序中 <code>for</code> 循环中的分号也可以省略。这个格式的 <code>for</code> 循环可以看作是二选一的 <code>for while</code> 循环。上面的程序可以被重写成：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      i <span class="token operator">:=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span> <span class="token punctuation">&#123;</span> <span class="token comment">//semicolons are ommitted and only condition is present</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>        i <span class="token operator">+=</span> <span class="token number">2</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>for</code> 循环中可以声明和操作多个变量。让我们写一个使用声明多个变量来打印下面序列的程序。</p><pre class="line-numbers language-none"><code class="language-none">10 * 1 &#x3D; 10  11 * 2 &#x3D; 22  12 * 3 &#x3D; 36  13 * 4 &#x3D; 52  14 * 5 &#x3D; 70  15 * 6 &#x3D; 90  16 * 7 &#x3D; 112  17 * 8 &#x3D; 136  18 * 9 &#x3D; 162  19 * 10 &#x3D; 190package mainimport (      &quot;fmt&quot;)func main() &#123;      for no, i :&#x3D; 10, 1; i &lt;&#x3D; 10 &amp;&amp; no &lt;&#x3D; 19; i, no &#x3D; i+1, no+1 &#123; &#x2F;&#x2F;multiple initialisation and increment        fmt.Printf(&quot;%d * %d &#x3D; %d\n&quot;, no, i, no*i)    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的程序中 <code>no</code> 和 <code>i</code> 被声明然后分别被初始化为 10 和 1 。在每一次循环结束后 <code>no</code> 和 <code>i</code> 都自增 1 。布尔型操作符 <code>&amp;&amp;</code> 被用来确保 i 小于等于 10 并且 <code>no</code> 小于等于 19 。</p><h2 id="无限循环"><a href="#无限循环" class="headerlink" title="无限循环"></a>无限循环</h2><p>无限循环的语法是：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">for</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>下一个程序就会一直打印<code>Hello World</code>不会停止。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在你本地系统上运行，来无限的打印 “Hello World” 。</p><p>这里还有一个 <code>range</code> 结构，它可以被用来在 <code>for</code> 循环中操作数组对象。当我们学习数组时我们会补充这方面内容。</p>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>if-else语句</title>
      <link href="2019/06/17/golang/8.if-else-yu-ju/"/>
      <url>2019/06/17/golang/8.if-else-yu-ju/</url>
      
        <content type="html"><![CDATA[<h1 id="8-if-else-语句"><a href="#8-if-else-语句" class="headerlink" title="8. if-else 语句"></a>8. if-else 语句</h1><p>if 是条件语句。if 语句的语法是</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">if</span> condition <span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果 <code>condition</code> 为真，则执行 <code>&#123;</code> 和 <code>&#125;</code> 之间的代码。</p><p>不同于其他语言，例如 C 语言，Go 语言里的 <code>&#123;  &#125;</code> 是必要的，即使在 <code>&#123;  &#125;</code> 之间只有一条语句。</p><p>if 语句还有可选的 <code>else if</code> 和 <code>else</code> 部分。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">if</span> condition <span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> condition <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>if-else 语句之间可以有任意数量的 <code>else if</code>。条件判断顺序是从上到下。如果 <code>if</code> 或 <code>else if</code> 条件判断的结果为真，则执行相应的代码块。 如果没有条件为真，则 <code>else</code> 代码块被执行。</p><p>让我们编写一个简单的程序来检测一个数字是奇数还是偶数。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      num <span class="token operator">:=</span> <span class="token number">10</span>    <span class="token keyword">if</span> num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span> <span class="token comment">//checks if number is even</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"the number is even"</span><span class="token punctuation">)</span>     <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"the number is odd"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>if num％2 == 0</code> 语句检测 num 取 2 的余数是否为零。 如果是为零则打印输出 “the number is even”，如果不为零则打印输出 “the number is odd”。在上面的这个程序中，打印输出的是 <code>the number is even</code>。</p><p><code>if</code> 还有另外一种形式，它包含一个 <code>statement</code> 可选语句部分，该组件在条件判断之前运行。它的语法是</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">if</span> statement<span class="token punctuation">;</span> condition <span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>让我们重写程序，使用上面的语法来查找数字是偶数还是奇数。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> num <span class="token operator">:=</span> <span class="token number">10</span><span class="token punctuation">;</span> num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span> <span class="token comment">//checks if number is even</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span><span class="token string">"is even"</span><span class="token punctuation">)</span>     <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span><span class="token string">"is odd"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的程序中，<code>num</code> 在 <code>if</code> 语句中进行初始化，<code>num</code> 只能从 <code>if</code> 和 <code>else</code> 中访问。也就是说 <code>num</code> 的范围仅限于 <code>if</code> <code>else</code> 代码块。如果我们试图从其他外部的 <code>if</code> 或者 <code>else</code> 访问 <code>num</code>,编译器会不通过。</p><p>让我们再写一个使用 <code>else if</code> 的程序。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      num <span class="token operator">:=</span> <span class="token number">99</span>    <span class="token keyword">if</span> num <span class="token operator">&lt;=</span> <span class="token number">50</span> <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"number is less than or equal to 50"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> num <span class="token operator">>=</span> <span class="token number">51</span> <span class="token operator">&amp;&amp;</span> num <span class="token operator">&lt;=</span> <span class="token number">100</span> <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"number is between 51 and 100"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"number is greater than 100"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的程序中，如果 <code>else if num &gt;= 51 &amp;&amp; num &lt;= 100</code> 为真，程序将输出 <code>number is between 51 and 100</code>。</p><h3 id="一个注意点"><a href="#一个注意点" class="headerlink" title="一个注意点"></a>一个注意点</h3><p><code>else</code> 语句应该在 <code>if</code> 语句的大括号 <code>&#125;</code> 之后的同一行中。如果不是，编译器会不通过。</p><p>让我们通过以下程序来理解它。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      num <span class="token operator">:=</span> <span class="token number">10</span>    <span class="token keyword">if</span> num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span> <span class="token comment">//checks if number is even</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"the number is even"</span><span class="token punctuation">)</span>     <span class="token punctuation">&#125;</span>      <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"the number is odd"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的程序中，<code>else</code> 语句不是从 <code>if</code> 语句结束后的 <code>&#125;</code> 同一行开始。而是从下一行开始。这是不允许的。如果运行这个程序，编译器会输出错误，</p><pre class="line-numbers language-none"><code class="language-none">main.go:12:5: syntax error: unexpected else, expecting &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>出错的原因是 Go 语言的分号是自动插入。</p><p>在 Go 语言规则中，它指定在 <code>&#125;</code> 之后插入一个分号，如果这是该行的最终标记。因此，在if语句后面的 <code>&#125;</code> 会自动插入一个分号。</p><p>实际上我们的程序变成了</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">if</span> num<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"the number is even"</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">//semicolon inserted by Go</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"the number is odd"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分号插入之后。从上面代码片段可以看出第三行插入了分号。</p><p>由于 <code>if&#123;…&#125; else &#123;…&#125;</code> 是一个单独的语句，它的中间不应该出现分号。因此，需要将 <code>else</code> 语句放置在 <code>&#125;</code> 之后处于同一行中。</p><p>我已经重写了程序，将 else 语句移动到 if 语句结束后 <code>&#125;</code> 的后面，以防止分号的自动插入。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      num <span class="token operator">:=</span> <span class="token number">10</span>    <span class="token keyword">if</span> num<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span> <span class="token comment">//checks if number is even</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"the number is even"</span><span class="token punctuation">)</span>     <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"the number is odd"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在编译器会很开心，我们也一样 。</p>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>包</title>
      <link href="2019/06/17/golang/7.bao/"/>
      <url>2019/06/17/golang/7.bao/</url>
      
        <content type="html"><![CDATA[<h1 id="7-包"><a href="#7-包" class="headerlink" title="7. 包"></a>7. 包</h1><h3 id="什么是包，为什么使用包？"><a href="#什么是包，为什么使用包？" class="headerlink" title="什么是包，为什么使用包？"></a>什么是包，为什么使用包？</h3><p>到目前为止，我们看到的 Go 程序都只有一个文件，文件里包含一个 main 函数和几个其他的函数。在实际中，这种把所有源代码编写在一个文件的方法并不好用。以这种方式编写，代码的重用和维护都会很困难。而包（Package）解决了这样的问题。</p><p><strong>包用于组织 Go 源代码，提供了更好的可重用性与可读性</strong>。由于包提供了代码的封装，因此使得 Go 应用程序易于维护。</p><p>例如，假如我们正在开发一个 Go  图像处理程序，它提供了图像的裁剪、锐化、模糊和彩色增强等功能。一种组织程序的方式就是根据不同的特性，把代码放到不同的包中。比如裁剪可以是一个单独的包，而锐化是另一个包。这种方式的优点是，由于彩色增强可能需要一些锐化的功能，因此彩色增强的代码只需要简单地导入（我们会在随后讨论）锐化功能的包，就可以使用锐化的功能了。这样的方式使得代码易于重用。</p><p>我们会逐步构建一个计算矩形的面积和对角线的应用程序。</p><p>通过这个程序，我们会更好地理解包。</p><h3 id="main-函数和-main-包"><a href="#main-函数和-main-包" class="headerlink" title="main 函数和 main 包"></a>main 函数和 main 包</h3><p>所有可执行的 Go 程序都必须包含一个 main 函数。这个函数是程序运行的入口。main 函数应该放置于 main 包中。</p><p><strong>package packagename 这行代码指定了某一源文件属于一个包。它应该放在每一个源文件的第一行。</strong></p><p>下面开始为我们的程序创建一个 main 函数和 main 包。<strong>在 Go 工作区内的 src 文件夹中创建一个文件夹，命名为 geometry</strong>。在 <code>geometry</code> 文件夹中创建一个 <code>geometry.go</code> 文件。</p><p>在 geometry.go 中编写下面代码。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// geometry.go</span><span class="token keyword">package</span> main <span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Geometrical shape properties"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>package main</code> 这一行指定该文件属于 main 包。<code>import &quot;packagename&quot;</code> 语句用于导入一个已存在的包。在这里我们导入了 <code>fmt</code> 包，包内含有 Println 方法。接下来是 main 函数，它会打印 <code>Geometrical shape properties</code>。</p><p>键入 <code>go install geometry</code>，编译上述程序。该命令会在 <code>geometry</code> 文件夹内搜索拥有 main 函数的文件。在这里，它找到了 <code>geometry.go</code>。接下来，它编译并产生一个名为 <code>geometry</code> （在 windows 下是 <code>geometry.exe</code>）的二进制文件，该二进制文件放置于工作区的 bin 文件夹。现在，工作区的目录结构会是这样：</p><pre class="line-numbers language-none"><code class="language-none">src    geometry        gemometry.gobin    geometry<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>键入 <code>workspacepath/bin/geometry</code>，运行该程序。请用你自己的 Go 工作区来替换 <code>workspacepath</code>。这个命令会执行 bin 文件夹里的 <code>geometry</code> 二进制文件。你应该会输出 <code>Geometrical shape properties</code>。</p><h3 id="创建自定义的包"><a href="#创建自定义的包" class="headerlink" title="创建自定义的包"></a>创建自定义的包</h3><p>我们将组织代码，使得所有与矩形有关的功能都放入 <code>rectangle</code> 包中。</p><p>我们会创建一个自定义包 <code>rectangle</code>，它有一个计算矩形的面积和对角线的函数。</p><p><strong>属于某一个包的源文件都应该放置于一个单独命名的文件夹里。按照 Go 的惯例，应该用包名命名该文件夹。</strong></p><p>因此，我们在 <code>geometry</code> 文件夹中，创建一个命名为 <code>rectangle</code> 的文件夹。在 <code>rectangle</code> 文件夹中，所有文件都会以 <code>package rectangle</code> 作为开头，因为它们都属于 rectangle 包。</p><p>在我们之前创建的 rectangle 文件夹中，再创建一个名为 <code>rectprops.go</code> 的文件，添加下列代码。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// rectprops.go</span><span class="token keyword">package</span> rectangle<span class="token keyword">import</span> <span class="token string">"math"</span><span class="token keyword">func</span> <span class="token function">Area</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">,</span> wid <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">&#123;</span>      area <span class="token operator">:=</span> <span class="token builtin">len</span> <span class="token operator">*</span> wid    <span class="token keyword">return</span> area<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">Diagonal</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">,</span> wid <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">&#123;</span>      diagonal <span class="token operator">:=</span> math<span class="token punctuation">.</span><span class="token function">Sqrt</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">len</span> <span class="token operator">*</span> <span class="token builtin">len</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>wid <span class="token operator">*</span> wid<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> diagonal<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的代码中，我们创建了两个函数用于计算 <code>Area</code> 和 <code>Diagonal</code>。矩形的面积是长和宽的乘积。矩形的对角线是长与宽平方和的平方根。<code>math</code> 包下面的 <code>Sqrt</code> 函数用于计算平方根。</p><p>注意到函数 Area 和 Diagonal 都是以大写字母开头的。这是有必要的，我们将会很快解释为什么需要这样做。</p><h3 id="导入自定义包"><a href="#导入自定义包" class="headerlink" title="导入自定义包"></a>导入自定义包</h3><p>为了使用自定义包，我们必须要先导入它。导入自定义包的语法为 <code>import path</code>。我们必须指定自定义包相对于工作区内 <code>src</code> 文件夹的相对路径。我们目前的文件夹结构是：</p><pre class="line-numbers language-none"><code class="language-none">src    geometry        geometry.go        rectangle            rectprops.go<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>import &quot;geometry/rectangle&quot;</code> 这一行会导入 rectangle 包。</p><p>在 <code>geometry.go</code> 里面添加下面的代码：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// geometry.go</span><span class="token keyword">package</span> main <span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span>    <span class="token string">"geometry/rectangle"</span> <span class="token comment">// 导入自定义包</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> rectLen<span class="token punctuation">,</span> rectWidth <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Geometrical shape properties"</span><span class="token punctuation">)</span>    <span class="token comment">/*Area function of rectangle package used*/</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"area of rectangle %.2f\n"</span><span class="token punctuation">,</span> rectangle<span class="token punctuation">.</span><span class="token function">Area</span><span class="token punctuation">(</span>rectLen<span class="token punctuation">,</span> rectWidth<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">/*Diagonal function of rectangle package used*/</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"diagonal of the rectangle %.2f "</span><span class="token punctuation">,</span> rectangle<span class="token punctuation">.</span><span class="token function">Diagonal</span><span class="token punctuation">(</span>rectLen<span class="token punctuation">,</span> rectWidth<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码导入了 <code>rectangle</code> 包，并调用了里面的 Area 和 Diagonal 函数，得到矩形的面积和对角线。Printf 内的格式说明符 <code>%.2f</code> 会将浮点数截断到小数点两位。应用程序的输出为：</p><pre class="line-numbers language-none"><code class="language-none">Geometrical shape properties  area of rectangle 42.00  diagonal of the rectangle 9.22<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="导出名字（Exported-Names）"><a href="#导出名字（Exported-Names）" class="headerlink" title="导出名字（Exported Names）"></a>导出名字（Exported Names）</h3><p>我们将 rectangle 包中的函数 Area 和 Diagonal 首字母大写。在 Go 中这具有特殊意义。在 Go  中，任何以大写字母开头的变量或者函数都是被导出的名字。其它包只能访问被导出的函数和变量。在这里，我们需要在 main 包中访问 Area 和  Diagonal 函数，因此会将它们的首字母大写。</p><p>在 <code>rectprops.go</code> 中，如果函数名从 <code>Area(len, wid float64)</code> 变为 <code>area(len, wid float64)</code>，并且在 <code>geometry.go</code> 中， <code>rectangle.Area(rectLen, rectWidth)</code> 变为 <code>rectangle.area(rectLen, rectWidth)</code>， 则该程序运行时，编译器会抛出错误 <code>geometry.go:11: cannot refer to unexported name rectangle.area</code>。因为如果想在包外访问一个函数，它应该首字母大写。</p><h3 id="init-函数"><a href="#init-函数" class="headerlink" title="init 函数"></a>init 函数</h3><p>所有包都可以包含一个 <code>init</code> 函数。init 函数不应该有任何返回值类型和参数，在我们的代码中也不能显式地调用它。init 函数的形式如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>init 函数可用于执行初始化任务，也可用于在开始执行之前验证程序的正确性。</p><p>包的初始化顺序如下：</p><ol><li>首先初始化包级别（Package Level）的变量</li><li>紧接着调用 init 函数。包可以有多个 init 函数（在一个文件或分布于多个文件中），它们按照编译器解析它们的顺序进行调用。</li></ol><p>如果一个包导入了另一个包，会先初始化被导入的包。</p><p>尽管一个包可能会被导入多次，但是它只会被初始化一次。</p><p>为了理解 init 函数，我们接下来对程序做了一些修改。</p><p>首先在 <code>rectprops.go</code> 文件中添加了一个 init 函数。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// rectprops.go</span><span class="token keyword">package</span> rectangle<span class="token keyword">import</span> <span class="token string">"math"</span>  <span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token comment">/* * init function added */</span><span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"rectangle package initialized"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">Area</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">,</span> wid <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">&#123;</span>      area <span class="token operator">:=</span> <span class="token builtin">len</span> <span class="token operator">*</span> wid    <span class="token keyword">return</span> area<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">Diagonal</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">,</span> wid <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">&#123;</span>      diagonal <span class="token operator">:=</span> math<span class="token punctuation">.</span><span class="token function">Sqrt</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">len</span> <span class="token operator">*</span> <span class="token builtin">len</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>wid <span class="token operator">*</span> wid<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> diagonal<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们添加了一个简单的 init 函数，它仅打印 <code>rectangle package initialized</code>。</p><p>现在我们来修改 main 包。我们知道矩形的长和宽都应该大于 0，我们将在 <code>geometry.go</code> 中使用 init 函数和包级别的变量来检查矩形的长和宽。</p><p>修改 <code>geometry.go</code> 文件如下所示：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// geometry.go</span><span class="token keyword">package</span> main <span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span>    <span class="token string">"geometry/rectangle"</span> <span class="token comment">// 导入自定义包</span>    <span class="token string">"log"</span><span class="token punctuation">)</span><span class="token comment">/* * 1. 包级别变量*/</span><span class="token keyword">var</span> rectLen<span class="token punctuation">,</span> rectWidth <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span> <span class="token comment">/**2. init 函数会检查长和宽是否大于0*/</span><span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main package initialized"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> rectLen <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"length is less than zero"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> rectWidth <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"width is less than zero"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Geometrical shape properties"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"area of rectangle %.2f\n"</span><span class="token punctuation">,</span> rectangle<span class="token punctuation">.</span><span class="token function">Area</span><span class="token punctuation">(</span>rectLen<span class="token punctuation">,</span> rectWidth<span class="token punctuation">)</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"diagonal of the rectangle %.2f "</span><span class="token punctuation">,</span>rectangle<span class="token punctuation">.</span><span class="token function">Diagonal</span><span class="token punctuation">(</span>rectLen<span class="token punctuation">,</span> rectWidth<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们对 <code>geometry.go</code> 做了如下修改：</p><ol><li>变量 <strong>rectLen</strong> 和 <strong>rectWidth</strong> 从 main 函数级别移到了包级别。</li><li>添加了 init 函数。当 rectLen 或 rectWidth 小于 0 时，init 函数使用 <strong>log.Fatal</strong> 函数打印一条日志，并终止了程序。</li></ol><p>main 包的初始化顺序为：</p><ol><li>首先初始化被导入的包。因此，首先初始化了 rectangle 包。</li><li>接着初始化了包级别的变量 <strong>rectLen</strong> 和 <strong>rectWidth</strong>。</li><li>调用 init 函数。</li><li>最后调用 main 函数。</li></ol><p>当运行该程序时，会有如下输出。</p><pre class="line-numbers language-none"><code class="language-none">rectangle package initialized  main package initialized  Geometrical shape properties  area of rectangle 42.00  diagonal of the rectangle 9.22<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>果然，程序会首先调用 rectangle 包的 init 函数，然后，会初始化包级别的变量 <strong>rectLen</strong> 和 <strong>rectWidth</strong>。接着调用 main 包里的 init 函数，该函数检查 rectLen 和 rectWidth 是否小于 0，如果条件为真，则终止程序。我们会在单独的教程里深入学习 if 语句。现在你可以认为 <code>if rectLen &lt; 0</code> 能够检查 <code>rectLen</code> 是否小于 0，并且如果是，则终止程序。<code>rectWidth</code> 条件的编写也是类似的。在这里两个条件都为假，因此程序继续执行。最后调用了 main 函数。</p><p>让我们接着稍微修改这个程序来学习使用 init 函数。</p><p>将 <code>geometry.go</code> 中的 <code>var rectLen, rectWidth float64 = 6, 7</code> 改为 <code>var rectLen, rectWidth float64 = -6, 7</code>。我们把 <code>rectLen</code> 初始化为负数。</p><p>现在当运行程序时，会得到：</p><pre class="line-numbers language-none"><code class="language-none">rectangle package initialized  main package initialized  2017&#x2F;04&#x2F;04 00:28:20 length is less than zero<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>像往常一样， 会首先初始化 rectangle 包，然后是 main 包中的包级别的变量 rectLen 和 rectWidth。rectLen 为负数，因此当运行 init 函数时，程序在打印 <code>length is less than zero</code> 后终止。</p><h3 id="使用空白标识符（Blank-Identifier）"><a href="#使用空白标识符（Blank-Identifier）" class="headerlink" title="使用空白标识符（Blank Identifier）"></a>使用空白标识符（Blank Identifier）</h3><p>导入了包，却不在代码中使用它，这在 Go 中是非法的。当这么做时，编译器是会报错的。其原因是为了避免导入过多未使用的包，从而导致编译时间显著增加。将 <code>geometry.go</code> 中的代码替换为如下代码：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// geometry.go</span><span class="token keyword">package</span> main <span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"geometry/rectangle"</span> <span class="token comment">// 导入自定的包</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的程序将会抛出错误 <code>geometry.go:6: imported and not used: &quot;geometry/rectangle&quot;</code>。</p><p>然而，在程序开发的活跃阶段，又常常会先导入包，而暂不使用它。遇到这种情况就可以使用空白标识符 <code>_</code>。</p><p>下面的代码可以避免上述程序的错误：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"geometry/rectangle"</span> <span class="token punctuation">)</span><span class="token keyword">var</span> <span class="token boolean">_</span> <span class="token operator">=</span> rectangle<span class="token punctuation">.</span>Area <span class="token comment">// 错误屏蔽器</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>var _ = rectangle.Area</code> 这一行屏蔽了错误。我们应该了解这些错误屏蔽器（Error Silencer）的动态，在程序开发结束时就移除它们，包括那些还没有使用过的包。由此建议在 import 语句下面的包级别范围中写上错误屏蔽器。</p><p>有时候我们导入一个包，只是为了确保它进行了初始化，而无需使用包中的任何函数或变量。例如，我们或许需要确保调用了 rectangle 包的 init 函数，而不需要在代码中使用它。这种情况也可以使用空白标识符，如下所示。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main <span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token boolean">_</span> <span class="token string">"geometry/rectangle"</span> <span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行上面的程序，会输出 <code>rectangle package initialized</code>。尽管在所有代码里，我们都没有使用这个包，但还是成功初始化了它。</p>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数function</title>
      <link href="2019/06/17/golang/6.han-shu-function/"/>
      <url>2019/06/17/golang/6.han-shu-function/</url>
      
        <content type="html"><![CDATA[<h1 id="6-函数（Function）"><a href="#6-函数（Function）" class="headerlink" title="6. 函数（Function）"></a>6. 函数（Function）</h1><h2 id="函数是什么？"><a href="#函数是什么？" class="headerlink" title="函数是什么？"></a>函数是什么？</h2><p>函数是一块执行特定任务的代码。一个函数是在输入源基础上，通过执行一系列的算法，生成预期的输出。</p><h2 id="函数的声明"><a href="#函数的声明" class="headerlink" title="函数的声明"></a>函数的声明</h2><p>在 Go 语言中，函数声明通用语法如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">functionname</span><span class="token punctuation">(</span>parametername <span class="token keyword">type</span><span class="token punctuation">)</span> returntype <span class="token punctuation">&#123;</span>      <span class="token comment">// 函数体（具体实现的功能）</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>函数的声明以关键词 <code>func</code> 开始，后面紧跟自定义的函数名 <code>functionname (函数名)</code>。函数的参数列表定义在 <code>(</code> 和 <code>)</code> 之间，返回值的类型则定义在之后的 <code>returntype (返回值类型)</code>处。声明一个参数的语法采用 <strong>参数名</strong> <strong>参数类型</strong> 的方式，任意多个参数采用类似 <code>(parameter1 type, parameter2 type) 即(参数1 参数1的类型,参数2 参数2的类型)</code>的形式指定。之后包含在 <code>&#123;</code> 和 <code>&#125;</code> 之间的代码，就是函数体。</p><p>函数中的参数列表和返回值并非是必须的，所以下面这个函数的声明也是有效的</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">functionname</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 译注: 表示这个函数不需要输入参数，且没有返回值</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="示例函数"><a href="#示例函数" class="headerlink" title="示例函数"></a>示例函数</h2><p>我们以写一个计算商品价格的函数为例，输入参数是单件商品的价格和商品的个数，两者的乘积为商品总价，作为函数的输出值。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">calculateBill</span><span class="token punctuation">(</span>price <span class="token builtin">int</span><span class="token punctuation">,</span> no <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> totalPrice <span class="token operator">=</span> price <span class="token operator">*</span> no <span class="token comment">// 商品总价 = 商品单价 * 数量</span>    <span class="token keyword">return</span> totalPrice <span class="token comment">// 返回总价</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上述函数有两个整型的输入 <code>price</code> 和 <code>no</code>，返回值 <code>totalPrice</code> 为 <code>price</code> 和 <code>no</code> 的乘积，也是整数类型。</p><p><strong>如果有连续若干个参数，它们的类型一致，那么我们无须一一罗列，只需在最后一个参数后添加该类型。</strong> 例如，<code>price int, no int</code> 可以简写为 <code>price, no int</code>，所以示例函数也可写成</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">calculateBill</span><span class="token punctuation">(</span>price<span class="token punctuation">,</span> no <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> totalPrice <span class="token operator">=</span> price <span class="token operator">*</span> no    <span class="token keyword">return</span> totalPrice<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>现在我们已经定义了一个函数，我们要在代码中尝试着调用它。调用函数的语法为 <code>functionname(parameters)</code>。调用示例函数的方法如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token function">calculateBill</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>完成了示例函数声明和调用后，我们就能写出一个完整的程序，并把商品总价打印在控制台上：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">calculateBill</span><span class="token punctuation">(</span>price<span class="token punctuation">,</span> no <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> totalPrice <span class="token operator">=</span> price <span class="token operator">*</span> no    <span class="token keyword">return</span> totalPrice<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      price<span class="token punctuation">,</span> no <span class="token operator">:=</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">6</span> <span class="token comment">// 定义 price 和 no,默认类型为 int</span>    totalPrice <span class="token operator">:=</span> <span class="token function">calculateBill</span><span class="token punctuation">(</span>price<span class="token punctuation">,</span> no<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Total price is"</span><span class="token punctuation">,</span> totalPrice<span class="token punctuation">)</span> <span class="token comment">// 打印到控制台上</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该程序在控制台上打印的结果为</p><pre class="line-numbers language-none"><code class="language-none">Total price is 540<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="多返回值"><a href="#多返回值" class="headerlink" title="多返回值"></a>多返回值</h2><p>Go 语言支持一个函数可以有多个返回值。我们来写个以矩形的长和宽为输入参数，计算并返回矩形面积和周长的函数 <code>rectProps</code>。矩形的面积是长度和宽度的乘积, 周长是长度和宽度之和的两倍。即：</p><ul><li><code>面积 = 长 * 宽</code></li><li><code>周长 = 2 * ( 长 + 宽 )</code></li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">rectProps</span><span class="token punctuation">(</span>length<span class="token punctuation">,</span> width <span class="token builtin">float64</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token builtin">float64</span><span class="token punctuation">,</span> <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> area <span class="token operator">=</span> length <span class="token operator">*</span> width    <span class="token keyword">var</span> perimeter <span class="token operator">=</span> <span class="token punctuation">(</span>length <span class="token operator">+</span> width<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span>    <span class="token keyword">return</span> area<span class="token punctuation">,</span> perimeter<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      area<span class="token punctuation">,</span> perimeter <span class="token operator">:=</span> <span class="token function">rectProps</span><span class="token punctuation">(</span><span class="token number">10.8</span><span class="token punctuation">,</span> <span class="token number">5.6</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Area %f Perimeter %f"</span><span class="token punctuation">,</span> area<span class="token punctuation">,</span> perimeter<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果一个函数有多个返回值，那么这些返回值必须用 <code>(</code> 和 <code>)</code> 括起来。<code>func rectProps(length, width float64)(float64, float64)</code> 示例函数有两个 float64 类型的输入参数 <code>length</code> 和 <code>width</code>，并返回两个 float64 类型的值。该程序在控制台上打印结果为</p><pre class="line-numbers language-none"><code class="language-none">Area 60.480000 Perimeter 32.800000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="命名返回值"><a href="#命名返回值" class="headerlink" title="命名返回值"></a>命名返回值</h2><p>从函数中可以返回一个命名值。一旦命名了返回值，可以认为这些值在函数第一行就被声明为变量了。</p><p>上面的 rectProps 函数也可用这个方式写成：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">rectProps</span><span class="token punctuation">(</span>length<span class="token punctuation">,</span> width <span class="token builtin">float64</span><span class="token punctuation">)</span><span class="token punctuation">(</span>area<span class="token punctuation">,</span> perimeter <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      area <span class="token operator">=</span> length <span class="token operator">*</span> width    perimeter <span class="token operator">=</span> <span class="token punctuation">(</span>length <span class="token operator">+</span> width<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span>    <span class="token keyword">return</span> <span class="token comment">// 不需要明确指定返回值，默认返回 area, perimeter 的值</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请注意, 函数中的 return 语句没有显式返回任何值。由于 <strong>area</strong> 和 <strong>perimeter</strong> 在函数声明中指定为返回值, 因此当遇到 return 语句时, 它们将自动从函数返回。</p><h2 id="空白符"><a href="#空白符" class="headerlink" title="空白符"></a>空白符</h2><p><strong>_</strong> 在 Go 中被用作空白符，可以用作表示任何类型的任何值。</p><p>我们继续以 <code>rectProps</code> 函数为例，该函数计算的是面积和周长。假使我们只需要计算面积，而并不关心周长的计算结果，该怎么调用这个函数呢？这时，空白符 <strong>_</strong> 就上场了。</p><p>下面的程序我们只用到了函数 <code>rectProps</code> 的一个返回值 <code>area</code></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">rectProps</span><span class="token punctuation">(</span>length<span class="token punctuation">,</span> width <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">float64</span><span class="token punctuation">,</span> <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> area <span class="token operator">=</span> length <span class="token operator">*</span> width    <span class="token keyword">var</span> perimeter <span class="token operator">=</span> <span class="token punctuation">(</span>length <span class="token operator">+</span> width<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span>    <span class="token keyword">return</span> area<span class="token punctuation">,</span> perimeter<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      area<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> <span class="token function">rectProps</span><span class="token punctuation">(</span><span class="token number">10.8</span><span class="token punctuation">,</span> <span class="token number">5.6</span><span class="token punctuation">)</span> <span class="token comment">// 返回值周长被丢弃</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Area %f "</span><span class="token punctuation">,</span> area<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在程序的 <code>area, _ := rectProps(10.8, 5.6)</code> 这一行，我们看到空白符 <code>_</code> 用来跳过不要的计算结果。</p></blockquote><p>匿名函数</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">a<span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"cccc"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>闭包</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token comment">//闭包函数，x地址都一样，用的是同一个x</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>f<span class="token operator">:=</span><span class="token function">closure</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">closure</span><span class="token punctuation">(</span>x <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span>  <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token keyword">return</span> x<span class="token operator">+</span>y<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>defer</p><p><img src="https://file.moetu.org/images/2019/06/19/006tNc79ly1g465mld64fj31ny0u0gvz1affc7da5a311a19.jpg" alt="006tNc79ly1g465mld64fj31ny0u0gvz1affc7da5a311a19.jpg"></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token comment">//闭包函数，x地址都一样，用的是同一个x</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//第一</span><span class="token comment">//fmt.Println("a")</span><span class="token comment">//defer fmt.Println("b")</span><span class="token comment">//defer fmt.Println("c")</span><span class="token comment">//第二</span><span class="token comment">//for i:=0;i&lt;3 ;i++  &#123;</span><span class="token comment">//defer fmt.Println(i)</span><span class="token comment">//&#125;</span><span class="token comment">//第三</span><span class="token comment">//闭包，i一直是引用</span><span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">3</span> <span class="token punctuation">;</span>i<span class="token operator">++</span>  <span class="token punctuation">&#123;</span><span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>panic和recover</p><p>panic基本使用</p><p>​        主动抛出异常, python中的raise</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"出错了"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>panci+recover</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//err不为nil时，表示恐慌状态（出错）</span><span class="token keyword">if</span> err<span class="token operator">:=</span><span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>err<span class="token operator">!=</span><span class="token boolean">nil</span><span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"恢复B"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"出错了"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分析如下结果：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> fs<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> i <span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">&#123;</span><span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"defer i = "</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"defer_closure i="</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>fs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"closure i ="</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token boolean">_</span> <span class="token punctuation">,</span>f<span class="token operator">:=</span><span class="token keyword">range</span> fs<span class="token punctuation">&#123;</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结构体struct</p><p><img src="https://file.moetu.org/images/2019/06/19/006tNc79ly1g465mm2336j31es0u0k1tfb8cd2b57b5dcb7c.jpg" alt="006tNc79ly1g465mm2336j31es0u0k1tfb8cd2b57b5dcb7c.jpg"></p><p>基本使用：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">type</span> test <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>a<span class="token operator">:=</span>test<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">type</span> person <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>Name <span class="token builtin">string</span>Age <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//a:=person&#123;&#125;</span><span class="token comment">////赋值</span><span class="token comment">//a.Name="lqz"</span><span class="token comment">//a.Age=18</span><span class="token comment">//初始化</span>a<span class="token operator">:=</span>person<span class="token punctuation">&#123;</span>Name<span class="token punctuation">:</span><span class="token string">"lqz"</span><span class="token punctuation">,</span>Age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment">//a 是值类型，在函数传递是值拷贝</span><span class="token function">A</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment">//要修改原值，需要用指针</span><span class="token function">B</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment">//或者在定义a的时候，直接就用地址</span>b<span class="token operator">:=</span><span class="token operator">&amp;</span>person<span class="token punctuation">&#123;</span>Name<span class="token punctuation">:</span><span class="token string">"lqz"</span><span class="token punctuation">,</span>Age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token comment">//也可以修改，不需要*</span>b<span class="token punctuation">.</span>Age<span class="token operator">=</span><span class="token number">99</span><span class="token comment">//(*b).Age=10</span><span class="token function">B</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">A</span><span class="token punctuation">(</span>per person<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>per<span class="token punctuation">.</span>Age<span class="token operator">=</span><span class="token number">100</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>per<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">B</span><span class="token punctuation">(</span>per <span class="token operator">*</span>person<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>per<span class="token punctuation">.</span>Age<span class="token operator">=</span><span class="token number">100</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>per<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>匿名结构体</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">a<span class="token operator">:=</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>Name <span class="token builtin">string</span>Age <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>Name<span class="token punctuation">:</span><span class="token string">"lqz"</span><span class="token punctuation">,</span>Age<span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结构体嵌套</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">type</span> person <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>Name <span class="token builtin">string</span>Age <span class="token builtin">int</span>Contact <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>Phone<span class="token punctuation">,</span>City <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>a<span class="token operator">:=</span>person<span class="token punctuation">&#123;</span>Name<span class="token punctuation">:</span><span class="token string">"lqz"</span><span class="token punctuation">,</span>Age<span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">&#125;</span>a<span class="token punctuation">.</span>Contact<span class="token punctuation">.</span>Phone<span class="token operator">=</span><span class="token string">"1222222"</span>a<span class="token punctuation">.</span>Contact<span class="token punctuation">.</span>City<span class="token operator">=</span><span class="token string">"shanghai"</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>匿名字段</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">type</span> person <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span><span class="token builtin">string</span><span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//顺序不能反</span>a<span class="token operator">:=</span>person<span class="token punctuation">&#123;</span><span class="token string">"lqz"</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结构体比较</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">type</span> person <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>Name <span class="token builtin">string</span>Age <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> person2 <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>Name <span class="token builtin">string</span>Age <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//顺序不能反</span>a<span class="token operator">:=</span>person<span class="token punctuation">&#123;</span><span class="token string">"lqz"</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">&#125;</span><span class="token comment">//b:=a</span>b<span class="token operator">:=</span>person<span class="token punctuation">&#123;</span><span class="token string">"lqz"</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token operator">==</span>b<span class="token punctuation">)</span>c<span class="token operator">:=</span>person2<span class="token punctuation">&#123;</span><span class="token string">"lqz"</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token operator">==</span>c<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>模拟继承，组合</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">type</span> human <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>Sex <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> teacher <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span><span class="token comment">//相当于匿名字段</span>humanName <span class="token builtin">string</span>Age <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>a<span class="token operator">:=</span>teacher<span class="token punctuation">&#123;</span>Name<span class="token punctuation">:</span><span class="token string">"lqz"</span><span class="token punctuation">,</span>Age<span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment">//给Sex赋值</span><span class="token comment">//方法一</span>b<span class="token operator">:=</span>teacher<span class="token punctuation">&#123;</span>Name<span class="token punctuation">:</span><span class="token string">"lqz"</span><span class="token punctuation">,</span>Age<span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">,</span>human<span class="token punctuation">:</span>human<span class="token punctuation">&#123;</span>Sex<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token comment">//b.human.Sex=0</span>b<span class="token punctuation">.</span>Sex<span class="token operator">=</span><span class="token number">10</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常量</title>
      <link href="2019/06/17/golang/5.chang-liang/"/>
      <url>2019/06/17/golang/5.chang-liang/</url>
      
        <content type="html"><![CDATA[<h1 id="5-常量"><a href="#5-常量" class="headerlink" title="5. 常量"></a>5. 常量</h1><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>在 Go 语言中，术语”常量”用于表示固定的值。比如 <code>5</code> 、<code>-89</code>、 <code>I love Go</code>、<code>67.89</code> 等等。</p><p>看看下面的代码:</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> a <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">50</span>  <span class="token keyword">var</span> b <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"I love Go"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>在上面的代码中，变量 a 和 b 分别被赋值为常量 50 和 I love GO</strong>。关键字 <code>const</code> 被用于表示常量，比如 <code>50</code> 和 <code>I love Go</code>。即使在上面的代码中我们没有明确的使用关键字 <code>const</code>，但是在 Go 的内部，它们是常量。</p><p>顾名思义，常量不能再重新赋值为其他的值。因此下面的程序将不能正常工作，它将出现一个编译错误: <code>cannot assign to a.</code>。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">55</span> <span class="token comment">// 允许</span>    a <span class="token operator">=</span> <span class="token number">89</span>       <span class="token comment">// 不允许重新赋值</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常量的值会在编译的时候确定。因为函数调用发生在运行时，所以不能将函数的返回值赋值给常量。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span>    <span class="token string">"math"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Hello, playground"</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">Sqrt</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>   <span class="token comment">// 允许</span>    <span class="token keyword">const</span> b <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">Sqrt</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">// 不允许</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的程序中，因为 <code>a</code> 是变量，因此我们可以将函数 <code>math.Sqrt(4)</code> 的返回值赋值给它（我们将在单独的地方详细讨论函数）。</p><p> <code>b</code> 是一个常量，它的值需要在编译的时候就确定。函数 <code>math.Sqrt(4)</code> 只会在运行的时候计算，因此 <code>const b = math.Sqrt(4)</code> 将会抛出错误 <code>error main.go:11: const initializer math.Sqrt(4) is not a constant)</code></p><h3 id="字符串常量"><a href="#字符串常量" class="headerlink" title="字符串常量"></a>字符串常量</h3><p>双引号中的任何值都是 Go 中的字符串常量。例如像 <code>Hello World</code> 或 <code>Sam</code> 等字符串在 Go 中都是常量。</p><p>什么类型的字符串属于常量？答案是他们是无类型的。</p><p>像 <code>Hello World</code> 这样的字符串常量没有任何类型。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">const</span> hello <span class="token operator">=</span> <span class="token string">"Hello World"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面的例子，我们把 <code>Hello World</code> 分配给常量 <code>hello</code>。现在常量 <code>hello</code> 有类型吗？答案是没有。常量仍然没有类型。</p><p>Go 是一门强类型语言，所有的变量必须有明确的类型。那么, 下面的程序是如何将无类型的常量 <code>Sam</code> 赋值给变量 <code>name</code> 的呢？</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"Sam"</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"type %T value %v"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>答案是无类型的常量有一个与它们相关联的默认类型，并且当且仅当一行代码需要时才提供它。在声明中 var name = “Sam” ， name 需要一个类型，它从字符串常量 Sam 的默认类型中获取。</strong></p><p>有没有办法创建一个带类型的常量？答案是可以的。以下代码创建一个有类型常量。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">const</span> typedhello <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"Hello World"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面代码中， <code>typedhello</code> 就是一个 <code>string</code> 类型的常量。</p><p>Go 是一个强类型的语言，在分配过程中混合类型是不允许的。让我们通过以下程序看看这句话是什么意思。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">var</span> defaultName <span class="token operator">=</span> <span class="token string">"Sam"</span> <span class="token comment">// 允许</span>        <span class="token keyword">type</span> myString <span class="token builtin">string</span>        <span class="token keyword">var</span> customName myString <span class="token operator">=</span> <span class="token string">"Sam"</span> <span class="token comment">// 允许</span>        customName <span class="token operator">=</span> defaultName <span class="token comment">// 不允许</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的代码中，我们首先创建一个变量 <code>defaultName</code> 并分配一个常量 <code>Sam</code> 。<strong>常量 Sam 的默认类型是 string ，所以在赋值后 defaultName 是 string 类型的。</strong></p><p>下一行，我们将创建一个新类型 <code>myString</code>，它是 <code>string</code> 的别名。</p><p>然后我们创建一个 <code>myString</code> 的变量 <code>customName</code> 并且给他赋值一个常量 <code>Sam</code> 。因为常量 <code>Sam</code> 是无类型的，它可以分配给任何字符串变量。因此这个赋值是允许的，<code>customName</code> 的类型是 <code>myString</code>。</p><p>现在，我们有一个类型为 <code>string</code> 的变量 <code>defaultName</code> 和另一个类型为 <code>myString</code> 的变量 <code>customName</code>。即使我们知道这个 <code>myString</code> 是 <code>string</code> 类型的别名。Go 的类型策略不允许将一种类型的变量赋值给另一种类型的变量。因此将 <code>defaultName</code> 赋值给 <code>customName</code> 是不允许的，编译器会抛出一个错误 <code>main.go:7:20: cannot use defaultName (type string) as type myString in assignmen</code>。</p><h3 id="布尔常量"><a href="#布尔常量" class="headerlink" title="布尔常量"></a>布尔常量</h3><p>布尔常量和字符串常量没有什么不同。他们是两个无类型的常量 <code>true</code> 和 <code>false</code>。字符串常量的规则适用于布尔常量，所以在这里我们不再重复。以下是解释布尔常量的简单程序。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> trueConst <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token keyword">type</span> myBool <span class="token builtin">bool</span>    <span class="token keyword">var</span> defaultBool <span class="token operator">=</span> trueConst <span class="token comment">// 允许</span>    <span class="token keyword">var</span> customBool myBool <span class="token operator">=</span> trueConst <span class="token comment">// 允许</span>    defaultBool <span class="token operator">=</span> customBool <span class="token comment">// 不允许</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的程序是自我解释的。</p><h3 id="数字常量"><a href="#数字常量" class="headerlink" title="数字常量"></a>数字常量</h3><p>数字常量包含整数、浮点数和复数的常量。数字常量中有一些微妙之处。</p><p>让我们看一些例子来说清楚。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">5</span>    <span class="token keyword">var</span> intVar <span class="token builtin">int</span> <span class="token operator">=</span> a    <span class="token keyword">var</span> int32Var <span class="token builtin">int32</span> <span class="token operator">=</span> a    <span class="token keyword">var</span> float64Var <span class="token builtin">float64</span> <span class="token operator">=</span> a    <span class="token keyword">var</span> complex64Var <span class="token builtin">complex64</span> <span class="token operator">=</span> a    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"intVar"</span><span class="token punctuation">,</span>intVar<span class="token punctuation">,</span> <span class="token string">"\nint32Var"</span><span class="token punctuation">,</span> int32Var<span class="token punctuation">,</span> <span class="token string">"\nfloat64Var"</span><span class="token punctuation">,</span> float64Var<span class="token punctuation">,</span> <span class="token string">"\ncomplex64Var"</span><span class="token punctuation">,</span>complex64Var<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的程序，常量 <code>a</code> 是没有类型的，它的值是 <code>5</code> 。您可能想知道 <code>a</code> 的默认类型是什么，如果它确实有一个的话, 那么我们如何将它分配给不同类型的变量。答案在于 <code>a</code> 的语法。下面的程序将使事情更加清晰。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">5</span>    <span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token number">5.6</span>    <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">6i</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"i's type %T, f's type %T, c's type %T"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> f<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的程序中，每个变量的类型由数字常量的语法决定。<code>5</code> 在语法中是整数， <code>5.6</code> 是浮点数，<code>5+6i</code> 的语法是复数。当我们运行上面的程序，它会打印出 <code>i&#39;s type int, f&#39;s type float64, c&#39;s type complex128</code>。</p><p>现在我希望下面的程序能够正确的工作。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">5</span>    <span class="token keyword">var</span> intVar <span class="token builtin">int</span> <span class="token operator">=</span> a    <span class="token keyword">var</span> int32Var <span class="token builtin">int32</span> <span class="token operator">=</span> a    <span class="token keyword">var</span> float64Var <span class="token builtin">float64</span> <span class="token operator">=</span> a    <span class="token keyword">var</span> complex64Var <span class="token builtin">complex64</span> <span class="token operator">=</span> a    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"intVar"</span><span class="token punctuation">,</span>intVar<span class="token punctuation">,</span> <span class="token string">"\nint32Var"</span><span class="token punctuation">,</span> int32Var<span class="token punctuation">,</span> <span class="token string">"\nfloat64Var"</span><span class="token punctuation">,</span> float64Var<span class="token punctuation">,</span> <span class="token string">"\ncomplex64Var"</span><span class="token punctuation">,</span>complex64Var<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个程序中， <code>a</code> 的值是 <code>5</code> ，<code>a</code> 的语法是通用的（它可以代表一个浮点数、整数甚至是一个没有虚部的复数），因此可以将其分配给任何兼容的类型。这些常量的默认类型可以被认为是根据上下文在运行中生成的。 <code>var intVar int = a</code> 要求 <code>a</code> 是 <code>int</code>，所以它变成一个 <code>int</code> 常量。 <code>var complex64Var complex64 = a</code> 要求 <code>a</code> 是 <code>complex64</code>，因此它变成一个复数类型。很简单的:)。</p><h3 id="数字表达式"><a href="#数字表达式" class="headerlink" title="数字表达式"></a>数字表达式</h3><p>数字常量可以在表达式中自由混合和匹配，只有当它们被分配给变量或者在需要类型的代码中的任何地方使用时，才需要类型。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">5.9</span><span class="token operator">/</span><span class="token number">8</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"a's type %T value %v"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的程序中， <code>5.9</code> 在语法中是浮点型，<code>8</code> 是整型，<code>5.9/8</code> 是允许的，因为两个都是数字常量。除法的结果是 <code>0.7375</code> 是一个浮点型，所以 <code>a</code> 的类型是浮点型。这个程序的输出结果是: <code>a&#39;s type float64 value 0.7375</code>。</p>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类型</title>
      <link href="2019/06/17/golang/4.lei-xing/"/>
      <url>2019/06/17/golang/4.lei-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="4-类型"><a href="#4-类型" class="headerlink" title="4. 类型"></a>4. 类型</h1><p>下面是 Go 支持的基本类型：</p><ul><li>bool</li><li>数字类型<ul><li>int8, int16, int32, int64, int</li><li>uint8, uint16, uint32, uint64, uint</li><li>float32, float64</li><li>complex64, complex128</li><li>byte</li><li>rune</li></ul></li><li>string</li></ul><h3 id="bool"><a href="#bool" class="headerlink" title="bool"></a>bool</h3><p>bool 类型表示一个布尔值，值为 true 或者 false。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      a <span class="token operator">:=</span> <span class="token boolean">true</span>    b <span class="token operator">:=</span> <span class="token boolean">false</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"a:"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token string">"b:"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span>    c <span class="token operator">:=</span> a <span class="token operator">&amp;&amp;</span> b    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"c:"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span>    d <span class="token operator">:=</span> a <span class="token operator">||</span> b    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"d:"</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的程序中，a 赋值为 true，b 赋值为 false。</p><p>c 赋值为 a &amp;&amp; b。仅当 a 和 b 都为 true 时，操作符 &amp;&amp; 才返回 true。因此，在这里 c 为 false。</p><p>当 a 或者 b 为 true 时，操作符 || 返回 true。在这里，由于 a 为 true，因此 d 也为 true。我们将得到程序的输出如下。</p><pre class="line-numbers language-none"><code class="language-none">a: true b: false  c: false  d: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="有符号整型"><a href="#有符号整型" class="headerlink" title="有符号整型"></a>有符号整型</h3><p><strong>int8</strong>：表示 8 位有符号整型<br><strong>大小</strong>：8 位<br><strong>范围</strong>：-128～127</p><p><strong>int16</strong>：表示 16 位有符号整型<br><strong>大小</strong>：16 位<br><strong>范围</strong>：-32768～32767</p><p><strong>int32</strong>：表示 32 位有符号整型<br><strong>大小</strong>：32 位<br><strong>范围</strong>：-2147483648～2147483647</p><p><strong>int64</strong>：表示 64 位有符号整型<br><strong>大小</strong>：64 位<br><strong>范围</strong>：-9223372036854775808～9223372036854775807</p><p><strong>int</strong>：根据不同的底层平台（Underlying Platform），表示 32 或 64 位整型。除非对整型的大小有特定的需求，否则你通常应该使用 <em>int</em> 表示整型。<br><strong>大小</strong>：在 32 位系统下是 32 位，而在 64 位系统下是 64 位。<br><strong>范围</strong>：在 32 位系统下是 -2147483648～2147483647，而在 64 位系统是 -9223372036854775808～9223372036854775807。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> a <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">89</span>    b <span class="token operator">:=</span> <span class="token number">95</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"value of a is"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token string">"and b is"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://play.golang.org/p/NyDPsjkma3">在线运行程序</a></p><p>上面程序会输出 <code>value of a is 89 and b is 95</code>。</p><p>在上述程序中，a 是 int 类型，而 b 的类型通过赋值（95）推断得出。上面我们提到，int 类型的大小在 32 位系统下是 32 位，而在 64 位系统下是 64 位。接下来我们会证实这种说法。</p><p>在 Printf 方法中，使用 <strong>%T</strong> 格式说明符（Format Specifier），可以打印出变量的类型。Go 的 <a href="https://golang.org/pkg/unsafe/">unsafe</a> 包提供了一个 <a href="https://golang.org/pkg/unsafe/#Sizeof">Sizeof</a> 函数，该函数接收变量并返回它的字节大小。<em>unsafe</em> 包应该小心使用，因为使用 unsafe 包可能会带来可移植性问题。不过出于本教程的目的，我们是可以使用的。</p><p>下面程序会输出变量 a 和 b 的类型和大小。格式说明符 <code>%T</code> 用于打印类型，而 <code>%d</code> 用于打印字节大小。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span>    <span class="token string">"unsafe"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> a <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">89</span>    b <span class="token operator">:=</span> <span class="token number">95</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"value of a is"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token string">"and b is"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"type of a is %T, size of a is %d"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// a 的类型和大小</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"\ntype of b is %T, size of b is %d"</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Sizeof</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// b 的类型和大小</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://play.golang.org/p/mFsmjVk5oc">在线运行程序</a></p><p>以上程序会输出：</p><pre class="line-numbers language-none"><code class="language-none">value of a is 89 and b is 95  type of a is int, size of a is 4  type of b is int, size of b is 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>从上面的输出，我们可以推断出 a 和 b 为 <em>int</em> 类型，且大小都是 32 位（4 字节）。如果你在 64 位系统上运行上面的代码，会有不同的输出。在 64 位系统下，a 和 b 会占用 64 位（8 字节）的大小。</p><h3 id="无符号整型"><a href="#无符号整型" class="headerlink" title="无符号整型"></a>无符号整型</h3><p><strong>uint8</strong>：表示 8 位无符号整型<br><strong>大小</strong>：8 位<br><strong>范围</strong>：0～255</p><p><strong>uint16</strong>：表示 16 位无符号整型<br><strong>大小</strong>：16 位<br><strong>范围</strong>：0～65535</p><p><strong>uint32</strong>：表示 32 位无符号整型<br><strong>大小</strong>：32 位<br><strong>范围</strong>：0～4294967295</p><p><strong>uint64</strong>：表示 64 位无符号整型<br><strong>大小</strong>：64 位<br><strong>范围</strong>：0～18446744073709551615</p><p><strong>uint</strong>：根据不同的底层平台，表示 32 或 64 位无符号整型。<br><strong>大小</strong>：在 32 位系统下是 32 位，而在 64 位系统下是 64 位。<br><strong>范围</strong>：在 32 位系统下是 0～4294967295，而在 64 位系统是 0～18446744073709551615。</p><h3 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h3><p><strong>float32</strong>：32 位浮点数<br><strong>float64</strong>：64 位浮点数</p><p>下面一个简单程序演示了整型和浮点型的运用。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      a<span class="token punctuation">,</span> b <span class="token operator">:=</span> <span class="token number">5.67</span><span class="token punctuation">,</span> <span class="token number">8.97</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"type of a %T b %T\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>    sum <span class="token operator">:=</span> a <span class="token operator">+</span> b    diff <span class="token operator">:=</span> a <span class="token operator">-</span> b    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"sum"</span><span class="token punctuation">,</span> sum<span class="token punctuation">,</span> <span class="token string">"diff"</span><span class="token punctuation">,</span> diff<span class="token punctuation">)</span>    no1<span class="token punctuation">,</span> no2 <span class="token operator">:=</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">89</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"sum"</span><span class="token punctuation">,</span> no1<span class="token operator">+</span>no2<span class="token punctuation">,</span> <span class="token string">"diff"</span><span class="token punctuation">,</span> no1<span class="token operator">-</span>no2<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>a 和 b 的类型根据赋值推断得出。在这里，a 和 b 的类型为 float64（float64 是浮点数的默认类型）。我们把 a 和 b  的和赋值给变量 sum，把 b 和 a 的差赋值给 diff，接下来打印 sum 和 diff。no1 和 no2  也进行了相同的计算。上述程序将会输出：</p><pre class="line-numbers language-none"><code class="language-none">type of a float64 b float64  sum 14.64 diff -3.3000000000000007  sum 145 diff -33<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="复数类型"><a href="#复数类型" class="headerlink" title="复数类型"></a>复数类型</h3><p><strong>complex64</strong>：实部和虚部都是 float32 类型的的复数。<br><strong>complex128</strong>：实部和虚部都是 float64 类型的的复数。</p><p>内建函数 <strong>complex</strong>用于创建一个包含实部和虚部的复数。complex 函数的定义如下：</p><pre class="line-numbers language-none"><code class="language-none">func complex(r, i FloatType) ComplexType<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该函数的参数分别是实部和虚部，并返回一个复数类型。实部和虚部应该是相同类型，也就是 float32 或  float64。如果实部和虚部都是 float32 类型，则函数会返回一个 complex64 类型的复数。如果实部和虚部都是 float64  类型，则函数会返回一个 complex128 类型的复数。</p><p>还可以使用简短语法来创建复数：</p><pre class="line-numbers language-none"><code class="language-none">c :&#x3D; 6 + 7i<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下面我们编写一个简单的程序来理解复数。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      c1 <span class="token operator">:=</span> <span class="token function">complex</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span>    c2 <span class="token operator">:=</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">27i</span>    cadd <span class="token operator">:=</span> c1 <span class="token operator">+</span> c2    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"sum:"</span><span class="token punctuation">,</span> cadd<span class="token punctuation">)</span>    cmul <span class="token operator">:=</span> c1 <span class="token operator">*</span> c2    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"product:"</span><span class="token punctuation">,</span> cmul<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的程序里，c1 和 c2 是两个复数。c1的实部为 5，虚部为 7。c2 的实部为8，虚部为 27。c1 和 c2 的和赋值给 <code>cadd</code> ，而 c1 和 c2 的乘积赋值给 <code>cmul</code>。该程序将输出：</p><pre class="line-numbers language-none"><code class="language-none">sum: (13+34i)  product: (-149+191i)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="其他数字类型"><a href="#其他数字类型" class="headerlink" title="其他数字类型"></a>其他数字类型</h3><p><strong>byte</strong> 是 uint8 的别名。<br><strong>rune</strong> 是 int32 的别名。</p><p>在学习字符串的时候，我们会详细讨论 byte 和 rune。</p><h3 id="string-类型"><a href="#string-类型" class="headerlink" title="string 类型"></a>string 类型</h3><p>在 Golang 中，字符串是字节的集合。如果你现在还不理解这个定义，也没有关系。我们可以暂且认为一个字符串就是由很多字符组成的。我们后面会在一个教程中深入学习字符串。 下面编写一个使用字符串的程序。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      first <span class="token operator">:=</span> <span class="token string">"Naveen"</span>    last <span class="token operator">:=</span> <span class="token string">"Ramanathan"</span>    name <span class="token operator">:=</span> first <span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span> last    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"My name is"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面程序中，first 赋值为字符串 “Naveen”，last 赋值为字符串 “Ramanathan”。+ 操作符可以用于拼接字符串。我们拼接了 first、空格和 last，并将其赋值给 name。上述程序将打印输出 <code>My name is Naveen Ramanathan</code>。</p><p>还有许多应用于字符串上面的操作，我们将会在一个单独的教程里看见它们。</p><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>Go 有着非常严格的强类型特征。Go 没有自动类型提升或类型转换。我们通过一个例子说明这意味着什么。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      i <span class="token operator">:=</span> <span class="token number">55</span>      <span class="token comment">//int</span>    j <span class="token operator">:=</span> <span class="token number">67.8</span>    <span class="token comment">//float64</span>    sum <span class="token operator">:=</span> i <span class="token operator">+</span> j <span class="token comment">//不允许 int + float64</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码在 C 语言中是完全合法的，然而在 Go 中，却是行不通的。i 的类型是 int ，而 j 的类型是 float64 ，我们正试图把两个不同类型的数相加，Go 不允许这样的操作。如果运行程序，你会得到 <code>main.go:10: invalid operation: i + j (mismatched types int and float64)</code>。</p><p>要修复这个错误，i 和 j 应该是相同的类型。在这里，我们把 j 转换为 int 类型。把 v 转换为 T 类型的语法是 T(v)。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      i <span class="token operator">:=</span> <span class="token number">55</span>      <span class="token comment">//int</span>    j <span class="token operator">:=</span> <span class="token number">67.8</span>    <span class="token comment">//float64</span>    sum <span class="token operator">:=</span> i <span class="token operator">+</span> <span class="token function">int</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token comment">//j is converted to int</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在，当你运行上面的程序时，会看见输出 <code>122</code>。</p><p>赋值的情况也是如此。把一个变量赋值给另一个不同类型的变量，需要显式的类型转换。下面程序说明了这一点。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      i <span class="token operator">:=</span> <span class="token number">10</span>    <span class="token keyword">var</span> j <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token function">float64</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment">// 若没有显式转换，该语句会报错</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"j"</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在第 9 行，i 转换为 float64 类型，接下来赋值给 j。如果不进行类型转换，当你试图把 i 赋值给 j 时，编译器会抛出错误。</p>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>变量</title>
      <link href="2019/06/17/golang/3.bian-liang/"/>
      <url>2019/06/17/golang/3.bian-liang/</url>
      
        <content type="html"><![CDATA[<h1 id="3-变量"><a href="#3-变量" class="headerlink" title="3. 变量"></a>3. 变量</h1><h3 id="变量是什么"><a href="#变量是什么" class="headerlink" title="变量是什么"></a>变量是什么</h3><p>变量指定了某存储单元（Memory Location）的名称，该存储单元会存储特定类型的值。在 Go 中，有多种语法用于声明变量。</p><h3 id="声明单个变量"><a href="#声明单个变量" class="headerlink" title="声明单个变量"></a>声明单个变量</h3><p><strong>var name type</strong> 是声明单个变量的语法。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> age <span class="token builtin">int</span> <span class="token comment">// 变量声明</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"my age is"</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>语句 <code>var age int</code> 声明了一个 int 类型的变量，名字为 age。我们还没有给该变量赋值。如果变量未被赋值，Go 会自动地将其初始化，赋值该变量类型的零值（Zero Value）。本例中 age 就被赋值为 0。如果你运行该程序，你会看到如下输出：</p><pre class="line-numbers language-none"><code class="language-none">my age is 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>变量可以赋值为本类型的任何值。上一程序中的 age 可以赋值为任何整型值（Integer Value）。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> age <span class="token builtin">int</span> <span class="token comment">// 变量声明</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"my age is"</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span>    age <span class="token operator">=</span> <span class="token number">29</span> <span class="token comment">// 赋值</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"my age is"</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span>    age <span class="token operator">=</span> <span class="token number">54</span> <span class="token comment">// 赋值</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"my new age is"</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的程序会有如下输出：</p><pre class="line-numbers language-none"><code class="language-none">my age is  0  my age is 29  my new age is 54<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="声明变量并初始化"><a href="#声明变量并初始化" class="headerlink" title="声明变量并初始化"></a>声明变量并初始化</h3><p>声明变量的同时可以给定初始值。 <strong>var name type = initialvalue</strong> 的语法用于声明变量并初始化。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> age <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">29</span> <span class="token comment">// 声明变量并初始化</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"my age is"</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的程序中，age 是具有初始值 29 的 int 类型变量。如果你运行上面的程序，你可以看见下面的输出，证实 age 已经被初始化为 29。</p><pre class="line-numbers language-none"><code class="language-none">my age is 29<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="类型推断（Type-Inference）"><a href="#类型推断（Type-Inference）" class="headerlink" title="类型推断（Type Inference）"></a>类型推断（Type Inference）</h3><p>如果变量有初始值，那么 Go 能够自动推断具有初始值的变量的类型。因此，如果变量有初始值，就可以在变量声明中省略 <code>type</code>。</p><p>如果变量声明的语法是 <strong>var name = initialvalue</strong>，Go 能够根据初始值自动推断变量的类型。</p><p>在下面的例子中，你可以看到在第 6 行，我们省略了变量 <code>age</code> 的 <code>int</code> 类型，Go 依然推断出了它是 int 类型。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">29</span> <span class="token comment">// 可以推断类型</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"my age is"</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="声明多个变量"><a href="#声明多个变量" class="headerlink" title="声明多个变量"></a>声明多个变量</h3><p>Go 能够通过一条语句声明多个变量。</p><p>声明多个变量的语法是 <strong>var name1, name2 type = initialvalue1, initialvalue2</strong>。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> width<span class="token punctuation">,</span> height <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">50</span> <span class="token comment">// 声明多个变量</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"width is"</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> <span class="token string">"height is"</span><span class="token punctuation">,</span> heigh<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述程序将在标准输出打印 <code>width is 100 height is 50</code>。</p><p>你可能已经想到，如果 width 和 height 省略了初始化，它们的初始值将赋值为 0。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> width<span class="token punctuation">,</span> height <span class="token builtin">int</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"width is"</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> <span class="token string">"height is"</span><span class="token punctuation">,</span> height<span class="token punctuation">)</span>    width <span class="token operator">=</span> <span class="token number">100</span>    height <span class="token operator">=</span> <span class="token number">50</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"new width is"</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> <span class="token string">"new height is "</span><span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的程序将会打印：</p><pre class="line-numbers language-none"><code class="language-none">width is 0 height is 0  new width is 100 new height is  50<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在有些情况下，我们可能会想要在一个语句中声明不同类型的变量。其语法如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> <span class="token punctuation">(</span>      name1 <span class="token operator">=</span> initialvalue1<span class="token punctuation">,</span>    name2 <span class="token operator">=</span> initialvalue2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用上述语法，下面的程序声明不同类型的变量。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> <span class="token punctuation">(</span>        name   <span class="token operator">=</span> <span class="token string">"naveen"</span>        age    <span class="token operator">=</span> <span class="token number">29</span>        height <span class="token builtin">int</span>    <span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"my name is"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token string">", age is"</span><span class="token punctuation">,</span> age<span class="token punctuation">,</span> <span class="token string">"and height is"</span><span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们声明了 <strong>string 类型的 name、int 类型的 age 和 height</strong>（我们将会在下一教程中讨论 golang 所支持的变量类型）。运行上面的程序会产生输出 <code>my name is naveen , age is 29 and height is 0</code>。</p><h3 id="简短声明"><a href="#简短声明" class="headerlink" title="简短声明"></a>简短声明</h3><p>Go 也支持一种声明变量的简洁形式，称为简短声明（Short Hand Declaration），该声明使用了 <strong>:=</strong> 操作符。</p><p>声明变量的简短语法是 <strong>name := initialvalue</strong>。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      name<span class="token punctuation">,</span> age <span class="token operator">:=</span> <span class="token string">"naveen"</span><span class="token punctuation">,</span> <span class="token number">29</span> <span class="token comment">// 简短声明</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"my name is"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token string">"age is"</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行上面的程序，可以看到输出为 <code>my name is naveen age is 29</code>。</p><p>简短声明要求 <strong>:=</strong> 操作符左边的所有变量都有初始值。下面程序将会抛出错误 <code>cannot assign 1 values to 2 variables</code>，这是因为 <strong>age 没有被赋值</strong>。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      name<span class="token punctuation">,</span> age <span class="token operator">:=</span> <span class="token string">"naveen"</span> <span class="token comment">//error</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"my name is"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token string">"age is"</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简短声明的语法要求 <strong>:=</strong> 操作符的左边至少有一个变量是尚未声明的。考虑下面的程序：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    a<span class="token punctuation">,</span> b <span class="token operator">:=</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span> <span class="token comment">// 声明变量a和b</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"a is"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token string">"b is"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span>    b<span class="token punctuation">,</span> c <span class="token operator">:=</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span> <span class="token comment">// b已经声明，但c尚未声明</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"b is"</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token string">"c is"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span>    b<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">90</span> <span class="token comment">// 给已经声明的变量b和c赋新值</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"changed b is"</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token string">"c is"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面程序中的第 8 行，由于 b 已经被声明，而 c 尚未声明，因此运行成功并且输出：</p><pre class="line-numbers language-none"><code class="language-none">a is 20 b is 30  b is 40 c is 50  changed b is 80 c is 90<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>但是如果我们运行下面的程序:</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      a<span class="token punctuation">,</span> b <span class="token operator">:=</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span> <span class="token comment">// 声明a和b</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"a is"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token string">"b is"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span>    a<span class="token punctuation">,</span> b <span class="token operator">:=</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span> <span class="token comment">// 错误，没有尚未声明的变量</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面运行后会抛出 <code>no new variables on left side of :=</code> 的错误，这是因为 a 和 b 的变量已经声明过了，**:=** 的左边并没有尚未声明的变量。</p><p>变量也可以在运行时进行赋值。考虑下面的程序：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span>    <span class="token string">"math"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      a<span class="token punctuation">,</span> b <span class="token operator">:=</span> <span class="token number">145.8</span><span class="token punctuation">,</span> <span class="token number">543.8</span>    c <span class="token operator">:=</span> math<span class="token punctuation">.</span><span class="token function">Min</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"minimum value is "</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的程序中，c 的值是运行过程中计算得到的，即 a 和 b 的最小值。上述程序会打印：</p><pre class="line-numbers language-none"><code class="language-none">minimum value is  145.8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于 Go 是强类型（Strongly Typed）语言，因此不允许某一类型的变量赋值为其他类型的值。下面的程序会抛出错误 <code>cannot use &quot;naveen&quot; (type string) as type int in assignment</code>，这是因为 age 本来声明为 int 类型，而我们却尝试给它赋字符串类型的值。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      age <span class="token operator">:=</span> <span class="token number">29</span>      <span class="token comment">// age是int类型</span>    age <span class="token operator">=</span> <span class="token string">"naveen"</span> <span class="token comment">// 错误，尝试赋值一个字符串给int类型变量</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hello world</title>
      <link href="2019/06/17/golang/2.hello-world/"/>
      <url>2019/06/17/golang/2.hello-world/</url>
      
        <content type="html"><![CDATA[<h1 id="2-Hello-World"><a href="#2-Hello-World" class="headerlink" title="2. Hello World"></a>2. Hello World</h1><h2 id="建立-Go-工作区"><a href="#建立-Go-工作区" class="headerlink" title="建立 Go 工作区"></a>建立 Go 工作区</h2><p>在编写代码之前，我们首先应该建立 Go 的工作区（Workspace）。</p><p>在 <strong>Mac 或 Linux</strong> 操作系统下，Go 工作区应该设置在 <strong>$HOME/go</strong>。所以我们要在 <strong>$HOME</strong> 目录下创建 <strong>go</strong> 目录。</p><p>而在 <strong>Windows</strong> 下，工作区应该设置在 <strong>C:\Users\YourName\go</strong>。所以请将 <strong>go</strong> 目录放置在 <strong>C:\Users\YourName</strong>。</p><p>其实也可以通过设置 GOPATH 环境变量，用其他目录来作为工作区。但为了简单起见，我们采用上面提到的放置方法。</p><p>所有 Go 源文件都应该放置在工作区里的 <strong>src</strong> 目录下。请在刚添加的 <strong>go</strong> 目录下面创建目录 <strong>src</strong>。</p><p>所有 Go 项目都应该依次在 src 里面设置自己的子目录。我们在 src 里面创建一个目录 <strong>hello</strong> 来放置整个 hello world 项目。</p><p>创建上述目录之后，其目录结构如下：</p><pre class="line-numbers language-none"><code class="language-none">go  src    hello<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在我们刚刚创建的 hello 目录下，在 <strong>helloworld.go</strong> 文件里保存下面的程序。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建该程序之后，其目录结构如下：</p><pre class="line-numbers language-none"><code class="language-none">go  src    hello      helloworld.go<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="运行-Go-程序"><a href="#运行-Go-程序" class="headerlink" title="运行 Go 程序"></a>运行 Go 程序</h2><p>运行 Go 程序有多种方式，我们下面依次介绍。</p><p>1.使用 <strong>go run</strong> 命令 - 在命令提示符旁，输入 <code>go run workspacepath/src/hello/helloworld.go</code>。</p><p>上述命令中的 <strong>workspacepath</strong> 应该替换为你自己的工作区路径（Windows 下的 <strong>C:/Users/YourName/go</strong>，Linux 或 Mac 下的 <strong>$HOME/go</strong>）。</p><p>在控制台上会看见 <code>Hello World</code> 的输出。</p><p>2.使用 <strong>go install</strong> 命令 - 运行 <code>go install hello</code>，接着可以用 <code>workspacepath/bin/hello</code> 来运行该程序。</p><p>上述命令中的 <strong>workspacepath</strong> 应该替换为你自己的工作区路径（Windows 下的 <strong>C:/Users/YourName/go</strong>，Linux 或 Mac 下的 <strong>$HOME/go</strong>）。</p><p>当你输入 <strong>go install hello</strong> 时，go 工具会在工作区中搜索 hello 包（hello 称之为包，我们后面会更加详细地讨论包）。接下来它会在工作区的 bin 目录下，创建一个名为 <code>hello</code>（Windows 下名为 <code>hello.exe</code>）的二进制文件。运行 <strong>go install hello</strong> 后，其目录结构如下所示：</p><pre class="line-numbers language-none"><code class="language-none">go  bin    hello  src    hello      helloworld.go<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.第 3 种运行程序的好方法是使用 go playground。尽管它有自身的限制，但该方法对于运行简单的程序非常方便。我已经在 playground 上创建了一个 hello world 程序。<a href="https://play.golang.org/p/VtXafkQHYe">点击这里</a> 在线运行程序。 你可以使用 <a href="https://play.golang.org/">go playground</a> 与其他人分享你的源代码。</p><h3 id="简述-hello-world-程序"><a href="#简述-hello-world-程序" class="headerlink" title="简述 hello world 程序"></a>简述 hello world 程序</h3><p>下面就是我们刚写下的 hello world 程序。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main <span class="token comment">//1</span><span class="token keyword">import</span> <span class="token string">"fmt"</span> <span class="token comment">//2</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//3  </span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span> <span class="token comment">//4</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在简单介绍每一行大概都做了些什么，在以后的教程中还会深入探讨每个部分。</p><p><strong>package main - 每一个 Go 文件都应该在开头进行 package name 的声明</strong>（译注：只有可执行程序的包名应当为 main）。包（Packages）用于代码的封装与重用，这里的包名称是<code>main</code>。</p><p><strong>import “fmt”</strong> - 我们引入了 fmt 包，用于在 main 函数里面打印文本到标准输出。</p><p><strong>func main()</strong> - main 是一个特殊的函数。整个程序就是从 main 函数开始运行的。<strong>main 函数必须放置在 main 包中</strong>。<code>&#123;</code> 和 <code>&#125;</code> 分别表示 main 函数的开始和结束部分。</p><p><strong>fmt.Println(“Hello World”)</strong> - <strong>fmt</strong> 包中的 <strong>Println</strong> 函数用于把文本写入标准输出。</p>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go介绍与安装</title>
      <link href="2019/06/17/golang/1.jie-shao-yu-an-zhuang/"/>
      <url>2019/06/17/golang/1.jie-shao-yu-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h1 id="1-介绍与安装"><a href="#1-介绍与安装" class="headerlink" title="1. 介绍与安装"></a>1. 介绍与安装</h1><h2 id="Golang-是什么"><a href="#Golang-是什么" class="headerlink" title="Golang 是什么"></a>Golang 是什么</h2><p>Go 亦称为 Golang（按照 Rob Pike 说法，语言叫做 Go，Golang 只是官方网站的网址），是由谷歌开发的一个开源的编译型的静态语言。</p><p>Golang 的主要关注点是使得高可用性和可扩展性的 Web 应用的开发变得简便容易。（Go 的定位是系统编程语言，只是对 Web 开发支持较好）</p><h2 id="为何选择-Golang"><a href="#为何选择-Golang" class="headerlink" title="为何选择 Golang"></a>为何选择 Golang</h2><p>既然有很多其他编程语言可以做同样的工作，如 Python，Ruby，Nodejs 等，为什么要选择 Golang 作为服务端编程语言？</p><p>以下是我使用 Go 语言时发现的一些优点：</p><ul><li>并发是语言的一部分（并非通过标准库实现），所以编写多线程程序会是一件很容易的事。后续教程将会讨论到，并发是通过 Goroutines 和 channels 机制实现的。</li><li>Golang 是一种编译型语言。源代码会编译为二进制机器码。而在解释型语言中没有这个过程，如 Nodejs 中的 JavaScript。</li><li>语言规范十分简洁。所有规范都在一个页面展示，你甚至都可以用它来编写你自己的编译器呢。</li><li>Go 编译器支持静态链接。所有 Go 代码都可以静态链接为一个大的二进制文件（相对现在的磁盘空间，其实根本不大），并可以轻松部署到云服务器，而不必担心各种依赖性。</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Golang 支持三个平台：Mac，Windows 和 Linux（译注：不只是这三个，也支持其他主流平台）。你可以在 <a href="https://golang.org/dl/">https://golang.org/dl/</a> 中下载相应平台的二进制文件。（因为众所周知的原因，如果下载不了，请到 <a href="https://studygolang.com/dl">https://studygolang.com/dl</a> 下载）</p><h3 id="Mac-OS"><a href="#Mac-OS" class="headerlink" title="Mac OS"></a>Mac OS</h3><p>在 <a href="https://golang.org/dl/">https://golang.org/dl/</a> 下载安装程序。双击开始安装并且遵循安装提示，会将 Golang 安装到 <code>/usr/local/go</code> 目录下，同时 <code>/usr/local/go/bin</code> 文件夹也会被添加到 <code>PATH</code> 环境变量中。</p><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>在 <a href="https://golang.org/dl/">https://golang.org/dl/</a> 下载 MSI 安装程序。双击开始安装并且遵循安装提示，会将 Golang 安装到 <code>C:\Go</code> 目录下，同时 <code>c:\Go\bin</code> 目录也会被添加到你的 <code>PATH</code> 环境变量中。</p><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><p>在 <a href="https://golang.org/dl/">https://golang.org/dl/</a> 下载 tar 文件，并解压到 <code>/usr/local</code>。</p><p>请添加 <code>/usr/local/go/bin</code> 到 <code>PATH</code> 环境变量中。Go 就已经成功安装在 <code>Linux</code> 上了。</p>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2019/06/17/golang/21.go-xie-cheng/"/>
      <url>2019/06/17/golang/21.go-xie-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="21-Go-协程"><a href="#21-Go-协程" class="headerlink" title="21. Go 协程"></a>21. Go 协程</h1><h2 id="Go-协程是什么？"><a href="#Go-协程是什么？" class="headerlink" title="Go 协程是什么？"></a>Go 协程是什么？</h2><p>Go 协程是与其他函数或方法一起并发运行的函数或方法。Go 协程可以看作是轻量级线程。与线程相比，创建一个 Go 协程的成本很小。因此在 Go 应用中，常常会看到有数以千计的 Go 协程并发地运行。  </p><h2 id="Go-协程相比于线程的优势"><a href="#Go-协程相比于线程的优势" class="headerlink" title="Go 协程相比于线程的优势"></a>Go 协程相比于线程的优势</h2><ul><li>相比线程而言，Go 协程的成本极低。堆栈大小只有若干 kb，并且可以根据应用的需求进行增减。而线程必须指定堆栈的大小，其堆栈是固定不变的。</li><li>Go 协程会复用（Multiplex）数量更少的 OS 线程。即使程序有数以千计的 Go 协程，也可能只有一个线程。如果该线程中的某一  Go 协程发生了阻塞（比如说等待用户输入），那么系统会再创建一个 OS 线程，并把其余 Go 协程都移动到这个新的 OS  线程。所有这一切都在运行时进行，作为程序员，我们没有直接面临这些复杂的细节，而是有一个简洁的 API 来处理并发。  </li><li>Go 协程使用信道（Channel）来进行通信。信道用于防止多个协程访问共享内存时发生竞态条件（Race Condition）。信道可以看作是 Go 协程之间通信的管道。我们会在下一教程详细讨论信道。</li></ul><h2 id="如何启动一个-Go-协程？"><a href="#如何启动一个-Go-协程？" class="headerlink" title="如何启动一个 Go 协程？"></a>如何启动一个 Go 协程？</h2><p>调用函数或者方法时，在前面加上关键字 <code>go</code>，可以让一个新的 Go 协程并发地运行。</p><p>让我们创建一个 Go 协程吧。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Hello world goroutine"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">go</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"main function"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在第 11 行，<code>go hello()</code> 启动了一个新的 Go 协程。现在 <code>hello()</code> 函数与 <code>main()</code> 函数会并发地执行。主函数会运行在一个特有的 Go 协程上，它称为 Go 主协程（Main Goroutine）。</p><p><strong>运行一下程序，你会很惊讶！</strong></p><p>该程序只会输出文本 <code>main function</code>。我们启动的 Go 协程究竟出现了什么问题？要理解这一切，我们需要理解两个 Go 协程的主要性质。  </p><ul><li><strong>启动一个新的协程时，协程的调用会立即返回。与函数不同，程序控制不会去等待 Go 协程执行完毕。在调用 Go 协程之后，程序控制会立即返回到代码的下一行，忽略该协程的任何返回值。</strong>  </li><li><strong>如果希望运行其他 Go 协程，Go 主协程必须继续运行着。如果 Go 主协程终止，则程序终止，于是其他 Go 协程也不会继续运行。</strong>  </li></ul><p>现在你应该能够理解，为何我们的 Go 协程没有运行了吧。在第 11 行调用了 <code>go hello()</code> 之后，程序控制没有等待 <code>hello</code> 协程结束，立即返回到了代码下一行，打印 <code>main function</code>。接着由于没有其他可执行的代码，Go 主协程终止，于是 <code>hello</code> 协程就没有机会运行了。</p><p>我们现在修复这个问题。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span>    <span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Hello world goroutine"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">go</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"main function"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面程序的第 13 行，我们调用了 time 包里的函数 [<code>Sleep</code>]，该函数会休眠执行它的 Go 协程。在这里，我们使 Go 主协程休眠了 1 秒。因此在主协程终止之前，调用 <code>go hello()</code> 就有足够的时间来执行了。该程序首先打印 <code>Hello world goroutine</code>，等待 1 秒钟之后，接着打印 <code>main function</code>。  </p><p>在 Go 主协程中使用休眠，以便等待其他协程执行完毕，这种方法只是用于理解 Go 协程如何工作的技巧。信道可用于在其他协程结束执行之前，阻塞 Go 主协程。我们会在下一教程中讨论信道。  </p><h2 id="启动多个-Go-协程"><a href="#启动多个-Go-协程" class="headerlink" title="启动多个 Go 协程"></a>启动多个 Go 协程</h2><p>为了更好地理解 Go 协程，我们再编写一个程序，启动多个 Go 协程。  </p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span>    <span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">numbers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>        time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">250</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">alphabets</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token string">'a'</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token string">'e'</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>        time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">400</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">go</span> <span class="token function">numbers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token function">alphabets</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">3000</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"main terminated"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面程序中的第 21 行和第 22 行，启动了两个 Go 协程。现在，这两个协程并发地运行。<code>numbers</code> 协程首先休眠 250 微秒，接着打印 <code>1</code>，然后再次休眠，打印 <code>2</code>，依此类推，一直到打印 <code>5</code> 结束。<code>alphabete</code> 协程同样打印从 <code>a</code> 到 <code>e</code> 的字母，并且每次有 400 微秒的休眠时间。 Go 主协程启动了 <code>numbers</code> 和 <code>alphabete</code> 两个 Go 协程，休眠了 3000 微秒后终止程序。  </p><p>该程序会输出：  </p><pre class="line-numbers language-none"><code class="language-none">1 a 2 3 b 4 c 5 d e main terminated<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>程序的运作如下图所示  </p><p><img src="/Users/liuqingzheng/Desktop/go%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/image-20190210175410170.png" alt="image-20190210175410170"></p><p>第一张蓝色的图表示 <code>numbers</code> 协程，第二张褐红色的图表示 <code>alphabets</code> 协程，第三张绿色的图表示 Go 主协程，而最后一张黑色的图把以上三种协程合并了，表明程序是如何运行的。在每个方框顶部，诸如 <code>0 ms</code> 和 <code>250 ms</code> 这样的字符串表示时间（以微秒为单位）。在每个方框的底部，<code>1</code>、<code>2</code>、<code>3</code> 等表示输出。蓝色方框表示：<code>250 ms</code> 打印出 <code>1</code>，<code>500 ms</code> 打印出 <code>2</code>，依此类推。最后黑色方框的底部的值会是 <code>1 a 2 3 b 4 c 5 d e main terminated</code>，这同样也是整个程序的输出。以上图片非常直观，你可以用它来理解程序是如何运作的。  </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2019/06/17/golang/22.xin-dao-channel/"/>
      <url>2019/06/17/golang/22.xin-dao-channel/</url>
      
        <content type="html"><![CDATA[<h1 id="22-信道（channel）"><a href="#22-信道（channel）" class="headerlink" title="22. 信道（channel）"></a>22. 信道（channel）</h1><h2 id="什么是信道？"><a href="#什么是信道？" class="headerlink" title="什么是信道？"></a>什么是信道？</h2><p>信道可以想像成 Go 协程之间通信的管道。如同管道中的水会从一端流到另一端，通过使用信道，数据也可以从一端发送，在另一端接收。  </p><h2 id="信道的声明"><a href="#信道的声明" class="headerlink" title="信道的声明"></a>信道的声明</h2><p>所有信道都关联了一个类型。信道只能运输这种类型的数据，而运输其他类型的数据都是非法的。  </p><p><code>chan T</code> 表示 <code>T</code> 类型的信道。  </p><p>信道的零值为 <code>nil</code>。信道的零值没有什么用，应该像对 map 和切片所做的那样，用 <code>make</code> 来定义信道。  </p><p>下面编写代码，声明一个信道。  </p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> a <span class="token keyword">chan</span> <span class="token builtin">int</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"channel a is nil, going to define it"</span><span class="token punctuation">)</span>        a <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Type of a is %T"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于信道的零值为 <code>nil</code>，在第 6 行，信道 <code>a</code> 的值就是 <code>nil</code>。于是，程序执行了 if 语句内的语句，定义了信道 <code>a</code>。程序中 <code>a</code> 是一个 int 类型的信道。该程序会输出：  </p><pre class="line-numbers language-none"><code class="language-none">channel a is nil, going to define it  Type of a is chan int<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>简短声明通常也是一种定义信道的简洁有效的方法。  </p><pre class="line-numbers language-go" data-language="go"><code class="language-go">a <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这一行代码同样定义了一个 int 类型的信道 <code>a</code>。  </p><h2 id="通过信道进行发送和接收"><a href="#通过信道进行发送和接收" class="headerlink" title="通过信道进行发送和接收"></a>通过信道进行发送和接收</h2><p>如下所示，该语法通过信道发送和接收数据。  </p><pre class="line-numbers language-go" data-language="go"><code class="language-go">data <span class="token operator">:=</span> <span class="token operator">&lt;-</span> a <span class="token comment">// 读取信道 a  </span>a <span class="token operator">&lt;-</span> data <span class="token comment">// 写入信道 a</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>信道旁的箭头方向指定了是发送数据还是接收数据。  </p><p>在第一行，箭头对于 <code>a</code> 来说是向外指的，因此我们读取了信道 <code>a</code> 的值，并把该值存储到变量 <code>data</code>。  </p><p>在第二行，箭头指向了 <code>a</code>，因此我们在把数据写入信道 <code>a</code>。  </p><h2 id="发送与接收默认是阻塞的"><a href="#发送与接收默认是阻塞的" class="headerlink" title="发送与接收默认是阻塞的"></a>发送与接收默认是阻塞的</h2><p>发送与接收默认是阻塞的。这是什么意思？当把数据发送到信道时，程序控制会在发送数据的语句处发生阻塞，直到有其它 Go 协程从信道读取到数据，才会解除阻塞。与此类似，当读取信道的数据时，如果没有其它的协程把数据写入到这个信道，那么读取过程就会一直阻塞着。  </p><p>信道的这种特性能够帮助 Go 协程之间进行高效的通信，不需要用到其他编程语言常见的显式锁或条件变量。  </p><h2 id="信道的代码示例"><a href="#信道的代码示例" class="headerlink" title="信道的代码示例"></a>信道的代码示例</h2><p>理论已经够了:)。接下来写点代码，看看协程之间通过信道是怎么通信的吧。  </p><p>我们其实可以重写上章学习 [Go 协程]时写的程序，现在我们在这里用上信道。  </p><p>首先引用前面教程里的程序。  </p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span>    <span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Hello world goroutine"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">go</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"main function"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是上一篇的代码。我们使用到了休眠，使 Go 主协程等待 hello 协程结束。如果你看不懂，建议你阅读上一教程 [Go 协程]。  </p><p>我们接下来使用信道来重写上面代码。  </p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">hello</span><span class="token punctuation">(</span>done <span class="token keyword">chan</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Hello world goroutine"</span><span class="token punctuation">)</span>    done <span class="token operator">&lt;-</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      done <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token function">hello</span><span class="token punctuation">(</span>done<span class="token punctuation">)</span>    <span class="token operator">&lt;-</span>done    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"main function"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述程序里，我们在第 12 行创建了一个 bool 类型的信道 <code>done</code>，并把 <code>done</code> 作为参数传递给了 <code>hello</code> 协程。在第 14 行，我们通过信道 <code>done</code> 接收数据。这一行代码发生了阻塞，除非有协程向 <code>done</code> 写入数据，否则程序不会跳到下一行代码。于是，这就不需要用以前的 <code>time.Sleep</code> 来阻止 Go 主协程退出了。  </p><p><code>&lt;-done</code> 这行代码通过协程（译注：原文笔误，信道）<code>done</code> 接收数据，但并没有使用数据或者把数据存储到变量中。这完全是合法的。  </p><p>现在我们的 Go 主协程发生了阻塞，等待信道 <code>done</code> 发送的数据。该信道作为参数传递给了协程 <code>hello</code>，<code>hello</code> 打印出 <code>Hello world goroutine</code>，接下来向 <code>done</code> 写入数据。当完成写入时，Go 主协程会通过信道 <code>done</code> 接收数据，于是它解除阻塞状态，打印出文本 <code>main function</code>。  </p><p>该程序输出如下：  </p><pre class="line-numbers language-none"><code class="language-none">Hello world goroutine  main function<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>我们稍微修改一下程序，在 <code>hello</code> 协程里加入休眠函数，以便更好地理解阻塞的概念。  </p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span>    <span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">hello</span><span class="token punctuation">(</span>done <span class="token keyword">chan</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hello go routine is going to sleep"</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hello go routine awake and going to write to done"</span><span class="token punctuation">)</span>    done <span class="token operator">&lt;-</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      done <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Main going to call hello go goroutine"</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token function">hello</span><span class="token punctuation">(</span>done<span class="token punctuation">)</span>    <span class="token operator">&lt;-</span>done    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Main received data"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面程序里，我们向 <code>hello</code> 函数里添加了 4 秒的休眠（第 10 行）。  </p><p>程序首先会打印 <code>Main going to call hello go goroutine</code>。接着会开启 <code>hello</code> 协程，打印 <code>hello go routine is going to sleep</code>。打印完之后，<code>hello</code> 协程会休眠 4 秒钟，而在这期间，主协程会在 <code>&lt;-done</code> 这一行发生阻塞，等待来自信道 <code>done</code> 的数据。4 秒钟之后，打印 <code>hello go routine awake and going to write to done</code>，接着再打印 <code>Main received data</code>。  </p><h2 id="信道的另一个示例"><a href="#信道的另一个示例" class="headerlink" title="信道的另一个示例"></a>信道的另一个示例</h2><p>我们再编写一个程序来更好地理解信道。该程序会计算一个数中每一位的平方和与立方和，然后把平方和与立方和相加并打印出来。</p><p>例如，如果输出是 123，该程序会如下计算输出：  </p><pre class="line-numbers language-none"><code class="language-none">squares &#x3D; (1 * 1) + (2 * 2) + (3 * 3) cubes &#x3D; (1 * 1 * 1) + (2 * 2 * 2) + (3 * 3 * 3) output &#x3D; squares + cubes &#x3D; 50<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们会这样去构建程序：在一个单独的 Go 协程计算平方和，而在另一个协程计算立方和，最后在 Go 主协程把平方和与立方和相加。  </p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">calcSquares</span><span class="token punctuation">(</span>number <span class="token builtin">int</span><span class="token punctuation">,</span> squareop <span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      sum <span class="token operator">:=</span> <span class="token number">0</span>    <span class="token keyword">for</span> number <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>        digit <span class="token operator">:=</span> number <span class="token operator">%</span> <span class="token number">10</span>        sum <span class="token operator">+=</span> digit <span class="token operator">*</span> digit        number <span class="token operator">/=</span> <span class="token number">10</span>    <span class="token punctuation">&#125;</span>    squareop <span class="token operator">&lt;-</span> sum<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">calcCubes</span><span class="token punctuation">(</span>number <span class="token builtin">int</span><span class="token punctuation">,</span> cubeop <span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      sum <span class="token operator">:=</span> <span class="token number">0</span>     <span class="token keyword">for</span> number <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>        digit <span class="token operator">:=</span> number <span class="token operator">%</span> <span class="token number">10</span>        sum <span class="token operator">+=</span> digit <span class="token operator">*</span> digit <span class="token operator">*</span> digit        number <span class="token operator">/=</span> <span class="token number">10</span>    <span class="token punctuation">&#125;</span>    cubeop <span class="token operator">&lt;-</span> sum<span class="token punctuation">&#125;</span> <span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      number <span class="token operator">:=</span> <span class="token number">589</span>    sqrch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>    cubech <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token function">calcSquares</span><span class="token punctuation">(</span>number<span class="token punctuation">,</span> sqrch<span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token function">calcCubes</span><span class="token punctuation">(</span>number<span class="token punctuation">,</span> cubech<span class="token punctuation">)</span>    squares<span class="token punctuation">,</span> cubes <span class="token operator">:=</span> <span class="token operator">&lt;-</span>sqrch<span class="token punctuation">,</span> <span class="token operator">&lt;-</span>cubech    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Final output"</span><span class="token punctuation">,</span> squares <span class="token operator">+</span> cubes<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在第 7 行，函数 <code>calcSquares</code> 计算一个数每位的平方和，并把结果发送给信道 <code>squareop</code>。与此类似，在第 17 行函数 <code>calcCubes</code> 计算一个数每位的立方和，并把结果发送给信道 <code>cubop</code>。  </p><p>这两个函数分别在单独的协程里运行（第 31 行和第 32 行），每个函数都有传递信道的参数，以便写入数据。Go 主协程会在第 33 行等待两个信道传来的数据。一旦从两个信道接收完数据，数据就会存储在变量 <code>squares</code> 和 <code>cubes</code> 里，然后计算并打印出最后结果。该程序会输出：  </p><pre class="line-numbers language-none"><code class="language-none">Final output 1536<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p>使用信道需要考虑的一个重点是死锁。当 Go 协程给一个信道发送数据时，照理说会有其他 Go 协程来接收数据。如果没有的话，程序就会在运行时触发 panic，形成死锁。  </p><p>同理，当有 Go 协程等着从一个信道接收数据时，我们期望其他的 Go 协程会向该信道写入数据，要不然程序就会触发 panic。 </p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>    ch <span class="token operator">&lt;-</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述程序中，我们创建了一个信道 <code>ch</code>，接着在下一行 <code>ch &lt;- 5</code>，我们把 <code>5</code> 发送到这个信道。对于本程序，没有其他的协程从 <code>ch</code> 接收数据。于是程序触发 panic，出现如下运行时错误。  </p><pre class="line-numbers language-none"><code class="language-none">fatal error: all goroutines are asleep - deadlock!goroutine 1 [chan send]:  main.main()      &#x2F;tmp&#x2F;sandbox249677995&#x2F;main.go:6 +0x80<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="单向信道"><a href="#单向信道" class="headerlink" title="单向信道"></a>单向信道</h2><p>我们目前讨论的信道都是双向信道，即通过信道既能发送数据，又能接收数据。其实也可以创建单向信道，这种信道只能发送或者接收数据。  </p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">sendData</span><span class="token punctuation">(</span>sendch <span class="token keyword">chan</span><span class="token operator">&lt;-</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      sendch <span class="token operator">&lt;-</span> <span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      sendch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span><span class="token operator">&lt;-</span> <span class="token builtin">int</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token function">sendData</span><span class="token punctuation">(</span>sendch<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&lt;-</span>sendch<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面程序的第 10 行，我们创建了唯送（Send Only）信道 <code>sendch</code>。<code>chan&lt;- int</code> 定义了唯送信道，因为箭头指向了 <code>chan</code>。在第 12 行，我们试图通过唯送信道接收数据，于是编译器报错：  </p><pre class="line-numbers language-none"><code class="language-none">main.go:11: invalid operation: &lt;-sendch (receive from send-only type chan&lt;- int)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>一切都很顺利，只不过一个不能读取数据的唯送信道究竟有什么意义呢？</strong>  </p><p><strong>这就需要用到信道转换（Channel Conversion）了。把一个双向信道转换成唯送信道或者唯收（Receive Only）信道都是行得通的，但是反过来就不行。</strong>  </p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">sendData</span><span class="token punctuation">(</span>sendch <span class="token keyword">chan</span><span class="token operator">&lt;-</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      sendch <span class="token operator">&lt;-</span> <span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      cha1 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token function">sendData</span><span class="token punctuation">(</span>cha1<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&lt;-</span>cha1<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述程序的第 10 行，我们创建了一个双向信道 <code>cha1</code>。在第 11 行 <code>cha1</code> 作为参数传递给了 <code>sendData</code> 协程。在第 5 行，函数 <code>sendData</code> 里的参数 <code>sendch chan&lt;- int</code> 把 <code>cha1</code> 转换为一个唯送信道。于是该信道在 <code>sendData</code> 协程里是一个唯送信道，而在 Go 主协程里是一个双向信道。该程序最终打印输出 <code>10</code>。  </p><h2 id="关闭信道和使用-for-range-遍历信道"><a href="#关闭信道和使用-for-range-遍历信道" class="headerlink" title="关闭信道和使用 for range 遍历信道"></a>关闭信道和使用 for range 遍历信道</h2><p>数据发送方可以关闭信道，通知接收方这个信道不再有数据发送过来。  </p><p>当从信道接收数据时，接收方可以多用一个变量来检查信道是否已经关闭。  </p><pre class="line-numbers language-none"><code class="language-none">v, ok :&#x3D; &lt;- ch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面的语句里，如果成功接收信道所发送的数据，那么 <code>ok</code> 等于 true。而如果 <code>ok</code> 等于 false，说明我们试图读取一个关闭的通道。从关闭的信道读取到的值会是该信道类型的零值。例如，当信道是一个 <code>int</code> 类型的信道时，那么从关闭的信道读取的值将会是 <code>0</code>。  </p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">producer</span><span class="token punctuation">(</span>chnl <span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>        chnl <span class="token operator">&lt;-</span> i    <span class="token punctuation">&#125;</span>    <span class="token function">close</span><span class="token punctuation">(</span>chnl<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token function">producer</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">&#123;</span>        v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ch        <span class="token keyword">if</span> ok <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">break</span>        <span class="token punctuation">&#125;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Received "</span><span class="token punctuation">,</span> v<span class="token punctuation">,</span> ok<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述的程序中，<code>producer</code> 协程会从 0 到 9 写入信道 <code>chn1</code>，然后关闭该信道。主函数有一个无限的 for 循环（第 16 行），使用变量 <code>ok</code>（第 18 行）检查信道是否已经关闭。如果 <code>ok</code> 等于 false，说明信道已经关闭，于是退出 for 循环。如果 <code>ok</code> 等于 true，会打印出接收到的值和 <code>ok</code> 的值。  </p><pre class="line-numbers language-none"><code class="language-none">Received  0 true  Received  1 true  Received  2 true  Received  3 true  Received  4 true  Received  5 true  Received  6 true  Received  7 true  Received  8 true  Received  9 true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>for range 循环用于在一个信道关闭之前，从信道接收数据。  </p><p>接下来我们使用 for range 循环重写上面的代码。  </p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">producer</span><span class="token punctuation">(</span>chnl <span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>        chnl <span class="token operator">&lt;-</span> i    <span class="token punctuation">&#125;</span>    <span class="token function">close</span><span class="token punctuation">(</span>chnl<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token function">producer</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span>    <span class="token keyword">for</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> ch <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Received "</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在第 16 行，for range 循环从信道 <code>ch</code> 接收数据，直到该信道关闭。一旦关闭了 <code>ch</code>，循环会自动结束。该程序会输出：  </p><pre class="line-numbers language-none"><code class="language-none">Received  0  Received  1  Received  2  Received  3  Received  4  Received  5  Received  6  Received  7  Received  8  Received  9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以使用 for range 循环，重写[信道的另一个示例]这一节里面的代码，提高代码的可重用性。  </p><p>如果你仔细观察这段代码，会发现获得一个数里的每位数的代码在 <code>calcSquares</code> 和 <code>calcCubes</code> 两个函数内重复了。我们将把这段代码抽离出来，放在一个单独的函数里，然后并发地调用它。  </p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">digits</span><span class="token punctuation">(</span>number <span class="token builtin">int</span><span class="token punctuation">,</span> dchnl <span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> number <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>        digit <span class="token operator">:=</span> number <span class="token operator">%</span> <span class="token number">10</span>        dchnl <span class="token operator">&lt;-</span> digit        number <span class="token operator">/=</span> <span class="token number">10</span>    <span class="token punctuation">&#125;</span>    <span class="token function">close</span><span class="token punctuation">(</span>dchnl<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">calcSquares</span><span class="token punctuation">(</span>number <span class="token builtin">int</span><span class="token punctuation">,</span> squareop <span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      sum <span class="token operator">:=</span> <span class="token number">0</span>    dch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token function">digits</span><span class="token punctuation">(</span>number<span class="token punctuation">,</span> dch<span class="token punctuation">)</span>    <span class="token keyword">for</span> digit <span class="token operator">:=</span> <span class="token keyword">range</span> dch <span class="token punctuation">&#123;</span>        sum <span class="token operator">+=</span> digit <span class="token operator">*</span> digit    <span class="token punctuation">&#125;</span>    squareop <span class="token operator">&lt;-</span> sum<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">calcCubes</span><span class="token punctuation">(</span>number <span class="token builtin">int</span><span class="token punctuation">,</span> cubeop <span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      sum <span class="token operator">:=</span> <span class="token number">0</span>    dch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token function">digits</span><span class="token punctuation">(</span>number<span class="token punctuation">,</span> dch<span class="token punctuation">)</span>    <span class="token keyword">for</span> digit <span class="token operator">:=</span> <span class="token keyword">range</span> dch <span class="token punctuation">&#123;</span>        sum <span class="token operator">+=</span> digit <span class="token operator">*</span> digit <span class="token operator">*</span> digit    <span class="token punctuation">&#125;</span>    cubeop <span class="token operator">&lt;-</span> sum<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      number <span class="token operator">:=</span> <span class="token number">589</span>    sqrch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>    cubech <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token function">calcSquares</span><span class="token punctuation">(</span>number<span class="token punctuation">,</span> sqrch<span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token function">calcCubes</span><span class="token punctuation">(</span>number<span class="token punctuation">,</span> cubech<span class="token punctuation">)</span>    squares<span class="token punctuation">,</span> cubes <span class="token operator">:=</span> <span class="token operator">&lt;-</span>sqrch<span class="token punctuation">,</span> <span class="token operator">&lt;-</span>cubech    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Final output"</span><span class="token punctuation">,</span> squares<span class="token operator">+</span>cubes<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述程序里的 <code>digits</code> 函数，包含了获取一个数的每位数的逻辑，并且 <code>calcSquares</code> 和 <code>calcCubes</code> 两个函数并发地调用了 <code>digits</code>。当计算完数字里面的每一位数时，第 13 行就会关闭信道。<code>calcSquares</code> 和 <code>calcCubes</code> 两个协程使用 for range 循环分别监听了它们的信道，直到该信道关闭。程序的其他地方不变，该程序同样会输出：  </p><pre class="line-numbers language-none"><code class="language-none">Final output 1536<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>关于信道还有一些其他的概念，比如缓冲信道（Buffered Channel）、工作池（Worker Pool）和 select。我们会在接下来的教程里专门介绍它们</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2019/06/17/golang/24.select/"/>
      <url>2019/06/17/golang/24.select/</url>
      
        <content type="html"><![CDATA[<h1 id="24-Select"><a href="#24-Select" class="headerlink" title="24. Select"></a>24. Select</h1><h2 id="什么是-select？"><a href="#什么是-select？" class="headerlink" title="什么是 select？"></a>什么是 select？</h2><p><code>select</code> 语句用于在多个发送/接收信道操作中进行选择。<code>select</code> 语句会一直阻塞，直到发送/接收操作准备就绪。如果有多个信道操作准备完毕，<code>select</code> 会随机地选取其中之一执行。该语法与 <code>switch</code> 类似，所不同的是，这里的每个 <code>case</code> 语句都是信道操作。我们好好看一些代码来加深理解吧。  </p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span>    <span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">server1</span><span class="token punctuation">(</span>ch <span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">6</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>    ch <span class="token operator">&lt;-</span> <span class="token string">"from server1"</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">server2</span><span class="token punctuation">(</span>ch <span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>    ch <span class="token operator">&lt;-</span> <span class="token string">"from server2"</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      output1 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span>    output2 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token function">server1</span><span class="token punctuation">(</span>output1<span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token function">server2</span><span class="token punctuation">(</span>output2<span class="token punctuation">)</span>    <span class="token keyword">select</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> s1 <span class="token operator">:=</span> <span class="token operator">&lt;-</span>output1<span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>    <span class="token keyword">case</span> s2 <span class="token operator">:=</span> <span class="token operator">&lt;-</span>output2<span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面程序里，<code>server1</code> 函数（第 8 行）休眠了 6 秒，接着将文本 <code>from server1</code> 写入信道 <code>ch</code>。而 <code>server2</code> 函数（第 12 行）休眠了 3 秒，然后把 <code>from server2</code> 写入了信道 <code>ch</code>。  </p><p>而 <code>main</code> 函数在第 20 行和第 21 行，分别调用了 <code>server1</code> 和 <code>server2</code> 两个 Go 协程。  </p><p>在第 22 行，程序运行到了 <code>select</code> 语句。<code>select</code> 会一直发生阻塞，除非其中有 case 准备就绪。在上述程序里，<code>server1</code> 协程会在 6 秒之后写入 <code>output1</code> 信道，而<code>server2</code> 协程在 3 秒之后就写入了 <code>output2</code> 信道。因此 <code>select</code> 语句会阻塞 3 秒钟，等着 <code>server2</code> 向 <code>output2</code> 信道写入数据。3 秒钟过后，程序会输出：  </p><pre class="line-numbers language-none"><code class="language-none">from server2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后程序终止。  </p><h2 id="select-的应用"><a href="#select-的应用" class="headerlink" title="select 的应用"></a>select 的应用</h2><p>在上面程序中，函数之所以取名为 <code>server1</code> 和 <code>server2</code>，是为了展示 <code>select</code> 的实际应用。  </p><p>假设我们有一个关键性应用，需要尽快地把输出返回给用户。这个应用的数据库复制并且存储在世界各地的服务器上。假设函数 <code>server1</code> 和 <code>server2</code> 与这样不同区域的两台服务器进行通信。每台服务器的负载和网络时延决定了它的响应时间。我们向两台服务器发送请求，并使用 <code>select</code> 语句等待相应的信道发出响应。<code>select</code> 会选择首先响应的服务器，而忽略其它的响应。使用这种方法，我们可以向多个服务器发送请求，并给用户返回最快的响应了。:）  </p><h2 id="默认情况"><a href="#默认情况" class="headerlink" title="默认情况"></a>默认情况</h2><p>在没有 case 准备就绪时，可以执行 <code>select</code> 语句中的默认情况（Default Case）。这通常用于防止 <code>select</code> 语句一直阻塞。  </p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span>    <span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">process</span><span class="token punctuation">(</span>ch <span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">10500</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span>    ch <span class="token operator">&lt;-</span> <span class="token string">"process successful"</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token function">process</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">&#123;</span>        time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span>        <span class="token keyword">select</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> v <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ch<span class="token punctuation">:</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"received value: "</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"no value received"</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述程序中，第 8 行的 <code>process</code> 函数休眠了 10500 毫秒（10.5 秒），接着把 <code>process successful</code> 写入 <code>ch</code> 信道。在程序中的第 15 行，并发地调用了这个函数。  </p><p>在并发地调用了 <code>process</code> 协程之后，主协程启动了一个无限循环。这个无限循环在每一次迭代开始时，都会先休眠 1000 毫秒（1 秒），然后执行一个 select 操作。在最开始的 10500 毫秒中，由于 <code>process</code> 协程在 10500 毫秒后才会向 <code>ch</code> 信道写入数据，因此 <code>select</code> 语句的第一个 case（即 <code>case v := &lt;-ch:</code>）并未就绪。所以在这期间，程序会执行默认情况，该程序会打印 10 次 <code>no value received</code>。  </p><p>在 10.5 秒之后，<code>process</code> 协程会在第 10 行向 <code>ch</code> 写入 <code>process successful</code>。现在，就可以执行 <code>select</code> 语句的第一个 case 了，程序会打印 <code>received value:  process successful</code>，然后程序终止。该程序会输出：  </p><pre class="line-numbers language-none"><code class="language-none">no value received  no value received  no value received  no value received  no value received  no value received  no value received  no value received  no value received  no value received  received value:  process successful<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="死锁与默认情况"><a href="#死锁与默认情况" class="headerlink" title="死锁与默认情况"></a>死锁与默认情况</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span>    <span class="token keyword">select</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token operator">&lt;-</span>ch<span class="token punctuation">:</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的程序中，我们在第 4 行创建了一个信道 <code>ch</code>。我们在 <code>select</code> 内部（第 6 行），试图读取信道 <code>ch</code>。由于没有 Go 协程向该信道写入数据，因此 <code>select</code> 语句会一直阻塞，导致死锁。该程序会触发运行时 <code>panic</code>，报错信息如下：  </p><pre class="line-numbers language-none"><code class="language-none">fatal error: all goroutines are asleep - deadlock!goroutine 1 [chan receive]:  main.main()      &#x2F;tmp&#x2F;sandbox416567824&#x2F;main.go:6 +0x80<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果存在默认情况，就不会发生死锁，因为在没有其他 case 准备就绪时，会执行默认情况。我们用默认情况重写后，程序如下：  </p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span>    <span class="token keyword">select</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token operator">&lt;-</span>ch<span class="token punctuation">:</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"default case executed"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上程序会输出：  </p><pre class="line-numbers language-none"><code class="language-none">default case executed<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果 <code>select</code> 只含有值为 <code>nil</code> 的信道，也同样会执行默认情况。  </p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> ch <span class="token keyword">chan</span> <span class="token builtin">string</span>    <span class="token keyword">select</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> v <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ch<span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"received value"</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"default case executed"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面程序中，<code>ch</code> 等于 <code>nil</code>，而我们试图在 <code>select</code> 中读取 <code>ch</code>（第 8 行）。如果没有默认情况，<code>select</code> 会一直阻塞，导致死锁。由于我们在 <code>select</code> 内部加入了默认情况，程序会执行它，并输出：  </p><pre class="line-numbers language-none"><code class="language-none">default case executed<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="随机选取"><a href="#随机选取" class="headerlink" title="随机选取"></a>随机选取</h2><p>当 <code>select</code> 由多个 case 准备就绪时，将会随机地选取其中之一去执行。  </p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span>    <span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">server1</span><span class="token punctuation">(</span>ch <span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      ch <span class="token operator">&lt;-</span> <span class="token string">"from server1"</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">server2</span><span class="token punctuation">(</span>ch <span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      ch <span class="token operator">&lt;-</span> <span class="token string">"from server2"</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      output1 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span>    output2 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token function">server1</span><span class="token punctuation">(</span>output1<span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token function">server2</span><span class="token punctuation">(</span>output2<span class="token punctuation">)</span>    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>    <span class="token keyword">select</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> s1 <span class="token operator">:=</span> <span class="token operator">&lt;-</span>output1<span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>    <span class="token keyword">case</span> s2 <span class="token operator">:=</span> <span class="token operator">&lt;-</span>output2<span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面程序里，我们在第 18 行和第 19 行分别调用了 <code>server1</code> 和 <code>server2</code> 两个 Go 协程。接下来，主程序休眠了 1 秒钟（第 20 行）。当程序控制到达第 21 行的 <code>select</code> 语句时，<code>server1</code> 已经把 <code>from server1</code> 写到了 <code>output1</code> 信道上，而 <code>server2</code> 也同样把 <code>from server2</code> 写到了 <code>output2</code> 信道上。因此这个 <code>select</code> 语句中的两种情况都准备好执行了。如果你运行这个程序很多次的话，输出会是 <code>from server1</code> 或者 <code>from server2</code>，这会根据随机选取的结果而变化。  </p><p>请在你的本地系统上运行这个程序，获得程序的随机结果。因为如果你在 playground 上在线运行的话，它的输出总是一样的，这是由于 playground 不具有随机性所造成的。  </p><h2 id="这下我懂了：空-select"><a href="#这下我懂了：空-select" class="headerlink" title="这下我懂了：空 select"></a>这下我懂了：空 select</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">select</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你认为上面代码会输出什么？  </p><p>我们已经知道，除非有 case 执行，select 语句就会一直阻塞着。在这里，<code>select</code> 语句没有任何 case，因此它会一直阻塞，导致死锁。该程序会触发 panic，输出如下：  </p><pre class="line-numbers language-none"><code class="language-none">fatal error: all goroutines are asleep - deadlock!goroutine 1 [select (no cases)]:  main.main()      &#x2F;tmp&#x2F;sandbox299546399&#x2F;main.go:4 +0x20<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2019/06/17/golang/23.huan-chong-xin-dao-he-gong-zuo-chi-buffered-channels-and-worker-pools/"/>
      <url>2019/06/17/golang/23.huan-chong-xin-dao-he-gong-zuo-chi-buffered-channels-and-worker-pools/</url>
      
        <content type="html"><![CDATA[<h1 id="23-缓冲信道和工作池（Buffered-Channels-and-Worker-Pools）"><a href="#23-缓冲信道和工作池（Buffered-Channels-and-Worker-Pools）" class="headerlink" title="23. 缓冲信道和工作池（Buffered Channels and Worker Pools）"></a>23. 缓冲信道和工作池（Buffered Channels and Worker Pools）</h1><h2 id="什么是缓冲信道？"><a href="#什么是缓冲信道？" class="headerlink" title="什么是缓冲信道？"></a>什么是缓冲信道？</h2><p>在[上一教程]里，我们讨论的主要是无缓冲信道。我们在[信道]的教程里详细讨论了，无缓冲信道的发送和接收过程是阻塞的。  </p><p>我们还可以创建一个有缓冲（Buffer）的信道。只在缓冲已满的情况，才会阻塞向缓冲信道（Buffered Channel）发送数据。同样，只有在缓冲为空的时候，才会阻塞从缓冲信道接收数据。  </p><p>通过向 <code>make</code> 函数再传递一个表示容量的参数（指定缓冲的大小），可以创建缓冲信道。  </p><pre class="line-numbers language-go" data-language="go"><code class="language-go">ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">type</span><span class="token punctuation">,</span> capacity<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>要让一个信道有缓冲，上面语法中的 <code>capacity</code> 应该大于 0。无缓冲信道的容量默认为 0，因此我们在[上一教程]创建信道时，省略了容量参数。  </p><p>我们开始编写代码，创建一个缓冲信道。  </p><h2 id="示例一"><a href="#示例一" class="headerlink" title="示例一"></a>示例一</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>    ch <span class="token operator">&lt;-</span> <span class="token string">"naveen"</span>    ch <span class="token operator">&lt;-</span> <span class="token string">"paul"</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&lt;-</span> ch<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&lt;-</span> ch<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面程序里的第 9 行，我们创建了一个缓冲信道，其容量为 2。由于该信道的容量为 2，因此可向它写入两个字符串，而且不会发生阻塞。在第  10 行和第 11 行，我们向信道写入两个字符串，该信道并没有发生阻塞。我们又在第 12 行和第 13 行分别读取了这两个字符串。该程序输出：   </p><pre class="line-numbers language-none"><code class="language-none">naveen  paul<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="示例二"><a href="#示例二" class="headerlink" title="示例二"></a>示例二</h2><p>我们再看一个缓冲信道的示例，其中有一个并发的 Go 协程来向信道写入数据，而 Go 主协程负责读取数据。该示例帮助我们进一步理解，在向缓冲信道写入数据时，什么时候会发生阻塞。  </p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span>    <span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">write</span><span class="token punctuation">(</span>ch <span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>        ch <span class="token operator">&lt;-</span> i        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"successfully wrote"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token string">"to ch"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token function">close</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token function">write</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span>    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>    <span class="token keyword">for</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> ch <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"read value"</span><span class="token punctuation">,</span> v<span class="token punctuation">,</span><span class="token string">"from ch"</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的程序中，第 16 行在 Go 主协程中创建了容量为 2 的缓冲信道 <code>ch</code>，而第 17 行把 <code>ch</code> 传递给了 <code>write</code> 协程。接下来 Go 主协程休眠了两秒。在这期间，<code>write</code> 协程在并发地运行。<code>write</code> 协程有一个 for 循环，依次向信道 <code>ch</code> 写入 0～4。而缓冲信道的容量为 2，因此 <code>write</code> 协程里立即会向 <code>ch</code> 写入 0 和 1，接下来发生阻塞，直到 <code>ch</code> 内的值被读取。因此，该程序立即打印出下面两行：  </p><pre class="line-numbers language-none"><code class="language-none">successfully wrote 0 to ch  successfully wrote 1 to ch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>打印上面两行之后，<code>write</code> 协程中向 <code>ch</code> 的写入发生了阻塞，直到 <code>ch</code> 有值被读取到。而 Go 主协程休眠了两秒后，才开始读取该信道，因此在休眠期间程序不会打印任何结果。主协程结束休眠后，在第 19 行使用 for range 循环，开始读取信道 <code>ch</code>，打印出了读取到的值后又休眠两秒，这个循环一直到 <code>ch</code> 关闭才结束。所以该程序在两秒后会打印下面两行：  </p><pre class="line-numbers language-none"><code class="language-none">read value 0 from ch  successfully wrote 2 to ch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>该过程会一直进行，直到信道读取完所有的值，并在 <code>write</code> 协程中关闭信道。最终输出如下：  </p><pre class="line-numbers language-none"><code class="language-none">successfully wrote 0 to ch  successfully wrote 1 to ch  read value 0 from ch  successfully wrote 2 to ch  read value 1 from ch  successfully wrote 3 to ch  read value 2 from ch  successfully wrote 4 to ch  read value 3 from ch  read value 4 from ch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>    ch <span class="token operator">&lt;-</span> <span class="token string">"naveen"</span>    ch <span class="token operator">&lt;-</span> <span class="token string">"paul"</span>    ch <span class="token operator">&lt;-</span> <span class="token string">"steve"</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&lt;-</span>ch<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&lt;-</span>ch<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面程序里，我们向容量为 2 的缓冲信道写入 3 个字符串。当在程序控制到达第 3 次写入时（第 11  行），由于它超出了信道的容量，因此这次写入发生了阻塞。现在想要这次写操作能够进行下去，必须要有其它协程来读取这个信道的数据。但在本例中，并没有并发协程来读取这个信道，因此这里会发生<strong>死锁</strong>（deadlock）。程序会在运行时触发 panic，信息如下：  </p><pre class="line-numbers language-none"><code class="language-none">fatal error: all goroutines are asleep - deadlock!goroutine 1 [chan send]:  main.main()      &#x2F;tmp&#x2F;sandbox274756028&#x2F;main.go:11 +0x100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="长度-vs-容量"><a href="#长度-vs-容量" class="headerlink" title="长度 vs 容量"></a>长度 vs 容量</h2><p>缓冲信道的容量是指信道可以存储的值的数量。我们在使用 <code>make</code> 函数创建缓冲信道的时候会指定容量大小。  </p><p>缓冲信道的长度是指信道中当前排队的元素个数。  </p><p>代码可以把一切解释得很清楚。:)  </p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>    ch <span class="token operator">&lt;-</span> <span class="token string">"naveen"</span>    ch <span class="token operator">&lt;-</span> <span class="token string">"paul"</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"capacity is"</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"length is"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"read value"</span><span class="token punctuation">,</span> <span class="token operator">&lt;-</span>ch<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"new length is"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的程序里，我们创建了一个容量为 3 的信道，于是它可以保存 3 个字符串。接下来，我们分别在第 9 行和第 10  行向信道写入了两个字符串。于是信道有两个字符串排队，因此其长度为 2。在第 13  行，我们又从信道读取了一个字符串。现在该信道内只有一个字符串，因此其长度变为 1。该程序会输出：  </p><pre class="line-numbers language-none"><code class="language-none">capacity is 3  length is 2  read value naveen  new length is 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="WaitGroup"><a href="#WaitGroup" class="headerlink" title="WaitGroup"></a>WaitGroup</h2><p>在本教程的下一节里，我们会讲到<strong>工作池</strong>（Worker Pools）。而 <code>WaitGroup</code> 用于实现工作池，因此要理解工作池，我们首先需要学习 <code>WaitGroup</code>。  </p><p><code>WaitGroup</code> 用于等待一批 Go 协程执行结束。程序控制会一直阻塞，直到这些协程全部执行完毕。假设我们有 3 个并发执行的 Go 协程（由 Go 主协程生成）。Go 主协程需要等待这 3 个协程执行结束后，才会终止。这就可以用 <code>WaitGroup</code> 来实现。  </p><p>理论说完了，我们编写点儿代码吧。:)  </p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span>    <span class="token string">"sync"</span>    <span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">process</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">,</span> wg <span class="token operator">*</span>sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"started Goroutine "</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Goroutine %d ended\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>    wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      no <span class="token operator">:=</span> <span class="token number">3</span>    <span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> no<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>        wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">go</span> <span class="token function">process</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token operator">&amp;</span>wg<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"All go routines finished executing"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[WaitGroup]是一个结构体类型，我们在第 18 行创建了 <code>WaitGroup</code> 类型的变量，其初始值为零值。<code>WaitGroup</code> 使用计数器来工作。当我们调用 <code>WaitGroup</code> 的 <code>Add</code> 并传递一个 <code>int</code> 时，<code>WaitGroup</code> 的计数器会加上 <code>Add</code> 的传参。要减少计数器，可以调用 <code>WaitGroup</code> 的 <code>Done()</code> 方法。<code>Wait()</code> 方法会阻塞调用它的 Go 协程，直到计数器变为 0 后才会停止阻塞。  </p><p>上述程序里，for 循环迭代了 3 次，我们在循环内调用了 <code>wg.Add(1)</code>（第 20 行）。因此计数器变为 3。for 循环同样创建了 3 个 <code>process</code> 协程，然后在第 23 行调用了 <code>wg.Wait()</code>，确保 Go 主协程等待计数器变为 0。在第 13 行，<code>process</code> 协程内调用了 <code>wg.Done</code>，可以让计数器递减。一旦 3 个子协程都执行完毕（即 <code>wg.Done()</code> 调用了 3 次），那么计数器就变为 0，于是主协程会解除阻塞。  </p><p><strong>在第 21 行里，传递 wg 的地址是很重要的。如果没有传递 wg 的地址，那么每个 Go 协程将会得到一个 WaitGroup 值的拷贝，因而当它们执行结束时，main 函数并不会知道</strong>。  </p><p>该程序输出：  </p><pre class="line-numbers language-none"><code class="language-none">started Goroutine  2  started Goroutine  0  started Goroutine  1  Goroutine 0 ended  Goroutine 2 ended  Goroutine 1 ended  All go routines finished executing<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于 Go 协程的执行顺序不一定，因此你的输出可能和我不一样。:)  </p><h2 id="工作池的实现"><a href="#工作池的实现" class="headerlink" title="工作池的实现"></a>工作池的实现</h2><p>缓冲信道的重要应用之一就是实现[工作池]。  </p><p>一般而言，工作池就是一组等待任务分配的线程。一旦完成了所分配的任务，这些线程可继续等待任务的分配。  </p><p>我们会使用缓冲信道来实现工作池。我们工作池的任务是计算所输入数字的每一位的和。例如，如果输入 234，结果会是 9（即 2 + 3 + 4）。向工作池输入的是一列伪随机数。  </p><p>我们工作池的核心功能如下：  </p><ul><li>创建一个 Go 协程池，监听一个等待作业分配的输入型缓冲信道。  </li><li>将作业添加到该输入型缓冲信道中。  </li><li>作业完成后，再将结果写入一个输出型缓冲信道。  </li><li>从输出型缓冲信道读取并打印结果。  </li></ul><p>我们会逐步编写这个程序，让代码易于理解。  </p><p>第一步就是创建一个结构体，表示作业和结果。  </p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Job <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>      id       <span class="token builtin">int</span>    randomno <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> Result <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>      job         Job    sumofdigits <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所有 <code>Job</code> 结构体变量都会有 <code>id</code> 和 <code>randomno</code> 两个字段，<code>randomno</code> 用于计算其每位数之和。  </p><p>而 <code>Result</code> 结构体有一个 <code>job</code> 字段，表示所对应的作业，还有一个 <code>sumofdigits</code> 字段，表示计算的结果（每位数字之和）。  </p><p>第二步是分别创建用于接收作业和写入结果的缓冲信道。  </p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> jobs <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> Job<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>  <span class="token keyword">var</span> results <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> Result<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>工作协程（Worker Goroutine）会监听缓冲信道 <code>jobs</code> 里更新的作业。一旦工作协程完成了作业，其结果会写入缓冲信道 <code>results</code>。</p><p>如下所示，<code>digits</code> 函数的任务实际上就是计算整数的每一位之和，最后返回该结果。为了模拟出 <code>digits</code> 在计算过程中花费了一段时间，我们在函数内添加了两秒的休眠时间。  </p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">digits</span><span class="token punctuation">(</span>number <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>      sum <span class="token operator">:=</span> <span class="token number">0</span>    no <span class="token operator">:=</span> number    <span class="token keyword">for</span> no <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>        digit <span class="token operator">:=</span> no <span class="token operator">%</span> <span class="token number">10</span>        sum <span class="token operator">+=</span> digit        no <span class="token operator">/=</span> <span class="token number">10</span>    <span class="token punctuation">&#125;</span>    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>    <span class="token keyword">return</span> sum<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后，我们写一个创建工作协程的函数。  </p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">worker</span><span class="token punctuation">(</span>wg <span class="token operator">*</span>sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> job <span class="token operator">:=</span> <span class="token keyword">range</span> jobs <span class="token punctuation">&#123;</span>        output <span class="token operator">:=</span> Result<span class="token punctuation">&#123;</span>job<span class="token punctuation">,</span> <span class="token function">digits</span><span class="token punctuation">(</span>job<span class="token punctuation">.</span>randomno<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>        results <span class="token operator">&lt;-</span> output    <span class="token punctuation">&#125;</span>    wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的函数创建了一个工作者（Worker），读取 <code>jobs</code> 信道的数据，根据当前的 <code>job</code> 和 <code>digits</code> 函数的返回值，创建了一个 <code>Result</code> 结构体变量，然后将结果写入 <code>results</code> 缓冲信道。<code>worker</code> 函数接收了一个 <code>WaitGroup</code> 类型的 <code>wg</code> 作为参数，当所有的 <code>jobs</code> 完成的时候，调用了 <code>Done()</code> 方法。  </p><p><code>createWorkerPool</code> 函数创建了一个 Go 协程的工作池。  </p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">createWorkerPool</span><span class="token punctuation">(</span>noOfWorkers <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> noOfWorkers<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>        wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">go</span> <span class="token function">worker</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wg<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">close</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面函数的参数是需要创建的工作协程的数量。在创建 Go 协程之前，它调用了 <code>wg.Add(1)</code> 方法，于是 <code>WaitGroup</code> 计数器递增。接下来，我们创建工作协程，并向 <code>worker</code> 函数传递 <code>wg</code> 的地址。创建了需要的工作协程后，函数调用 <code>wg.Wait()</code>，等待所有的 Go 协程执行完毕。所有协程完成执行之后，函数会关闭 <code>results</code> 信道。因为所有协程都已经执行完毕，于是不再需要向 <code>results</code> 信道写入数据了。  </p><p>现在我们已经有了工作池，我们继续编写一个函数，把作业分配给工作者。  </p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">allocate</span><span class="token punctuation">(</span>noOfJobs <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> noOfJobs<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>        randomno <span class="token operator">:=</span> rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">999</span><span class="token punctuation">)</span>        job <span class="token operator">:=</span> Job<span class="token punctuation">&#123;</span>i<span class="token punctuation">,</span> randomno<span class="token punctuation">&#125;</span>        jobs <span class="token operator">&lt;-</span> job    <span class="token punctuation">&#125;</span>    <span class="token function">close</span><span class="token punctuation">(</span>jobs<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的 <code>allocate</code> 函数接收所需创建的作业数量作为输入参数，生成了最大值为 998 的伪随机数，并使用该随机数创建了 <code>Job</code> 结构体变量。这个函数把 for 循环的计数器 <code>i</code> 作为 id，最后把创建的结构体变量写入 <code>jobs</code> 信道。当写入所有的 <code>job</code> 时，它关闭了 <code>jobs</code> 信道。  </p><p>下一步是创建一个读取 <code>results</code> 信道和打印输出的函数。  </p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">result</span><span class="token punctuation">(</span>done <span class="token keyword">chan</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> result <span class="token operator">:=</span> <span class="token keyword">range</span> results <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Job id %d, input random no %d , sum of digits %d\n"</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span>job<span class="token punctuation">.</span>id<span class="token punctuation">,</span> result<span class="token punctuation">.</span>job<span class="token punctuation">.</span>randomno<span class="token punctuation">,</span> result<span class="token punctuation">.</span>sumofdigits<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    done <span class="token operator">&lt;-</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>result</code> 函数读取 <code>results</code> 信道，并打印出 <code>job</code> 的 <code>id</code>、输入的随机数、该随机数的每位数之和。<code>result</code> 函数也接受 <code>done</code> 信道作为参数，当打印所有结果时，<code>done</code> 会被写入 true。  </p><p>现在一切准备充分了。我们继续完成最后一步，在 <code>main()</code> 函数中调用上面所有的函数。  </p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      startTime <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    noOfJobs <span class="token operator">:=</span> <span class="token number">100</span>    <span class="token keyword">go</span> <span class="token function">allocate</span><span class="token punctuation">(</span>noOfJobs<span class="token punctuation">)</span>    done <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token function">result</span><span class="token punctuation">(</span>done<span class="token punctuation">)</span>    noOfWorkers <span class="token operator">:=</span> <span class="token number">10</span>    <span class="token function">createWorkerPool</span><span class="token punctuation">(</span>noOfWorkers<span class="token punctuation">)</span>    <span class="token operator">&lt;-</span>done    endTime <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    diff <span class="token operator">:=</span> endTime<span class="token punctuation">.</span><span class="token function">Sub</span><span class="token punctuation">(</span>startTime<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"total time taken "</span><span class="token punctuation">,</span> diff<span class="token punctuation">.</span><span class="token function">Seconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"seconds"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们首先在 <code>main</code> 函数的第 2 行，保存了程序的起始时间，并在最后一行（第 12 行）计算了 <code>endTime</code> 和 <code>startTime</code> 的差值，显示出程序运行的总时间。由于我们想要通过改变协程数量，来做一点基准指标（Benchmark），所以需要这么做。  </p><p>我们把 <code>noOfJobs</code> 设置为 100，接下来调用了 <code>allocate</code>，向 <code>jobs</code> 信道添加作业。  </p><p>我们创建了 <code>done</code> 信道，并将其传递给 <code>result</code> 协程。于是该协程会开始打印结果，并在完成打印时发出通知。  </p><p>通过调用 <code>createWorkerPool</code> 函数，我们最终创建了一个有 10 个协程的工作池。<code>main</code> 函数会监听 <code>done</code> 信道的通知，等待所有结果打印结束。  </p><p>为了便于参考，下面是整个程序。我还引用了必要的包。  </p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span>    <span class="token string">"math/rand"</span>    <span class="token string">"sync"</span>    <span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">type</span> Job <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>      id       <span class="token builtin">int</span>    randomno <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> Result <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>      job         Job    sumofdigits <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> jobs <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> Job<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>  <span class="token keyword">var</span> results <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> Result<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">digits</span><span class="token punctuation">(</span>number <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>      sum <span class="token operator">:=</span> <span class="token number">0</span>    no <span class="token operator">:=</span> number    <span class="token keyword">for</span> no <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>        digit <span class="token operator">:=</span> no <span class="token operator">%</span> <span class="token number">10</span>        sum <span class="token operator">+=</span> digit        no <span class="token operator">/=</span> <span class="token number">10</span>    <span class="token punctuation">&#125;</span>    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>    <span class="token keyword">return</span> sum<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">worker</span><span class="token punctuation">(</span>wg <span class="token operator">*</span>sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> job <span class="token operator">:=</span> <span class="token keyword">range</span> jobs <span class="token punctuation">&#123;</span>        output <span class="token operator">:=</span> Result<span class="token punctuation">&#123;</span>job<span class="token punctuation">,</span> <span class="token function">digits</span><span class="token punctuation">(</span>job<span class="token punctuation">.</span>randomno<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>        results <span class="token operator">&lt;-</span> output    <span class="token punctuation">&#125;</span>    wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">createWorkerPool</span><span class="token punctuation">(</span>noOfWorkers <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> noOfWorkers<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>        wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">go</span> <span class="token function">worker</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wg<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">close</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">allocate</span><span class="token punctuation">(</span>noOfJobs <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> noOfJobs<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>        randomno <span class="token operator">:=</span> rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">999</span><span class="token punctuation">)</span>        job <span class="token operator">:=</span> Job<span class="token punctuation">&#123;</span>i<span class="token punctuation">,</span> randomno<span class="token punctuation">&#125;</span>        jobs <span class="token operator">&lt;-</span> job    <span class="token punctuation">&#125;</span>    <span class="token function">close</span><span class="token punctuation">(</span>jobs<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">result</span><span class="token punctuation">(</span>done <span class="token keyword">chan</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> result <span class="token operator">:=</span> <span class="token keyword">range</span> results <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Job id %d, input random no %d , sum of digits %d\n"</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span>job<span class="token punctuation">.</span>id<span class="token punctuation">,</span> result<span class="token punctuation">.</span>job<span class="token punctuation">.</span>randomno<span class="token punctuation">,</span> result<span class="token punctuation">.</span>sumofdigits<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    done <span class="token operator">&lt;-</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      startTime <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    noOfJobs <span class="token operator">:=</span> <span class="token number">100</span>    <span class="token keyword">go</span> <span class="token function">allocate</span><span class="token punctuation">(</span>noOfJobs<span class="token punctuation">)</span>    done <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token function">result</span><span class="token punctuation">(</span>done<span class="token punctuation">)</span>    noOfWorkers <span class="token operator">:=</span> <span class="token number">10</span>    <span class="token function">createWorkerPool</span><span class="token punctuation">(</span>noOfWorkers<span class="token punctuation">)</span>    <span class="token operator">&lt;-</span>done    endTime <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    diff <span class="token operator">:=</span> endTime<span class="token punctuation">.</span><span class="token function">Sub</span><span class="token punctuation">(</span>startTime<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"total time taken "</span><span class="token punctuation">,</span> diff<span class="token punctuation">.</span><span class="token function">Seconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"seconds"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了更精确地计算总时间，请在你的本地机器上运行该程序。  </p><p>该程序输出：  </p><pre class="line-numbers language-none"><code class="language-none">Job id 1, input random no 636, sum of digits 15  Job id 0, input random no 878, sum of digits 23  Job id 9, input random no 150, sum of digits 6  ...total time taken  20.01081009 seconds<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序总共会打印 100 行，对应着 100 项作业，然后最后会打印一行程序消耗的总时间。你的输出会和我的不同，因为 Go 协程的运行顺序不一定，同样总时间也会因为硬件而不同。在我的例子中，运行程序大约花费了 20 秒。  </p><p>现在我们把 <code>main</code> 函数里的 <code>noOfWorkers</code> 增加到 20。我们把工作者的数量加倍了。由于工作协程增加了（准确说来是两倍），因此程序花费的总时间会减少（准确说来是一半）。在我的例子里，程序会打印出 10.004364685 秒。  </p><pre class="line-numbers language-none"><code class="language-none">...total time taken  10.004364685 seconds<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>现在我们可以理解了，随着工作协程数量增加，完成作业的总时间会减少。你们可以练习一下：在 <code>main</code> 函数里修改 <code>noOfJobs</code> 和 <code>noOfWorkers</code> 的值，并试着去分析一下结果。  </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2019/06/17/golang/26.jie-gou-ti-qu-dai-lei/"/>
      <url>2019/06/17/golang/26.jie-gou-ti-qu-dai-lei/</url>
      
        <content type="html"><![CDATA[<h1 id="26-结构体取代类"><a href="#26-结构体取代类" class="headerlink" title="26. 结构体取代类"></a>26. 结构体取代类</h1><h2 id="Go-支持面向对象吗？"><a href="#Go-支持面向对象吗？" class="headerlink" title="Go 支持面向对象吗？"></a>Go 支持面向对象吗？</h2><p>Go 并不是完全面向对象的编程语言。Go 官网回答了 Go 是否是面向对象语言，摘录如下。</p><blockquote><p>可以说是，也可以说不是。虽然 Go 有类型和方法，支持面向对象的编程风格，但却没有类型的层次结构。Go  中的“接口”概念提供了一种不同的方法，我们认为它易于使用，也更为普遍。Go  也可以将结构体嵌套使用，这与子类化（Subclassing）类似，但并不完全相同。此外，Go 提供的特性比 C++ 或 Java  更为通用：子类可以由任何类型的数据来定义，甚至是内建类型（如简单的“未装箱的”整型）。这在结构体（类）中没有受到限制。</p></blockquote><p>在接下来的教程里，我们会讨论如何使用 Go 来实现面向对象编程概念。与其它面向对象语言（如 Java）相比，Go 有很多完全不同的特性。</p><h2 id="使用结构体，而非类"><a href="#使用结构体，而非类" class="headerlink" title="使用结构体，而非类"></a>使用结构体，而非类</h2><p>Go 不支持类，而是提供了[结构体]。结构体中可以添加[方法]。这样可以将数据和操作数据的方法绑定在一起，实现与类相似的效果。</p><p>为了加深理解，我们来编写一个示例吧。</p><p>在示例中，我们创建一个自定义[包]，它帮助我们更好地理解，结构体是如何有效地取代类的。</p><p>在你的 Go 工作区创建一个名为 <code>oop</code> 的文件夹。在 <code>opp</code> 中再创建子文件夹 <code>employee</code>。在 <code>employee</code> 内，创建一个名为 <code>employee.go</code> 的文件。</p><p>文件夹结构会是这样：</p><pre class="line-numbers language-none"><code class="language-none">workspacepath -&gt; oop -&gt; employee -&gt; employee.go<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>请将 <code>employee.go</code> 里的内容替换为如下所示的代码。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> employee<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">type</span> Employee <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>      FirstName   <span class="token builtin">string</span>    LastName    <span class="token builtin">string</span>    TotalLeaves <span class="token builtin">int</span>    LeavesTaken <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>e Employee<span class="token punctuation">)</span> <span class="token function">LeavesRemaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s %s has %d leaves remaining"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>FirstName<span class="token punctuation">,</span> e<span class="token punctuation">.</span>LastName<span class="token punctuation">,</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>TotalLeaves <span class="token operator">-</span> e<span class="token punctuation">.</span>LeavesTaken<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述程序里，第 1 行指定了该文件属于 <code>employee</code> 包。而第 7 行声明了一个 <code>Employee</code> 结构体。在第 14 行，结构体 <code>Employee</code> 添加了一个名为 <code>LeavesRemaining</code> 的方法。该方法会计算和显示员工的剩余休假数。于是现在我们有了一个结构体，并绑定了结构体的方法，这与类很相似。</p><p>接着在 <code>oop</code> 文件夹里创建一个文件，命名为 <code>main.go</code>。</p><p>现在目录结构如下所示：  </p><pre class="line-numbers language-none"><code class="language-none">workspacepath -&gt; oop -&gt; employee -&gt; employee.go  workspacepath -&gt; oop -&gt; main.go<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>main.go</code> 的内容如下所示：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"oop/employee"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      e <span class="token operator">:=</span> employee<span class="token punctuation">.</span>Employee <span class="token punctuation">&#123;</span>        FirstName<span class="token punctuation">:</span> <span class="token string">"Sam"</span><span class="token punctuation">,</span>        LastName<span class="token punctuation">:</span> <span class="token string">"Adolf"</span><span class="token punctuation">,</span>        TotalLeaves<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span>        LeavesTaken<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    e<span class="token punctuation">.</span><span class="token function">LeavesRemaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们在第 3 行引用了 <code>employee</code> 包。在 <code>main()</code>（第 12 行），我们调用了 <code>Employee</code> 的 <code>LeavesRemaining()</code> 方法。</p><p>由于有自定义包，这个程序不能在 go playground 上运行。你可以在你的本地运行，在 <code>workspacepath/bin/oop</code> 下输入命令 <code>go install opp</code>，程序会打印输出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Sam Adolf has <span class="token number">10</span> leaves remaining<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="使用-New-函数，而非构造器"><a href="#使用-New-函数，而非构造器" class="headerlink" title="使用 New() 函数，而非构造器"></a>使用 New() 函数，而非构造器</h2><p>我们上面写的程序看起来没什么问题，但还是有一些细节问题需要注意。我们看看当定义一个零值的 <code>employee</code> 结构体变量时，会发生什么。将 <code>main.go</code> 的内容修改为如下代码：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"oop/employee"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> e employee<span class="token punctuation">.</span>Employee    e<span class="token punctuation">.</span><span class="token function">LeavesRemaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们的修改只是创建一个零值的 <code>Employee</code> 结构体变量（第 6 行）。该程序会输出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">has <span class="token number">0</span> leaves remaining<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你可以看到，使用 <code>Employee</code> 创建的零值变量没有什么用。它没有合法的姓名，也没有合理的休假细节。</p><p>在像 Java 这样的 OOP 语言中，是使用构造器来解决这种问题的。一个合法的对象必须使用参数化的构造器来创建。</p><p>Go 并不支持构造器。如果某类型的零值不可用，需要程序员来隐藏该类型，避免从其他包直接访问。程序员应该提供一种名为 <code>NewT(parameters)</code> 的 [函数]，按照要求来初始化 <code>T</code> 类型的变量。按照 Go 的惯例，应该把创建 <code>T</code> 类型变量的函数命名为 <code>NewT(parameters)</code>。这就类似于构造器了。如果一个包只含有一种类型，按照 Go 的惯例，应该把函数命名为 <code>New(parameters)</code>， 而不是 <code>NewT(parameters)</code>。</p><p>让我修改一下原先的代码，使得每当创建 <code>employee</code> 的时候，它都是可用的。</p><p>首先应该让 <code>Employee</code> 结构体不可引用，然后创建一个 <code>New</code> 函数，用于创建 <code>Employee</code> 结构体变量。在 <code>employee.go</code> 中输入下面代码：  </p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> employee<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">type</span> employee <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>      firstName   <span class="token builtin">string</span>    lastName    <span class="token builtin">string</span>    totalLeaves <span class="token builtin">int</span>    leavesTaken <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">New</span><span class="token punctuation">(</span>firstName <span class="token builtin">string</span><span class="token punctuation">,</span> lastName <span class="token builtin">string</span><span class="token punctuation">,</span> totalLeave <span class="token builtin">int</span><span class="token punctuation">,</span> leavesTaken <span class="token builtin">int</span><span class="token punctuation">)</span> employee <span class="token punctuation">&#123;</span>      e <span class="token operator">:=</span> employee <span class="token punctuation">&#123;</span>firstName<span class="token punctuation">,</span> lastName<span class="token punctuation">,</span> totalLeave<span class="token punctuation">,</span> leavesTaken<span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> e<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>e employee<span class="token punctuation">)</span> <span class="token function">LeavesRemaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s %s has %d leaves remaining"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>firstName<span class="token punctuation">,</span> e<span class="token punctuation">.</span>lastName<span class="token punctuation">,</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>totalLeaves <span class="token operator">-</span> e<span class="token punctuation">.</span>leavesTaken<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们进行了一些重要的修改。我们把 <code>Employee</code> 结构体的首字母改为小写 <code>e</code>，也就是将 <code>type Employee struct</code> 改为了 <code>type employee struct</code>。通过这种方法，我们把 <code>employee</code> 结构体变为了不可引用的，防止其他包对它的访问。除非有特殊需求，否则也要隐藏所有不可引用的结构体的所有字段，这是 Go 的最佳实践。由于我们不会在外部包需要 <code>employee</code> 的字段，因此我们也让这些字段无法引用。</p><p>同样，我们还修改了 <code>LeavesRemaining()</code> 的方法。</p><p>现在由于 <code>employee</code> 不可引用，因此不能在其他包内直接创建 <code>Employee</code> 类型的变量。于是我们在第 14 行提供了一个可引用的 <code>New</code> 函数，该函数接收必要的参数，返回一个新创建的 <code>employee</code> 结构体变量。</p><p>这个程序还需要一些必要的修改，但现在先运行这个程序，理解一下当前的修改。如果运行当前程序，编译器会报错，如下所示：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go/src/constructor/main.go:6: undefined: employee.Employee<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这是因为我们将 <code>Employee</code> 设置为不可引用，因此编译器会报错，提示该类型没有在 <code>main.go</code> 中定义。很完美，正如我们期望的一样，其他包现在不能轻易创建零值的 <code>employee</code> 变量了。我们成功地避免了创建不可用的 <code>employee</code> 结构体变量。现在创建 <code>employee</code> 变量的唯一方法就是使用 <code>New</code> 函数。</p><p>如下所示，修改 <code>main.go</code> 里的内容。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main  <span class="token keyword">import</span> <span class="token string">"oop/employee"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      e <span class="token operator">:=</span> employee<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"Sam"</span><span class="token punctuation">,</span> <span class="token string">"Adolf"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>    e<span class="token punctuation">.</span><span class="token function">LeavesRemaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该文件唯一的修改就是第 6 行。通过向 <code>New</code> 函数传入所需变量，我们创建了一个新的 <code>employee</code> 结构体变量。</p><p>下面是修改后的两个文件的内容。</p><p>employee.go</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> employee<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">type</span> employee <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>      firstName   <span class="token builtin">string</span>    lastName    <span class="token builtin">string</span>    totalLeaves <span class="token builtin">int</span>    leavesTaken <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">New</span><span class="token punctuation">(</span>firstName <span class="token builtin">string</span><span class="token punctuation">,</span> lastName <span class="token builtin">string</span><span class="token punctuation">,</span> totalLeave <span class="token builtin">int</span><span class="token punctuation">,</span> leavesTaken <span class="token builtin">int</span><span class="token punctuation">)</span> employee <span class="token punctuation">&#123;</span>      e <span class="token operator">:=</span> employee <span class="token punctuation">&#123;</span>firstName<span class="token punctuation">,</span> lastName<span class="token punctuation">,</span> totalLeave<span class="token punctuation">,</span> leavesTaken<span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> e<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>e employee<span class="token punctuation">)</span> <span class="token function">LeavesRemaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s %s has %d leaves remaining"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>firstName<span class="token punctuation">,</span> e<span class="token punctuation">.</span>lastName<span class="token punctuation">,</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>totalLeaves <span class="token operator">-</span> e<span class="token punctuation">.</span>leavesTaken<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>main.go</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main  <span class="token keyword">import</span> <span class="token string">"oop/employee"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      e <span class="token operator">:=</span> employee<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"Sam"</span><span class="token punctuation">,</span> <span class="token string">"Adolf"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>    e<span class="token punctuation">.</span><span class="token function">LeavesRemaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行该程序，会输出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Sam Adolf has <span class="token number">10</span> leaves remaining<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在你能明白了，虽然 Go 不支持类，但结构体能够很好地取代类，而以 <code>New(parameters)</code> 签名的方法可以替代构造器。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2019/06/17/golang/25.mutex/"/>
      <url>2019/06/17/golang/25.mutex/</url>
      
        <content type="html"><![CDATA[<h1 id="25-Mutex"><a href="#25-Mutex" class="headerlink" title="25. Mutex"></a>25. Mutex</h1><h2 id="临界区"><a href="#临界区" class="headerlink" title="临界区"></a>临界区</h2><p>在学习 Mutex 之前，我们需要理解并发编程中临界区（Critical Section）的概念。当程序并发地运行时，多个 [Go 协程]不应该同时访问那些修改共享资源的代码。这些修改共享资源的代码称为临界区。例如，假设我们有一段代码，将一个变量 <code>x</code> 自增 1。  </p><pre class="line-numbers language-go" data-language="go"><code class="language-go">x <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果只有一个 Go 协程访问上面的代码段，那都没有任何问题。  </p><p>但当有多个协程并发运行时，代码却会出错，让我们看看究竟是为什么吧。简单起见，假设在一行代码的前面，我们已经运行了两个 Go 协程。  </p><p>在上一行代码的内部，系统执行程序时分为如下几个步骤（这里其实还有很多包括寄存器的技术细节，以及加法的工作原理等，但对于我们的系列教程，只需认为只有三个步骤就好了）：  </p><ol><li>获得 x 的当前值</li><li>计算 x + 1</li><li>将步骤 2 计算得到的值赋值给 x</li></ol><p>如果只有一个协程执行上面的三个步骤，不会有问题。  </p><p>我们讨论一下当有两个并发的协程执行该代码时，会发生什么。下图描述了当两个协程并发地访问代码行 <code>x = x + 1</code> 时，可能出现的一种情况。 </p><p><img src="/Users/liuqingzheng/Desktop/go%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/image-20190210180333643.png" alt="image-20190210180333643"></p><p>我们假设 <code>x</code> 的初始值为 0。而协程 1 获取 <code>x</code> 的初始值，并计算 <code>x + 1</code>。而在协程 1 将计算值赋值给 <code>x</code> 之前，系统上下文切换到了协程 2。于是，协程 2 获取了 <code>x</code> 的初始值（依然为 0），并计算 <code>x + 1</code>。接着系统上下文又切换回了协程 1。现在，协程 1 将计算值 1 赋值给 <code>x</code>，因此 <code>x</code> 等于 1。然后，协程 2 继续开始执行，把计算值（依然是 1）复制给了 <code>x</code>，因此在所有协程执行完毕之后，<code>x</code> 都等于 1。  </p><p>现在我们考虑另外一种可能发生的情况。  </p><p><img src="/Users/liuqingzheng/Desktop/go%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/image-20190210180428162.png" alt="image-20190210180428162">  </p><p>在上面的情形里，协程 1 开始执行，完成了三个步骤后结束，因此 <code>x</code> 的值等于 1。接着，开始执行协程 2。目前 <code>x</code> 的值等于 1。而当协程 2 执行完毕时，<code>x</code> 的值等于 2。  </p><p>所以，从这两个例子你可以发现，根据上下文切换的不同情形，<code>x</code> 的最终值是 1 或者 2。这种不太理想的情况称为竞态条件（Race Condition），其程序的输出是由协程的执行顺序决定的。  </p><p><strong>在上例中，如果在任意时刻只允许一个 Go 协程访问临界区，那么就可以避免竞态条件。而使用 Mutex 可以达到这个目的</strong>。  </p><h2 id="Mutex"><a href="#Mutex" class="headerlink" title="Mutex"></a>Mutex</h2><p>Mutex 用于提供一种加锁机制（Locking Mechanism），可确保在某时刻只有一个协程在临界区运行，以防止出现竞态条件。  </p><p>Mutex 可以在 [sync] 包内找到。[Mutex] 定义了两个方法：[Lock]和 [Unlock](。所有在 <code>Lock</code> 和 <code>Unlock</code> 之间的代码，都只能由一个 Go 协程执行，于是就可以避免竞态条件。  </p><pre class="line-numbers language-go" data-language="go"><code class="language-go">mutex<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  x <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span>  mutex<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在上面的代码中，<code>x = x + 1</code> 只能由一个 Go 协程执行，因此避免了竞态条件。  </p><p>如果有一个 Go 协程已经持有了锁（Lock），当其他协程试图获得该锁时，这些协程会被阻塞，直到 Mutex 解除锁定为止。  </p><h2 id="含有竞态条件的程序"><a href="#含有竞态条件的程序" class="headerlink" title="含有竞态条件的程序"></a>含有竞态条件的程序</h2><p>在本节里，我们会编写一个含有竞态条件的程序，而在接下来一节，我们再修复竞态条件的问题。  </p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main  <span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span>    <span class="token string">"sync"</span>    <span class="token punctuation">)</span><span class="token keyword">var</span> x  <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">func</span> <span class="token function">increment</span><span class="token punctuation">(</span>wg <span class="token operator">*</span>sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      x <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span>    wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> w sync<span class="token punctuation">.</span>WaitGroup    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>        w<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token keyword">go</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>w<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    w<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"final value of x"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述程序里，第 7 行的 <code>increment</code> 函数把 <code>x</code> 的值加 1，并调用 [WaitGroup] 的 <code>Done()</code>，通知该函数已结束。  </p><p>在上述程序的第 15 行，我们生成了 1000 个 <code>increment</code> 协程。每个 Go 协程并发地运行，由于第 8 行试图增加 <code>x</code> 的值，因此多个并发的协程试图访问 <code>x</code> 的值，这时就会发生竞态条件。  </p><p>由于 [playground] 具有确定性，竞态条件不会在 playground 发生，请在你的本地运行该程序。请在你的本地机器上多运行几次，可以发现由于竞态条件，每一次输出都不同。我其中遇到的几次输出有 <code>final value of x 941</code>、<code>final value of x 928</code>、<code>final value of x 922</code> 等。  </p><h2 id="使用-Mutex"><a href="#使用-Mutex" class="headerlink" title="使用 Mutex"></a>使用 Mutex</h2><p>在前面的程序里，我们创建了 1000 个 Go 协程。如果每个协程对 <code>x</code> 加 1，最终 <code>x</code> 期望的值应该是 1000。在本节，我们会在程序里使用 Mutex，修复竞态条件的问题。  </p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main  <span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span>    <span class="token string">"sync"</span>    <span class="token punctuation">)</span><span class="token keyword">var</span> x  <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">func</span> <span class="token function">increment</span><span class="token punctuation">(</span>wg <span class="token operator">*</span>sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">,</span> m <span class="token operator">*</span>sync<span class="token punctuation">.</span>Mutex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      m<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    x <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span>    m<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> w sync<span class="token punctuation">.</span>WaitGroup    <span class="token keyword">var</span> m sync<span class="token punctuation">.</span>Mutex    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>        w<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token keyword">go</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>w<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    w<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"final value of x"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[Mutex]是一个结构体类型，我们在第 15 行创建了 <code>Mutex</code> 类型的变量 <code>m</code>，其值为零值。在上述程序里，我们修改了 <code>increment</code> 函数，将增加 <code>x</code> 的代码（<code>x = x + 1</code>）放置在 <code>m.Lock()</code> 和 <code>m.Unlock()</code>之间。现在这段代码不存在竞态条件了，因为任何时刻都只允许一个协程执行这段代码。  </p><p>于是如果运行该程序，会输出：  </p><pre class="line-numbers language-none"><code class="language-none">final value of x 1000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在第 18 行，传递 Mutex 的地址很重要。如果传递的是 Mutex 的值，而非地址，那么每个协程都会得到 Mutex 的一份拷贝，竞态条件还是会发生。  </p><h2 id="使用信道处理竞态条件"><a href="#使用信道处理竞态条件" class="headerlink" title="使用信道处理竞态条件"></a>使用信道处理竞态条件</h2><p>我们还能用信道来处理竞态条件。看看是怎么做的。  </p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main  <span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span>    <span class="token string">"sync"</span>    <span class="token punctuation">)</span><span class="token keyword">var</span> x  <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">func</span> <span class="token function">increment</span><span class="token punctuation">(</span>wg <span class="token operator">*</span>sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">,</span> ch <span class="token keyword">chan</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      ch <span class="token operator">&lt;-</span> <span class="token boolean">true</span>    x <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span>    <span class="token operator">&lt;-</span> ch    wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> w sync<span class="token punctuation">.</span>WaitGroup    ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>        w<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token keyword">go</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>w<span class="token punctuation">,</span> ch<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    w<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"final value of x"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述程序中，我们创建了容量为 1 的[缓冲信道]，并在第 18 行将它传入 <code>increment</code> 协程。该缓冲信道用于保证只有一个协程访问增加 <code>x</code> 的临界区。具体的实现方法是在 <code>x</code> 增加之前（第 8 行），传入 <code>true</code> 给缓冲信道。由于缓冲信道的容量为 1，所以任何其他协程试图写入该信道时，都会发生阻塞，直到 <code>x</code> 增加后，信道的值才会被读取（第 10 行）。实际上这就保证了只允许一个协程访问临界区。  </p><p>该程序也输出：  </p><pre class="line-numbers language-none"><code class="language-none">final value of x 1000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Mutex-vs-信道"><a href="#Mutex-vs-信道" class="headerlink" title="Mutex vs 信道"></a>Mutex vs 信道</h2><p>通过使用 Mutex  和信道，我们已经解决了竞态条件的问题。那么我们该选择使用哪一个？答案取决于你想要解决的问题。如果你想要解决的问题更适用于 Mutex，那么就用  Mutex。如果需要使用 Mutex，无须犹豫。而如果该问题更适用于信道，那就使用信道。:)  </p><p>由于信道是 Go 语言很酷的特性，大多数 Go 新手处理每个并发问题时，使用的都是信道。这是不对的。Go 给了你选择 Mutex 和信道的余地，选择其中之一都可以是正确的。  </p><p>总体说来，当 Go 协程需要与其他协程通信时，可以使用信道。而当只允许一个协程访问临界区时，可以使用 Mutex。  </p><p>就我们上面解决的问题而言，我更倾向于使用 Mutex，因为该问题并不需要协程间的通信。所以 Mutex 是很自然的选择。  </p><p>我的建议是去选择针对问题的工具，而别让问题去将就工具</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2019/06/17/golang/27.zu-he-qu-dai-ji-cheng/"/>
      <url>2019/06/17/golang/27.zu-he-qu-dai-ji-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="27-组合取代继承"><a href="#27-组合取代继承" class="headerlink" title="27. 组合取代继承"></a>27. 组合取代继承</h1><p>Go 不支持继承，但它支持组合（Composition）。组合一般定义为“合并在一起”。汽车就是一个关于组合的例子：一辆汽车由车轮、引擎和其他各种部件组合在一起。</p><h2 id="通过嵌套结构体进行组合"><a href="#通过嵌套结构体进行组合" class="headerlink" title="通过嵌套结构体进行组合"></a>通过嵌套结构体进行组合</h2><p>在 Go 中，通过在结构体内嵌套结构体，可以实现组合。</p><p>组合的典型例子就是博客帖子。每一个博客的帖子都有标题、内容和作者信息。使用组合可以很好地表示它们。通过学习本教程后面的内容，我们会知道如何实现组合。</p><p>我们首先创建一个 <code>author</code> 结构体。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">type</span> author <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>      firstName <span class="token builtin">string</span>    lastName  <span class="token builtin">string</span>    bio       <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>a author<span class="token punctuation">)</span> <span class="token function">fullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%s %s"</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>firstName<span class="token punctuation">,</span> a<span class="token punctuation">.</span>lastName<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的代码片段中，我们创建了一个 <code>author</code> 结构体，<code>author</code> 的字段有 <code>firstname</code>、<code>lastname</code> 和 <code>bio</code>。我们还添加了一个 <code>fullName()</code> 方法，其中 <code>author</code> 作为接收者类型，该方法返回了作者的全名。</p><p>下一步我们创建 <code>post</code> 结构体。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> post <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>      title     <span class="token builtin">string</span>    content   <span class="token builtin">string</span>    author<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p post<span class="token punctuation">)</span> <span class="token function">details</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Title: "</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>title<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Content: "</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>content<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Author: "</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>author<span class="token punctuation">.</span><span class="token function">fullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Bio: "</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>author<span class="token punctuation">.</span>bio<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>post</code> 结构体的字段有 <code>title</code> 和 <code>content</code>。它还有一个嵌套的匿名字段 <code>author</code>。该字段指定 <code>author</code> 组成了 <code>post</code> 结构体。现在 <code>post</code> 可以访问 <code>author</code> 结构体的所有字段和方法。我们同样给 <code>post</code> 结构体添加了 <code>details()</code> 方法，用于打印标题、内容和作者的全名与简介。</p><p>一旦结构体内嵌套了一个结构体字段，Go 可以使我们访问其嵌套的字段，好像这些字段属于外部结构体一样。所以上面第 11 行的 <code>p.author.fullName()</code> 可以替换为 <code>p.fullName()</code>。于是，<code>details()</code> 方法可以重写，如下所示：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>p post<span class="token punctuation">)</span> <span class="token function">details</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Title: "</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>title<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Content: "</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>content<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Author: "</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span><span class="token function">fullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Bio: "</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>bio<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在，我们的 <code>author</code> 和 <code>post</code> 结构体都已准备就绪，我们来创建一个博客帖子来完成这个程序。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">type</span> author <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>      firstName <span class="token builtin">string</span>    lastName  <span class="token builtin">string</span>    bio       <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>a author<span class="token punctuation">)</span> <span class="token function">fullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%s %s"</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>firstName<span class="token punctuation">,</span> a<span class="token punctuation">.</span>lastName<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> post <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>      title   <span class="token builtin">string</span>    content <span class="token builtin">string</span>    author<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p post<span class="token punctuation">)</span> <span class="token function">details</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Title: "</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>title<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Content: "</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>content<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Author: "</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span><span class="token function">fullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Bio: "</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>bio<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      author1 <span class="token operator">:=</span> author<span class="token punctuation">&#123;</span>        <span class="token string">"Naveen"</span><span class="token punctuation">,</span>        <span class="token string">"Ramanathan"</span><span class="token punctuation">,</span>        <span class="token string">"Golang Enthusiast"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    post1 <span class="token operator">:=</span> post<span class="token punctuation">&#123;</span>        <span class="token string">"Inheritance in Go"</span><span class="token punctuation">,</span>        <span class="token string">"Go supports composition instead of inheritance"</span><span class="token punctuation">,</span>        author1<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    post1<span class="token punctuation">.</span><span class="token function">details</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面程序中，main 函数在第 31 行新建了一个 <code>author</code> 结构体变量。而在第 36 行，我们通过嵌套 <code>author1</code> 来创建一个 <code>post</code>。该程序输出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Title:  Inheritance <span class="token keyword">in</span> Go  Content:  Go supports composition instead of inheritance  Author:  Naveen Ramanathan  Bio:  Golang Enthusiast<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="结构体切片的嵌套"><a href="#结构体切片的嵌套" class="headerlink" title="结构体切片的嵌套"></a>结构体切片的嵌套</h2><p>我们可以进一步处理这个示例，使用博客帖子的切片来创建一个网站。</p><p>我们首先定义 <code>website</code> 结构体。请在上述代码里的 main 函数中，添加下面的代码，并运行它。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> website <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>          <span class="token punctuation">[</span><span class="token punctuation">]</span>post<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>w website<span class="token punctuation">)</span> <span class="token function">contents</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Contents of Website\n"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> w<span class="token punctuation">.</span>posts <span class="token punctuation">&#123;</span>        v<span class="token punctuation">.</span><span class="token function">details</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在你添加上述代码后，当你运行程序时，编译器将会报错，如下所示：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">main.go:31:9: syntax error: unexpected <span class="token punctuation">[</span>, expecting field name or embedded <span class="token builtin class-name">type</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这项错误指出了嵌套的结构体切片 <code>[]post</code>。错误的原因是结构体不能嵌套一个匿名切片。我们需要一个字段名。所以我们来修复这个错误，让编译器顺利通过。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> website <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>          posts <span class="token punctuation">[</span><span class="token punctuation">]</span>post<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看到，我给帖子的切片 <code>[]post</code> 添加了字段名 <code>posts</code>。</p><p>现在我们来修改主函数，为我们的新网站创建一些帖子吧。</p><p>修改后的完整代码如下所示：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">type</span> author <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>      firstName <span class="token builtin">string</span>    lastName  <span class="token builtin">string</span>    bio       <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>a author<span class="token punctuation">)</span> <span class="token function">fullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%s %s"</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>firstName<span class="token punctuation">,</span> a<span class="token punctuation">.</span>lastName<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> post <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>      title   <span class="token builtin">string</span>    content <span class="token builtin">string</span>    author<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p post<span class="token punctuation">)</span> <span class="token function">details</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Title: "</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>title<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Content: "</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>content<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Author: "</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span><span class="token function">fullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Bio: "</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>bio<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> website <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>   posts <span class="token punctuation">[</span><span class="token punctuation">]</span>post<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>w website<span class="token punctuation">)</span> <span class="token function">contents</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Contents of Website\n"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> w<span class="token punctuation">.</span>posts <span class="token punctuation">&#123;</span>        v<span class="token punctuation">.</span><span class="token function">details</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      author1 <span class="token operator">:=</span> author<span class="token punctuation">&#123;</span>        <span class="token string">"Naveen"</span><span class="token punctuation">,</span>        <span class="token string">"Ramanathan"</span><span class="token punctuation">,</span>        <span class="token string">"Golang Enthusiast"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    post1 <span class="token operator">:=</span> post<span class="token punctuation">&#123;</span>        <span class="token string">"Inheritance in Go"</span><span class="token punctuation">,</span>        <span class="token string">"Go supports composition instead of inheritance"</span><span class="token punctuation">,</span>        author1<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    post2 <span class="token operator">:=</span> post<span class="token punctuation">&#123;</span>        <span class="token string">"Struct instead of Classes in Go"</span><span class="token punctuation">,</span>        <span class="token string">"Go does not support classes but methods can be added to structs"</span><span class="token punctuation">,</span>        author1<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    post3 <span class="token operator">:=</span> post<span class="token punctuation">&#123;</span>        <span class="token string">"Concurrency"</span><span class="token punctuation">,</span>        <span class="token string">"Go is a concurrent language and not a parallel one"</span><span class="token punctuation">,</span>        author1<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    w <span class="token operator">:=</span> website<span class="token punctuation">&#123;</span>        posts<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>post<span class="token punctuation">&#123;</span>post1<span class="token punctuation">,</span> post2<span class="token punctuation">,</span> post3<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    w<span class="token punctuation">.</span><span class="token function">contents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的主函数中，我们创建了一个作者 <code>author1</code>，以及三个帖子 <code>post1</code>、<code>post2</code> 和 <code>post3</code>。我们最后通过嵌套三个帖子，在第 62 行创建了网站 <code>w</code>，并在下一行显示内容。</p><p>程序会输出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Contents of WebsiteTitle:  Inheritance <span class="token keyword">in</span> Go  Content:  Go supports composition instead of inheritance  Author:  Naveen Ramanathan  Bio:  Golang EnthusiastTitle:  Struct instead of Classes <span class="token keyword">in</span> Go  Content:  Go does not support classes but methods can be added to structs  Author:  Naveen Ramanathan  Bio:  Golang EnthusiastTitle:  Concurrency  Content:  Go is a concurrent language and not a parallel one  Author:  Naveen Ramanathan  Bio:  Golang Enthusiast<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2019/06/17/golang/28.duo-tai/"/>
      <url>2019/06/17/golang/28.duo-tai/</url>
      
        <content type="html"><![CDATA[<h1 id="28-多态"><a href="#28-多态" class="headerlink" title="28. 多态"></a>28. 多态</h1><p>Go 通过[接口]来实现多态。我们已经讨论过，在 Go 语言中，我们是隐式地实现接口。一个类型如果定义了接口所声明的全部[方法]，那它就实现了该接口。现在我们来看看，利用接口，Go 是如何实现多态的。</p><h2 id="使用接口实现多态"><a href="#使用接口实现多态" class="headerlink" title="使用接口实现多态"></a>使用接口实现多态</h2><p>一个类型如果定义了接口的所有方法，那它就隐式地实现了该接口。</p><p><strong>所有实现了接口的类型，都可以把它的值保存在一个接口类型的变量中。在 Go 中，我们使用接口的这种特性来实现多态</strong>。</p><p>通过一个程序我们来理解 Go 语言的多态，它会计算一个组织机构的净收益。为了简单起见，我们假设这个虚构的组织所获得的收入来源于两个项目：<code>fixed billing</code> 和 <code>time and material</code>。该组织的净收益等于这两个项目的收入总和。同样为了简单起见，我们假设货币单位是美元，而无需处理美分。因此货币只需简单地用 <code>int</code> 来表示。</p><p>我们首先定义一个接口 <code>Income</code>。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Income <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>      <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span>    <span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上面定义了接口 <code>Interface</code>，它包含了两个方法：<code>calculate()</code> 计算并返回项目的收入，而 <code>source()</code> 返回项目名称。</p><p>下面我们定义一个表示 <code>FixedBilling</code> 项目的结构体类型。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> FixedBilling <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>      projectName <span class="token builtin">string</span>    biddedAmount <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>项目 <code>FixedBillin</code> 有两个字段：<code>projectName</code> 表示项目名称，而 <code>biddedAmount</code> 表示组织向该项目投标的金额。</p><p><code>TimeAndMaterial</code> 结构体用于表示项目 Time and Material。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> TimeAndMaterial <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>      projectName <span class="token builtin">string</span>    noOfHours  <span class="token builtin">int</span>    hourlyRate <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结构体 <code>TimeAndMaterial</code> 拥有三个字段名：<code>projectName</code>、<code>noOfHours</code> 和 <code>hourlyRate</code>。</p><p>下一步我们给这些结构体类型定义方法，计算并返回实际收入和项目名称。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>fb FixedBilling<span class="token punctuation">)</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> fb<span class="token punctuation">.</span>biddedAmount<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>fb FixedBilling<span class="token punctuation">)</span> <span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> fb<span class="token punctuation">.</span>projectName<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>tm TimeAndMaterial<span class="token punctuation">)</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> tm<span class="token punctuation">.</span>noOfHours <span class="token operator">*</span> tm<span class="token punctuation">.</span>hourlyRate<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>tm TimeAndMaterial<span class="token punctuation">)</span> <span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> tm<span class="token punctuation">.</span>projectName<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在项目 <code>FixedBilling</code> 里面，收入就是项目的投标金额。因此我们返回 <code>FixedBilling</code> 类型的 <code>calculate()</code> 方法。</p><p>而在项目 <code>TimeAndMaterial</code> 里面，收入等于 <code>noOfHours</code> 和 <code>hourlyRate</code> 的乘积，作为 <code>TimeAndMaterial</code> 类型的 <code>calculate()</code> 方法的返回值。</p><p>我们还通过 <code>source()</code> 方法返回了表示收入来源的项目名称。</p><p>由于 <code>FixedBilling</code> 和 <code>TimeAndMaterial</code> 两个结构体都定义了 <code>Income</code> 接口的两个方法：<code>calculate()</code> 和 <code>source()</code>，因此这两个结构体都实现了 <code>Income</code> 接口。</p><p>我们来声明一个 <code>calculateNetIncome</code> 函数，用来计算并打印总收入。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">calculateNetIncome</span><span class="token punctuation">(</span>ic <span class="token punctuation">[</span><span class="token punctuation">]</span>Income<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> netincome <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> income <span class="token operator">:=</span> <span class="token keyword">range</span> ic <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Income From %s = $%d\n"</span><span class="token punctuation">,</span> income<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> income<span class="token punctuation">.</span><span class="token function">calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        netincome <span class="token operator">+=</span> income<span class="token punctuation">.</span><span class="token function">calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Net income of organisation = $%d"</span><span class="token punctuation">,</span> netincome<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的[函数]接收一个 <code>Income</code> 接口类型的[切片]作为参数。该函数会遍历这个接口切片，并依个调用 <code>calculate()</code> 方法，计算出总收入。该函数同样也会通过调用 <code>source()</code> 显示收入来源。根据 <code>Income</code> 接口的具体类型，程序会调用不同的 <code>calculate()</code> 和 <code>source()</code> 方法。于是，我们在 <code>calculateNetIncome</code> 函数中就实现了多态。</p><p>如果在该组织以后增加了新的收入来源，<code>calculateNetIncome</code> 无需修改一行代码，就可以正确地计算总收入了。</p><p>最后就剩下这个程序的 <code>main</code> 函数了。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      project1 <span class="token operator">:=</span> FixedBilling<span class="token punctuation">&#123;</span>projectName<span class="token punctuation">:</span> <span class="token string">"Project 1"</span><span class="token punctuation">,</span> biddedAmount<span class="token punctuation">:</span> <span class="token number">5000</span><span class="token punctuation">&#125;</span>    project2 <span class="token operator">:=</span> FixedBilling<span class="token punctuation">&#123;</span>projectName<span class="token punctuation">:</span> <span class="token string">"Project 2"</span><span class="token punctuation">,</span> biddedAmount<span class="token punctuation">:</span> <span class="token number">10000</span><span class="token punctuation">&#125;</span>    project3 <span class="token operator">:=</span> TimeAndMaterial<span class="token punctuation">&#123;</span>projectName<span class="token punctuation">:</span> <span class="token string">"Project 3"</span><span class="token punctuation">,</span> noOfHours<span class="token punctuation">:</span> <span class="token number">160</span><span class="token punctuation">,</span> hourlyRate<span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">&#125;</span>    incomeStreams <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>Income<span class="token punctuation">&#123;</span>project1<span class="token punctuation">,</span> project2<span class="token punctuation">,</span> project3<span class="token punctuation">&#125;</span>    <span class="token function">calculateNetIncome</span><span class="token punctuation">(</span>incomeStreams<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的 <code>main</code> 函数中，我们创建了三个项目，有两个是 <code>FixedBilling</code> 类型，一个是 <code>TimeAndMaterial</code> 类型。接着我们创建了一个 <code>Income</code> 类型的切片，存放了这三个项目。由于这三个项目都实现了 <code>Interface</code> 接口，因此可以把这三个项目放入 <code>Income</code> 切片。最后我们将该切片作为参数，调用了 <code>calculateNetIncome</code> 函数，显示了项目不同的收益和收入来源。</p><p>以下完整的代码供你参考。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">type</span> Income <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>      <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span>    <span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> FixedBilling <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>      projectName <span class="token builtin">string</span>    biddedAmount <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> TimeAndMaterial <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>      projectName <span class="token builtin">string</span>    noOfHours  <span class="token builtin">int</span>    hourlyRate <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>fb FixedBilling<span class="token punctuation">)</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> fb<span class="token punctuation">.</span>biddedAmount<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>fb FixedBilling<span class="token punctuation">)</span> <span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> fb<span class="token punctuation">.</span>projectName<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>tm TimeAndMaterial<span class="token punctuation">)</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> tm<span class="token punctuation">.</span>noOfHours <span class="token operator">*</span> tm<span class="token punctuation">.</span>hourlyRate<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>tm TimeAndMaterial<span class="token punctuation">)</span> <span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> tm<span class="token punctuation">.</span>projectName<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">calculateNetIncome</span><span class="token punctuation">(</span>ic <span class="token punctuation">[</span><span class="token punctuation">]</span>Income<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> netincome <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> income <span class="token operator">:=</span> <span class="token keyword">range</span> ic <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Income From %s = $%d\n"</span><span class="token punctuation">,</span> income<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> income<span class="token punctuation">.</span><span class="token function">calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        netincome <span class="token operator">+=</span> income<span class="token punctuation">.</span><span class="token function">calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Net income of organisation = $%d"</span><span class="token punctuation">,</span> netincome<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      project1 <span class="token operator">:=</span> FixedBilling<span class="token punctuation">&#123;</span>projectName<span class="token punctuation">:</span> <span class="token string">"Project 1"</span><span class="token punctuation">,</span> biddedAmount<span class="token punctuation">:</span> <span class="token number">5000</span><span class="token punctuation">&#125;</span>    project2 <span class="token operator">:=</span> FixedBilling<span class="token punctuation">&#123;</span>projectName<span class="token punctuation">:</span> <span class="token string">"Project 2"</span><span class="token punctuation">,</span> biddedAmount<span class="token punctuation">:</span> <span class="token number">10000</span><span class="token punctuation">&#125;</span>    project3 <span class="token operator">:=</span> TimeAndMaterial<span class="token punctuation">&#123;</span>projectName<span class="token punctuation">:</span> <span class="token string">"Project 3"</span><span class="token punctuation">,</span> noOfHours<span class="token punctuation">:</span> <span class="token number">160</span><span class="token punctuation">,</span> hourlyRate<span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">&#125;</span>    incomeStreams <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>Income<span class="token punctuation">&#123;</span>project1<span class="token punctuation">,</span> project2<span class="token punctuation">,</span> project3<span class="token punctuation">&#125;</span>    <span class="token function">calculateNetIncome</span><span class="token punctuation">(</span>incomeStreams<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该程序会输出：</p><pre class="line-numbers language-none"><code class="language-none">Income From Project 1 &#x3D; $5000  Income From Project 2 &#x3D; $10000  Income From Project 3 &#x3D; $4000  Net income of organisation &#x3D; $19000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="新增收益流"><a href="#新增收益流" class="headerlink" title="新增收益流"></a>新增收益流</h2><p>假设前面的组织通过广告业务，建立了一个新的收益流（Income Stream）。我们可以看到添加它非常简单，并且计算总收益也很容易，我们无需对 <code>calculateNetIncome</code> 函数进行任何修改。这就是多态的好处。</p><p>我们首先定义 <code>Advertisement</code> 类型，并在 <code>Advertisement</code> 类型中定义 <code>calculate()</code> 和 <code>source()</code> 方法。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Advertisement <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>      adName     <span class="token builtin">string</span>    CPC        <span class="token builtin">int</span>    noOfClicks <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>a Advertisement<span class="token punctuation">)</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> a<span class="token punctuation">.</span>CPC <span class="token operator">*</span> a<span class="token punctuation">.</span>noOfClicks<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>a Advertisement<span class="token punctuation">)</span> <span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> a<span class="token punctuation">.</span>adName<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Advertisement</code> 类型有三个字段，分别是 <code>adName</code>、<code>CPC</code>（每次点击成本）和 <code>noOfClicks</code>（点击次数）。广告的总收益等于 <code>CPC</code> 和 <code>noOfClicks</code> 的乘积。</p><p>现在我们稍微修改一下 <code>main</code> 函数，把新的收益流添加进来。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      project1 <span class="token operator">:=</span> FixedBilling<span class="token punctuation">&#123;</span>projectName<span class="token punctuation">:</span> <span class="token string">"Project 1"</span><span class="token punctuation">,</span> biddedAmount<span class="token punctuation">:</span> <span class="token number">5000</span><span class="token punctuation">&#125;</span>    project2 <span class="token operator">:=</span> FixedBilling<span class="token punctuation">&#123;</span>projectName<span class="token punctuation">:</span> <span class="token string">"Project 2"</span><span class="token punctuation">,</span> biddedAmount<span class="token punctuation">:</span> <span class="token number">10000</span><span class="token punctuation">&#125;</span>    project3 <span class="token operator">:=</span> TimeAndMaterial<span class="token punctuation">&#123;</span>projectName<span class="token punctuation">:</span> <span class="token string">"Project 3"</span><span class="token punctuation">,</span> noOfHours<span class="token punctuation">:</span> <span class="token number">160</span><span class="token punctuation">,</span> hourlyRate<span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">&#125;</span>    bannerAd <span class="token operator">:=</span> Advertisement<span class="token punctuation">&#123;</span>adName<span class="token punctuation">:</span> <span class="token string">"Banner Ad"</span><span class="token punctuation">,</span> CPC<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> noOfClicks<span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">&#125;</span>    popupAd <span class="token operator">:=</span> Advertisement<span class="token punctuation">&#123;</span>adName<span class="token punctuation">:</span> <span class="token string">"Popup Ad"</span><span class="token punctuation">,</span> CPC<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> noOfClicks<span class="token punctuation">:</span> <span class="token number">750</span><span class="token punctuation">&#125;</span>    incomeStreams <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>Income<span class="token punctuation">&#123;</span>project1<span class="token punctuation">,</span> project2<span class="token punctuation">,</span> project3<span class="token punctuation">,</span> bannerAd<span class="token punctuation">,</span> popupAd<span class="token punctuation">&#125;</span>    <span class="token function">calculateNetIncome</span><span class="token punctuation">(</span>incomeStreams<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们创建了两个广告项目，即 <code>bannerAd</code> 和 <code>popupAd</code>。<code>incomeStream</code> 切片包含了这两个创建的广告项目。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">type</span> Income <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>      <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span>    <span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> FixedBilling <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>      projectName  <span class="token builtin">string</span>    biddedAmount <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> TimeAndMaterial <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>      projectName <span class="token builtin">string</span>    noOfHours   <span class="token builtin">int</span>    hourlyRate  <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> Advertisement <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>      adName     <span class="token builtin">string</span>    CPC        <span class="token builtin">int</span>    noOfClicks <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>fb FixedBilling<span class="token punctuation">)</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> fb<span class="token punctuation">.</span>biddedAmount<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>fb FixedBilling<span class="token punctuation">)</span> <span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> fb<span class="token punctuation">.</span>projectName<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>tm TimeAndMaterial<span class="token punctuation">)</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> tm<span class="token punctuation">.</span>noOfHours <span class="token operator">*</span> tm<span class="token punctuation">.</span>hourlyRate<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>tm TimeAndMaterial<span class="token punctuation">)</span> <span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> tm<span class="token punctuation">.</span>projectName<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>a Advertisement<span class="token punctuation">)</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> a<span class="token punctuation">.</span>CPC <span class="token operator">*</span> a<span class="token punctuation">.</span>noOfClicks<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>a Advertisement<span class="token punctuation">)</span> <span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> a<span class="token punctuation">.</span>adName<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">calculateNetIncome</span><span class="token punctuation">(</span>ic <span class="token punctuation">[</span><span class="token punctuation">]</span>Income<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> netincome <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> income <span class="token operator">:=</span> <span class="token keyword">range</span> ic <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Income From %s = $%d\n"</span><span class="token punctuation">,</span> income<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> income<span class="token punctuation">.</span><span class="token function">calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        netincome <span class="token operator">+=</span> income<span class="token punctuation">.</span><span class="token function">calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Net income of organisation = $%d"</span><span class="token punctuation">,</span> netincome<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      project1 <span class="token operator">:=</span> FixedBilling<span class="token punctuation">&#123;</span>projectName<span class="token punctuation">:</span> <span class="token string">"Project 1"</span><span class="token punctuation">,</span> biddedAmount<span class="token punctuation">:</span> <span class="token number">5000</span><span class="token punctuation">&#125;</span>    project2 <span class="token operator">:=</span> FixedBilling<span class="token punctuation">&#123;</span>projectName<span class="token punctuation">:</span> <span class="token string">"Project 2"</span><span class="token punctuation">,</span> biddedAmount<span class="token punctuation">:</span> <span class="token number">10000</span><span class="token punctuation">&#125;</span>    project3 <span class="token operator">:=</span> TimeAndMaterial<span class="token punctuation">&#123;</span>projectName<span class="token punctuation">:</span> <span class="token string">"Project 3"</span><span class="token punctuation">,</span> noOfHours<span class="token punctuation">:</span> <span class="token number">160</span><span class="token punctuation">,</span> hourlyRate<span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">&#125;</span>    bannerAd <span class="token operator">:=</span> Advertisement<span class="token punctuation">&#123;</span>adName<span class="token punctuation">:</span> <span class="token string">"Banner Ad"</span><span class="token punctuation">,</span> CPC<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> noOfClicks<span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">&#125;</span>    popupAd <span class="token operator">:=</span> Advertisement<span class="token punctuation">&#123;</span>adName<span class="token punctuation">:</span> <span class="token string">"Popup Ad"</span><span class="token punctuation">,</span> CPC<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> noOfClicks<span class="token punctuation">:</span> <span class="token number">750</span><span class="token punctuation">&#125;</span>    incomeStreams <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>Income<span class="token punctuation">&#123;</span>project1<span class="token punctuation">,</span> project2<span class="token punctuation">,</span> project3<span class="token punctuation">,</span> bannerAd<span class="token punctuation">,</span> popupAd<span class="token punctuation">&#125;</span>    <span class="token function">calculateNetIncome</span><span class="token punctuation">(</span>incomeStreams<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面程序会输出：</p><pre class="line-numbers language-none"><code class="language-none">Income From Project 1 &#x3D; $5000  Income From Project 2 &#x3D; $10000  Income From Project 3 &#x3D; $4000  Income From Banner Ad &#x3D; $1000  Income From Popup Ad &#x3D; $3750  Net income of organisation &#x3D; $23750<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你会发现，尽管我们新增了收益流，但却完全没有修改 <code>calculateNetIncome</code> 函数。这就是多态带来的好处。由于新的 <code>Advertisement</code> 同样实现了 <code>Income</code> 接口，所以我们能够向 <code>incomeStreams</code> 切片添加 <code>Advertisement</code>。<code>calculateNetIncome</code> 无需修改，因为它能够调用 <code>Advertisement</code> 类型的 <code>calculate()</code> 和 <code>source()</code> 方法。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2019/06/17/golang/29.defer/"/>
      <url>2019/06/17/golang/29.defer/</url>
      
        <content type="html"><![CDATA[<h1 id="29-Defer"><a href="#29-Defer" class="headerlink" title="29. Defer"></a>29. Defer</h1><h2 id="什么是-defer？"><a href="#什么是-defer？" class="headerlink" title="什么是 defer？"></a>什么是 defer？</h2><p><code>defer</code> 语句的用途是：含有 <code>defer</code> 语句的函数，会在该函数将要返回之前，调用另一个函数。这个定义可能看起来很复杂，我们通过一个示例就很容易明白了。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">finished</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Finished finding largest"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">largest</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">defer</span> <span class="token function">finished</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Started finding largest"</span><span class="token punctuation">)</span>    max <span class="token operator">:=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> nums <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> v <span class="token operator">></span> max <span class="token punctuation">&#123;</span>            max <span class="token operator">=</span> v        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Largest number in"</span><span class="token punctuation">,</span> nums<span class="token punctuation">,</span> <span class="token string">"is"</span><span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      nums <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">109</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">563</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">&#125;</span>    <span class="token function">largest</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的程序很简单，就是找出一个给定切片的最大值。<code>largest</code> 函数接收一个 int 类型的<a href="https://studygolang.com/articles/12121">切片</a>作为参数，然后打印出该切片中的最大值。<code>largest</code> 函数的第一行的语句为 <code>defer finished()</code>。这表示在 <code>finished()</code> 函数将要返回之前，会调用 <code>finished()</code> 函数。运行该程序，你会看到有如下输出：</p><pre class="line-numbers language-none"><code class="language-none">Started finding largest  Largest number in [78 109 2 563 300] is 563  Finished finding largest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>largest</code> 函数开始执行后，会打印上面的两行输出。而就在 <code>largest</code> 将要返回的时候，又调用了我们的延迟函数（Deferred Function），打印出 <code>Finished finding largest</code> 的文本。</p><h2 id="延迟方法"><a href="#延迟方法" class="headerlink" title="延迟方法"></a>延迟方法</h2><p><code>defer</code> 不仅限于[函数]的调用，调用[方法]也是合法的。我们写一个小程序来测试吧。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">type</span> person <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>      firstName <span class="token builtin">string</span>    lastName <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p person<span class="token punctuation">)</span> <span class="token function">fullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s %s"</span><span class="token punctuation">,</span>p<span class="token punctuation">.</span>firstName<span class="token punctuation">,</span>p<span class="token punctuation">.</span>lastName<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      p <span class="token operator">:=</span> person <span class="token punctuation">&#123;</span>        firstName<span class="token punctuation">:</span> <span class="token string">"John"</span><span class="token punctuation">,</span>        lastName<span class="token punctuation">:</span> <span class="token string">"Smith"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">defer</span> p<span class="token punctuation">.</span><span class="token function">fullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Welcome "</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的例子中，我们在第 22 行延迟了一个方法调用。而其他的代码很直观，这里不再解释。该程序输出：</p><pre class="line-numbers language-none"><code class="language-none">Welcome John Smith<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="实参取值（Arguments-Evaluation）"><a href="#实参取值（Arguments-Evaluation）" class="headerlink" title="实参取值（Arguments Evaluation）"></a>实参取值（Arguments Evaluation）</h2><p>在 Go 语言中，并非在调用延迟函数的时候才确定实参，而是当执行 <code>defer</code> 语句的时候，就会对延迟函数的实参进行求值。</p><p>通过一个例子就能够理解了。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">printA</span><span class="token punctuation">(</span>a <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"value of a in deferred function"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      a <span class="token operator">:=</span> <span class="token number">5</span>    <span class="token keyword">defer</span> <span class="token function">printA</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    a <span class="token operator">=</span> <span class="token number">10</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"value of a before deferred function call"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的程序里的第 11 行，<code>a</code> 的初始值为 5。在第 12 行执行 <code>defer</code> 语句的时候，由于 <code>a</code> 等于 5，因此延迟函数 <code>printA</code> 的实参也等于 5。接着我们在第 13 行将 <code>a</code> 的值修改为 10。下一行会打印出 <code>a</code> 的值。该程序输出：</p><pre class="line-numbers language-none"><code class="language-none">value of a before deferred function call 10  value of a in deferred function 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>从上面的输出，我们可以看出，在调用了 <code>defer</code> 语句后，虽然我们将 <code>a</code> 修改为 10，但调用延迟函数 <code>printA(a)</code>后，仍然打印的是 5。</p><h2 id="defer-栈"><a href="#defer-栈" class="headerlink" title="defer 栈"></a>defer 栈</h2><p>当一个函数内多次调用 <code>defer</code> 时，Go 会把 <code>defer</code> 调用放入到一个栈中，随后按照后进先出（Last In First Out, LIFO）的顺序执行。</p><p>我们下面编写一个小程序，使用 <code>defer</code> 栈，将一个字符串逆序打印。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      name <span class="token operator">:=</span> <span class="token string">"Naveen"</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Orignal String: %s\n"</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Reversed String: "</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">rune</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述程序中的第 11 行，<code>for range</code> 循环会遍历一个字符串，并在第 12 行调用了 <code>defer fmt.Printf(&quot;%c&quot;, v)</code>。这些延迟调用会添加到一个栈中，按照后进先出的顺序执行，因此，该字符串会逆序打印出来。该程序会输出：</p><pre class="line-numbers language-none"><code class="language-none">Orignal String: Naveen  Reversed String: neevaN<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="defer-的实际应用"><a href="#defer-的实际应用" class="headerlink" title="defer 的实际应用"></a>defer 的实际应用</h2><p>目前为止，我们看到的代码示例，都没有体现出 <code>defer</code> 的实际用途。本节我们会看看 <code>defer</code> 的实际应用。</p><p>当一个函数应该在与当前代码流（Code Flow）无关的环境下调用时，可以使用 <code>defer</code>。我们通过一个用到了 [<code>WaitGroup</code>] 代码示例来理解这句话的含义。我们首先会写一个没有使用 <code>defer</code> 的程序，然后我们会用 <code>defer</code> 来修改，看到 <code>defer</code> 带来的好处。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span>    <span class="token string">"sync"</span><span class="token punctuation">)</span><span class="token keyword">type</span> rect <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>      length <span class="token builtin">int</span>    width  <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>r rect<span class="token punctuation">)</span> <span class="token function">area</span><span class="token punctuation">(</span>wg <span class="token operator">*</span>sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> r<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"rect %v's length should be greater than zero\n"</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span>        wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> r<span class="token punctuation">.</span>width <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"rect %v's width should be greater than zero\n"</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span>        wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    area <span class="token operator">:=</span> r<span class="token punctuation">.</span>length <span class="token operator">*</span> r<span class="token punctuation">.</span>width    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"rect %v's area %d\n"</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> area<span class="token punctuation">)</span>    wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup    r1 <span class="token operator">:=</span> rect<span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">&#125;</span>    r2 <span class="token operator">:=</span> rect<span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">67</span><span class="token punctuation">&#125;</span>    r3 <span class="token operator">:=</span> rect<span class="token punctuation">&#123;</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">&#125;</span>    rects <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>rect<span class="token punctuation">&#123;</span>r1<span class="token punctuation">,</span> r2<span class="token punctuation">,</span> r3<span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> rects <span class="token punctuation">&#123;</span>        wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">go</span> v<span class="token punctuation">.</span><span class="token function">area</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wg<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"All go routines finished executing"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的程序里，我们在第 8 行创建了 <code>rect</code> 结构体，并在第 13 行创建了 <code>rect</code> 的方法 <code>area</code>，计算出矩形的面积。<code>area</code> 检查了矩形的长宽是否小于零。如果矩形的长宽小于零，它会打印出对应的提示信息，而如果大于零，它会打印出矩形的面积。</p><p><code>main</code> 函数创建了 3 个 <code>rect</code> 类型的变量：<code>r1</code>、<code>r2</code> 和 <code>r3</code>。在第 34 行，我们把这 3 个变量添加到了 <code>rects</code> 切片里。该切片接着使用 <code>for range</code> 循环遍历，把 <code>area</code> 方法作为一个并发的 Go 协程进行调用（第 37 行）。我们用 <code>WaitGroup wg</code> 来确保 <code>main</code> 函数在其他协程执行完毕之后，才会结束执行。<code>WaitGroup</code> 作为参数传递给 <code>area</code> 方法后，在第 16 行、第 21 行和第 26 行通知 <code>main</code> 函数，表示现在协程已经完成所有任务。<strong>如果你仔细观察，会发现 wg.Done() 只在 area 函数返回的时候才会调用。wg.Done() 应该在 area 将要返回之前调用，并且与代码流的路径（Path）无关，因此我们可以只调用一次 defer，来有效地替换掉 wg.Done() 的多次调用</strong>。</p><p>我们来用 <code>defer</code> 来重写上面的代码。</p><p>在下面的代码中，我们移除了原先程序中的 3 个 <code>wg.Done</code> 的调用，而是用一个单独的 <code>defer wg.Done()</code> 来取代它（第 14 行）。这使得我们的代码更加简洁易懂。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span>    <span class="token string">"sync"</span><span class="token punctuation">)</span><span class="token keyword">type</span> rect <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>      length <span class="token builtin">int</span>    width  <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>r rect<span class="token punctuation">)</span> <span class="token function">area</span><span class="token punctuation">(</span>wg <span class="token operator">*</span>sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> r<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"rect %v's length should be greater than zero\n"</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> r<span class="token punctuation">.</span>width <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"rect %v's width should be greater than zero\n"</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    area <span class="token operator">:=</span> r<span class="token punctuation">.</span>length <span class="token operator">*</span> r<span class="token punctuation">.</span>width    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"rect %v's area %d\n"</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> area<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup    r1 <span class="token operator">:=</span> rect<span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">&#125;</span>    r2 <span class="token operator">:=</span> rect<span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">67</span><span class="token punctuation">&#125;</span>    r3 <span class="token operator">:=</span> rect<span class="token punctuation">&#123;</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">&#125;</span>    rects <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>rect<span class="token punctuation">&#123;</span>r1<span class="token punctuation">,</span> r2<span class="token punctuation">,</span> r3<span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> rects <span class="token punctuation">&#123;</span>        wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">go</span> v<span class="token punctuation">.</span><span class="token function">area</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wg<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"All go routines finished executing"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该程序会输出：</p><pre class="line-numbers language-none"><code class="language-none">rect &#123;8 9&#125;&#39;s area 72  rect &#123;-67 89&#125;&#39;s length should be greater than zero  rect &#123;5 -67&#125;&#39;s width should be greater than zero  All go routines finished executing<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的程序中，使用 <code>defer</code> 还有一个好处。假设我们使用 <code>if</code> 条件语句，又给 <code>area</code> 方法添加了一条返回路径（Return Path）。如果没有使用 <code>defer</code> 来调用 <code>wg.Done()</code>，我们就得很小心了，确保在这条新添的返回路径里调用了 <code>wg.Done()</code>。由于现在我们延迟调用了 <code>wg.Done()</code>，因此无需再为这条新的返回路径添加 <code>wg.Done()</code> 了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2019/06/17/golang/30.cuo-wu-chu-li/"/>
      <url>2019/06/17/golang/30.cuo-wu-chu-li/</url>
      
        <content type="html"><![CDATA[<h1 id="30-错误处理"><a href="#30-错误处理" class="headerlink" title="30. 错误处理"></a>30. 错误处理</h1><h2 id="什么是错误？"><a href="#什么是错误？" class="headerlink" title="什么是错误？"></a>什么是错误？</h2><p>错误表示程序中出现了异常情况。比如当我们试图打开一个文件时，文件系统里却并没有这个文件。这就是异常情况，它用一个错误来表示。</p><p>在 Go 中，错误一直是很常见的。错误用内建的 <code>error</code> 类型来表示。</p><p>就像其他的内建类型（如 <code>int</code>、<code>float64</code> 等），错误值可以存储在变量里、作为函数的返回值等等。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>现在我们开始编写一个示例，该程序试图打开一个并不存在的文件。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span>    <span class="token string">"os"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      f<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"/test.txt"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"opened successfully"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在程序的第 9 行，我们试图打开路径为 <code>/test.txt</code> 的文件（playground 显然并不存在这个文件）。<code>os</code> 包里的 [<code>Open</code>]函数有如下签名：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Open</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>file <span class="token operator">*</span>File<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>如果成功打开文件，Open 函数会返回一个文件句柄（File Handler）和一个值为 nil 的错误。而如果打开文件时发生了错误，会返回一个不等于 nil 的错误</strong>。</p><p>如果一个[函数] 或[方法] 返回了错误，按照惯例，错误会作为最后一个值返回。于是 <code>Open</code> 函数也是将 <code>err</code> 作为最后一个返回值。</p><p><strong>按照 Go 的惯例，在处理错误时，通常都是将返回的错误与 nil 比较。nil 值表示了没有错误发生，而非 nil 值表示出现了错误</strong>。在这里，我们第 10 行检查了错误值是否为 <code>nil</code>。如果不是 <code>nil</code>，我们会简单地打印出错误，并在 <code>main</code> 函数中返回。</p><p>运行该程序会输出：</p><pre class="line-numbers language-none"><code class="language-none">open &#x2F;test.txt: No such file or directory<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>很棒！我们得到了一个错误，它指出该文件并不存在。</p><h2 id="错误类型的表示"><a href="#错误类型的表示" class="headerlink" title="错误类型的表示"></a>错误类型的表示</h2><p>让我们进一步深入，理解 <code>error</code> 类型是如何定义的。<code>error</code> 是一个[接口]类型，定义如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> <span class="token builtin">error</span> <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>      <span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>error</code> 有了一个签名为 <code>Error() string</code> 的方法。所有实现该接口的类型都可以当作一个错误类型。<code>Error()</code> 方法给出了错误的描述。</p><p><code>fmt.Println</code> 在打印错误时，会在内部调用 <code>Error() string</code> 方法来得到该错误的描述。上一节示例中的第 11 行，就是这样打印出错误的描述的。</p><h2 id="从错误获取更多信息的不同方法"><a href="#从错误获取更多信息的不同方法" class="headerlink" title="从错误获取更多信息的不同方法"></a>从错误获取更多信息的不同方法</h2><p>现在，我们知道了 <code>error</code> 是一个接口类型，让我们看看如何从一个错误获取更多信息。</p><p>在前面的示例里，我们只是打印出错误的描述。如果我们想知道这个错误的文件路径，该怎么做呢？一种选择是直接解析错误的字符串。这是前面示例的输出：</p><pre class="line-numbers language-none"><code class="language-none">open &#x2F;test.txt: No such file or directory<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>我们解析了这条错误信息，虽然获取了发生错误的文件路径，但是这种方法很不优雅。随着语言版本的更新，这条错误的描述随时都有可能变化，使我们程序出错</strong>。</p><p>有没有更加可靠的方法来获取文件名呢？答案是肯定的，这是可以做到的，Go 标准库给出了各种提取错误相关信息的方法。我们一个个来看看吧。</p><h3 id="1-断言底层结构体类型，使用结构体字段获取更多信息"><a href="#1-断言底层结构体类型，使用结构体字段获取更多信息" class="headerlink" title="1. 断言底层结构体类型，使用结构体字段获取更多信息"></a>1. 断言底层结构体类型，使用结构体字段获取更多信息</h3><p>如果你仔细阅读了 [<code>Open</code>] 函数的文档，你可以看见它返回的错误类型是 <code>*PathError</code>。[<code>PathError</code>]是[结构体]类型，它在标准库中的实现如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> PathError <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>      Op   <span class="token builtin">string</span>    Path <span class="token builtin">string</span>    Err  <span class="token builtin">error</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>e <span class="token operator">*</span>PathError<span class="token punctuation">)</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> e<span class="token punctuation">.</span>Op <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>Path <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>Err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过上面的代码，你就知道了 <code>*PathError</code> 通过声明 <code>Error() string</code> 方法，实现了 <code>error</code> 接口。<code>Error() string</code> 将文件操作、路径和实际错误拼接，并返回该字符串。于是我们得到该错误信息：</p><pre class="line-numbers language-none"><code class="language-none">open &#x2F;test.txt: No such file or directory<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结构体 <code>PathError</code> 的 <code>Path</code> 字段，就有导致错误的文件路径。我们修改前面写的程序，打印出该路径。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span>    <span class="token string">"os"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      f<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"/test.txt"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err<span class="token punctuation">,</span> ok <span class="token operator">:=</span> err<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>os<span class="token punctuation">.</span>PathError<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"File at path"</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span>Path<span class="token punctuation">,</span> <span class="token string">"failed to open"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"opened successfully"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的程序里，我们在第 10 行使用了[类型断言]（Type Assertion）来获取 <code>error</code> 接口的底层值（Underlying Value）。接下来在第 11 行，我们使用 <code>err.Path</code> 来打印该路径。该程序会输出：</p><pre class="line-numbers language-none"><code class="language-none">File at path &#x2F;test.txt failed to open<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>很棒！我们已经使用类型断言成功获取到了该错误的文件路径。</p><h3 id="2-断言底层结构体类型，调用方法获取更多信息"><a href="#2-断言底层结构体类型，调用方法获取更多信息" class="headerlink" title="2. 断言底层结构体类型，调用方法获取更多信息"></a>2. 断言底层结构体类型，调用方法获取更多信息</h3><p>第二种获取更多错误信息的方法，也是对底层类型进行断言，然后通过调用该结构体类型的方法，来获取更多的信息。</p><p>我们通过一个实例来理解这一点。</p><p>标准库中的 <code>DNSError</code> 结构体类型定义如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> DNSError <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>      <span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>e <span class="token operator">*</span>DNSError<span class="token punctuation">)</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>      <span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>e <span class="token operator">*</span>DNSError<span class="token punctuation">)</span> <span class="token function">Timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>      <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>e <span class="token operator">*</span>DNSError<span class="token punctuation">)</span> <span class="token function">Temporary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>      <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上述代码可以看到，<code>DNSError</code> 结构体还有 <code>Timeout() bool</code> 和 <code>Temporary() bool</code> 两个方法，它们返回一个布尔值，指出该错误是由超时引起的，还是临时性错误。</p><p>接下来我们编写一个程序，断言 <code>*DNSError</code> 类型，并调用这些方法来确定该错误是临时性错误，还是由超时导致的。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span>    <span class="token string">"net"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      addr<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">LookupHost</span><span class="token punctuation">(</span><span class="token string">"golangbot123.com"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err<span class="token punctuation">,</span> ok <span class="token operator">:=</span> err<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>net<span class="token punctuation">.</span>DNSError<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> err<span class="token punctuation">.</span><span class="token function">Timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"operation timed out"</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> err<span class="token punctuation">.</span><span class="token function">Temporary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"temporary error"</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"generic error: "</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注：在 playground 无法进行 DNS 解析。请在你的本地运行该程序</strong>。</p><p>在上述程序中，我们在第 9 行，试图获取 <code>golangbot123.com</code>（无效的域名） 的 ip。在第 10 行，我们通过 <code>*net.DNSError</code> 的类型断言，获取到了错误的底层值。接下来的第 11 行和第 13 行，我们分别检查了该错误是由超时引起的，还是一个临时性错误。</p><p>在本例中，我们的错误既不是临时性错误，也不是由超时引起的，因此该程序输出：</p><pre class="line-numbers language-none"><code class="language-none">generic error:  lookup golangbot123.com: no such host<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果该错误是临时性错误，或是由超时引发的，那么对应的 if 语句会执行，于是我们就可以适当地处理它们。</p><h3 id="3-直接比较"><a href="#3-直接比较" class="headerlink" title="3. 直接比较"></a>3. 直接比较</h3><p>第三种获取错误的更多信息的方式，是与 <code>error</code> 类型的变量直接比较。我们通过一个示例来理解。</p><p><code>filepath</code> 包中的 [<code>Glob</code>] 用于返回满足 glob 模式的所有文件名。如果模式写的不对，该函数会返回一个错误 <code>ErrBadPattern</code>。</p><p><code>filepath</code> 包中的 <code>ErrBadPattern</code> 定义如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> ErrBadPattern <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"syntax error in pattern"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>errors.New()</code> 用于创建一个新的错误。我们会在下一教程中详细讨论它。</p><p>当模式不正确时，<code>Glob</code> 函数会返回 <code>ErrBadPattern</code>。</p><p>我们来写一个小程序来看看这个错误。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span>    <span class="token string">"path/filepath"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      files<span class="token punctuation">,</span> <span class="token builtin">error</span> <span class="token operator">:=</span> filepath<span class="token punctuation">.</span><span class="token function">Glob</span><span class="token punctuation">(</span><span class="token string">"["</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">error</span> <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin">error</span> <span class="token operator">==</span> filepath<span class="token punctuation">.</span>ErrBadPattern <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token builtin">error</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"matched files"</span><span class="token punctuation">,</span> files<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述程序里，我们查询了模式为 <code>[</code> 的文件，然而这个模式写的不正确。我们检查了该错误是否为 <code>nil</code>。为了获取该错误的更多信息，我们在第 10 行将 <code>error</code> 直接与 <code>filepath.ErrBadPattern</code> 相比较。如果该条件满足，那么该错误就是由模式错误导致的。该程序会输出：</p><pre class="line-numbers language-none"><code class="language-none">syntax error in pattern<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>标准库在提供错误的详细信息时，使用到了上述提到的三种方法。在下一教程里，我们会通过这些方法来创建我们自己的自定义错误。</p><h2 id="不可忽略错误"><a href="#不可忽略错误" class="headerlink" title="不可忽略错误"></a>不可忽略错误</h2><p>绝不要忽略错误。忽视错误会带来问题。接下来我重写上面的示例，在列出所有满足模式的文件名时，我省略了错误处理的代码。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span>    <span class="token string">"path/filepath"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      files<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> filepath<span class="token punctuation">.</span><span class="token function">Glob</span><span class="token punctuation">(</span><span class="token string">"["</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"matched files"</span><span class="token punctuation">,</span> files<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们已经从前面的示例知道了这个模式是错误的。在第 9 行，通过使用 <code>_</code> 空白标识符，我忽略了 <code>Glob</code> 函数返回的错误。我在第 10 行简单打印了所有匹配的文件。该程序会输出：</p><pre class="line-numbers language-none"><code class="language-none">matched files []<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于我忽略了错误，输出看起来就像是没有任何匹配了 glob 模式的文件，但实际上这是因为模式的写法不对。所以绝不要忽略错误。</p><p>本教程到此结束。</p><p>这一教程我们讨论了该如何处理程序中出现的错误，也讨论了如何查询关于错误的更多信息。简单概括一下本教程讨论的内容：</p><ul><li>什么是错误？</li><li>错误的表示</li><li>获取错误详细信息的各种方法</li><li>不能忽视错误</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2019/06/17/golang/31.zi-ding-yi-cuo-wu/"/>
      <url>2019/06/17/golang/31.zi-ding-yi-cuo-wu/</url>
      
        <content type="html"><![CDATA[<h1 id="31-自定义错误"><a href="#31-自定义错误" class="headerlink" title="31. 自定义错误"></a>31. 自定义错误</h1><h2 id="使用-New-函数创建自定义错误"><a href="#使用-New-函数创建自定义错误" class="headerlink" title="使用 New 函数创建自定义错误"></a>使用 New 函数创建自定义错误</h2><p>创建自定义错误最简单的方法是使用 [<code>errors</code>]包中的 [<code>New</code>]函数。</p><p>在使用 New [函数]创建自定义错误之前，我们先来看看 <code>New</code> 是如何实现的。如下所示，是 [<code>errors</code> 包]中的 <code>New</code> 函数的实现。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Package errors implements functions to manipulate errors.</span><span class="token keyword">package</span> errors<span class="token comment">// New returns an error that formats as the given text.</span><span class="token keyword">func</span> <span class="token function">New</span><span class="token punctuation">(</span>text <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>errorString<span class="token punctuation">&#123;</span>text<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// errorString is a trivial implementation of error.</span><span class="token keyword">type</span> errorString <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    s <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>e <span class="token operator">*</span>errorString<span class="token punctuation">)</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> e<span class="token punctuation">.</span>s<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>New</code> 函数的实现很简单。<code>errorString</code> 是一个[结构体]类型，只有一个字符串字段 <code>s</code>。第 14 行使用了 <code>errorString</code> 指针接受者（Pointer Receiver），来实现 <code>error</code> 接口的 <code>Error() string</code> [方法]。</p><p>第 5 行的 <code>New</code> 函数有一个字符串参数，通过这个参数创建了 <code>errorString</code> 类型的变量，并返回了它的地址。于是它就创建并返回了一个新的错误。</p><p>现在我们已经知道了 <code>New</code> 函数是如何工作的，我们开始在程序里使用 <code>New</code> 来创建自定义错误吧。</p><p>我们将创建一个计算圆半径的简单程序，如果半径为负，它会返回一个错误。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"errors"</span>    <span class="token string">"fmt"</span>    <span class="token string">"math"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">circleArea</span><span class="token punctuation">(</span>radius <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">float64</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> radius <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"Area calculation failed, radius is less than zero"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> math<span class="token punctuation">.</span>Pi <span class="token operator">*</span> radius <span class="token operator">*</span> radius<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      radius <span class="token operator">:=</span> <span class="token operator">-</span><span class="token number">20.0</span>    area<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">circleArea</span><span class="token punctuation">(</span>radius<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Area of circle %0.2f"</span><span class="token punctuation">,</span> area<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的程序中，我们检查半径是否小于零（第 10 行）。如果半径小于零，我们会返回等于 0 的面积，以及相应的错误信息。如果半径大于零，则会计算出面积，并返回值为 <code>nil</code> 的错误（第 13 行）。</p><p>在 <code>main</code> 函数里，我们在第 19 行检查错误是否等于 <code>nil</code>。如果不是 <code>nil</code>，我们会打印出错误并返回，否则我们会打印出圆的面积。</p><p>在我们的程序中，半径小于零，因此打印出：</p><pre class="line-numbers language-none"><code class="language-none">Area calculation failed, radius is less than zero<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="使用-Errorf-给错误添加更多信息"><a href="#使用-Errorf-给错误添加更多信息" class="headerlink" title="使用 Errorf 给错误添加更多信息"></a>使用 Errorf 给错误添加更多信息</h2><p>上面的程序效果不错，但是如果我们能够打印出当前圆的半径，那就更好了。这就要用到 [<code>fmt</code>]包中的 [<code>Errorf</code>] 函数了。<code>Errorf</code> 函数会根据格式说明符，规定错误的格式，并返回一个符合该错误的[字符串]。</p><p>接下来我们使用 <code>Errorf</code> 函数来改进我们的程序。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span>    <span class="token string">"math"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">circleArea</span><span class="token punctuation">(</span>radius <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">float64</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> radius <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Area calculation failed, radius %0.2f is less than zero"</span><span class="token punctuation">,</span> radius<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> math<span class="token punctuation">.</span>Pi <span class="token operator">*</span> radius <span class="token operator">*</span> radius<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      radius <span class="token operator">:=</span> <span class="token operator">-</span><span class="token number">20.0</span>    area<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">circleArea</span><span class="token punctuation">(</span>radius<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Area of circle %0.2f"</span><span class="token punctuation">,</span> area<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的程序中，我们使用 <code>Errorf</code>（第 10 行）打印了发生错误的半径。程序运行后会输出：</p><pre class="line-numbers language-none"><code class="language-none">Area calculation failed, radius -20.00 is less than zero<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="使用结构体类型和字段提供错误的更多信息"><a href="#使用结构体类型和字段提供错误的更多信息" class="headerlink" title="使用结构体类型和字段提供错误的更多信息"></a>使用结构体类型和字段提供错误的更多信息</h2><p>错误还可以用实现了 <code>error</code> [接口]的结构体来表示。这种方式可以更加灵活地处理错误。在上面例子中，如果我们希望访问引发错误的半径，现在唯一的方法就是解析错误的描述信息 <code>Area calculation failed, radius -20.00 is less than zero</code>。这样做不太好，因为一旦描述信息发生变化，程序就会出错。</p><p>我们会使用标准库里采用的方法，在上一教程中“断言底层结构体类型，使用结构体字段获取更多信息”这一节，我们讲解了这一方法，可以使用结构体字段来访问引发错误的半径。我们会创建一个实现 <code>error</code> 接口的结构体类型，并使用它的字段来提供关于错误的更多信息。</p><p>第一步就是创建一个表示错误的结构体类型。错误类型的命名约定是名称以 <code>Error</code> 结尾。因此我们不妨把结构体类型命名为 <code>areaError</code>。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> areaError <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>      err    <span class="token builtin">string</span>    radius <span class="token builtin">float64</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上面的结构体类型有一个 <code>radius</code> 字段，它存储了与错误有关的半径，而 <code>err</code> 字段存储了实际的错误信息。</p><p>下一步是实现 <code>error</code> 接口。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>e <span class="token operator">*</span>areaError<span class="token punctuation">)</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"radius %0.2f: %s"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>radius<span class="token punctuation">,</span> e<span class="token punctuation">.</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在上面的代码中，我们使用指针接收者 <code>*areaError</code>，实现了 <code>error</code> 接口的 <code>Error() string</code> 方法。该方法打印出半径和关于错误的描述。</p><p>现在我们来编写 <code>main</code> 函数和 <code>circleArea</code> 函数来完成整个程序。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span>    <span class="token string">"math"</span><span class="token punctuation">)</span><span class="token keyword">type</span> areaError <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>      err    <span class="token builtin">string</span>    radius <span class="token builtin">float64</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>e <span class="token operator">*</span>areaError<span class="token punctuation">)</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"radius %0.2f: %s"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>radius<span class="token punctuation">,</span> e<span class="token punctuation">.</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">circleArea</span><span class="token punctuation">(</span>radius <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">float64</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> radius <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>areaError<span class="token punctuation">&#123;</span><span class="token string">"radius is negative"</span><span class="token punctuation">,</span> radius<span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> math<span class="token punctuation">.</span>Pi <span class="token operator">*</span> radius <span class="token operator">*</span> radius<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      radius <span class="token operator">:=</span> <span class="token operator">-</span><span class="token number">20.0</span>    area<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">circleArea</span><span class="token punctuation">(</span>radius<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> err<span class="token punctuation">,</span> ok <span class="token operator">:=</span> err<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>areaError<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">&#123;</span>            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Radius %0.2f is less than zero"</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span>radius<span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">&#125;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Area of rectangle1 %0.2f"</span><span class="token punctuation">,</span> area<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://play.golang.org/p/OTs7J0adQg">在 playground 上运行</a></p><p>在上面的程序中，<code>circleArea</code>（第 17 行）用于计算圆的面积。该函数首先检查半径是否小于零，如果小于零，它会通过错误半径和对应错误信息，创建一个 <code>areaError</code> 类型的值，然后返回 <code>areaError</code> 值的地址，与此同时 <code>area</code> 等于 0（第 19 行）。<strong>于是我们提供了更多的错误信息（即导致错误的半径），我们使用了自定义错误的结构体字段来定义它</strong>。</p><p>如果半径是非负数，该函数会在第 21 行计算并返回面积，同时错误值为 <code>nil</code>。</p><p>在 <code>main</code> 函数的 26 行，我们试图计算半径为 -20 的圆的面积。由于半径小于零，因此会导致一个错误。</p><p>我们在第 27 行检查了错误是否为 <code>nil</code>，并在下一行断言了 <code>*areaError</code> 类型。<strong>如果错误是 *areaError 类型，我们就可以用 err.radius 来获取错误的半径（第 29 行），打印出自定义错误的消息，最后程序返回退出</strong>。</p><p>如果断言错误，我们就在第 32 行打印该错误，并返回。如果没有发生错误，在第 35 行会打印出面积。</p><p>该程序会输出：</p><pre class="line-numbers language-none"><code class="language-none">Radius -20.00 is less than zero<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下面我们来使用上一教程提到的[第二种方法]，使用自定义错误类型的方法来提供错误的更多信息。</p><h2 id="使用结构体类型的方法来提供错误的更多信息"><a href="#使用结构体类型的方法来提供错误的更多信息" class="headerlink" title="使用结构体类型的方法来提供错误的更多信息"></a>使用结构体类型的方法来提供错误的更多信息</h2><p>在本节里，我们会编写一个计算矩形面积的程序。如果长或宽小于零，程序就会打印出错误。</p><p>第一步就是创建一个表示错误的结构体。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> areaError <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>      err    <span class="token builtin">string</span> <span class="token comment">//error description</span>    length <span class="token builtin">float64</span> <span class="token comment">//length which caused the error</span>    width  <span class="token builtin">float64</span> <span class="token comment">//width which caused the error</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的结构体类型除了有一个错误描述字段，还有可能引发错误的宽和高。</p><p>现在我们有了错误类型，我们来实现 <code>error</code> 接口，并给该错误类型添加两个方法，使它提供了更多的错误信息。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>e <span class="token operator">*</span>areaError<span class="token punctuation">)</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> e<span class="token punctuation">.</span>err<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>e <span class="token operator">*</span>areaError<span class="token punctuation">)</span> <span class="token function">lengthNegative</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> e<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>e <span class="token operator">*</span>areaError<span class="token punctuation">)</span> <span class="token function">widthNegative</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> e<span class="token punctuation">.</span>width <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的代码片段中，我们从 <code>Error() string</code> 方法中返回了关于错误的描述。当 <code>length</code> 小于零时，<code>lengthNegative() bool</code> 方法返回 <code>true</code>，而当 <code>width</code> 小于零时，<code>widthNegative() bool</code> 方法返回 <code>true</code>。<strong>这两个方法都提供了关于错误的更多信息，在这里，它提示我们计算面积失败的原因（长度为负数或者宽度为负数）。于是我们就有了两个错误类型结构体的方法，来提供更多的错误信息</strong>。</p><p>下一步就是编写计算面积的函数。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">rectArea</span><span class="token punctuation">(</span>length<span class="token punctuation">,</span> width <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">float64</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      err <span class="token operator">:=</span> <span class="token string">""</span>    <span class="token keyword">if</span> length <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>        err <span class="token operator">+=</span> <span class="token string">"length is less than zero"</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> width <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token string">""</span> <span class="token punctuation">&#123;</span>            err <span class="token operator">=</span> <span class="token string">"width is less than zero"</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            err <span class="token operator">+=</span> <span class="token string">", width is less than zero"</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>areaError<span class="token punctuation">&#123;</span>err<span class="token punctuation">,</span> length<span class="token punctuation">,</span> width<span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> length <span class="token operator">*</span> width<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的 <code>rectArea</code> 函数检查了长或宽是否小于零，如果小于零，<code>rectArea</code> 会返回一个错误信息，否则 <code>rectArea</code> 会返回矩形的面积和一个值为 <code>nil</code> 的错误。</p><p>让我们创建 <code>main</code> 函数来完成整个程序。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      length<span class="token punctuation">,</span> width <span class="token operator">:=</span> <span class="token operator">-</span><span class="token number">5.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">9.0</span>    area<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">rectArea</span><span class="token punctuation">(</span>length<span class="token punctuation">,</span> width<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> err<span class="token punctuation">,</span> ok <span class="token operator">:=</span> err<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>areaError<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> err<span class="token punctuation">.</span><span class="token function">lengthNegative</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"error: length %0.2f is less than zero\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span>length<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> err<span class="token punctuation">.</span><span class="token function">widthNegative</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"error: width %0.2f is less than zero\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span>width<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span>        <span class="token punctuation">&#125;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"area of rect"</span><span class="token punctuation">,</span> area<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>main</code> 程序中，我们检查了错误是否为 <code>nil</code>（第 4 行）。如果错误值不是 <code>nil</code>，我们会在下一行断言 <code>*areaError</code> 类型。然后，我们使用 <code>lengthNegative()</code> 和 <code>widthNegative()</code> 方法，检查错误的原因是长度小于零还是宽度小于零。这样我们就使用了错误结构体类型的方法，来提供更多的错误信息。</p><p>如果没有错误发生，就会打印矩形的面积。</p><p>下面是整个程序的代码供你参考。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">type</span> areaError <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>      err    <span class="token builtin">string</span>  <span class="token comment">//error description</span>    length <span class="token builtin">float64</span> <span class="token comment">//length which caused the error</span>    width  <span class="token builtin">float64</span> <span class="token comment">//width which caused the error</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>e <span class="token operator">*</span>areaError<span class="token punctuation">)</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> e<span class="token punctuation">.</span>err<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>e <span class="token operator">*</span>areaError<span class="token punctuation">)</span> <span class="token function">lengthNegative</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> e<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>e <span class="token operator">*</span>areaError<span class="token punctuation">)</span> <span class="token function">widthNegative</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> e<span class="token punctuation">.</span>width <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">rectArea</span><span class="token punctuation">(</span>length<span class="token punctuation">,</span> width <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">float64</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      err <span class="token operator">:=</span> <span class="token string">""</span>    <span class="token keyword">if</span> length <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>        err <span class="token operator">+=</span> <span class="token string">"length is less than zero"</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> width <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token string">""</span> <span class="token punctuation">&#123;</span>            err <span class="token operator">=</span> <span class="token string">"width is less than zero"</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            err <span class="token operator">+=</span> <span class="token string">", width is less than zero"</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>areaError<span class="token punctuation">&#123;</span>err<span class="token punctuation">,</span> length<span class="token punctuation">,</span> width<span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> length <span class="token operator">*</span> width<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      length<span class="token punctuation">,</span> width <span class="token operator">:=</span> <span class="token operator">-</span><span class="token number">5.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">9.0</span>    area<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">rectArea</span><span class="token punctuation">(</span>length<span class="token punctuation">,</span> width<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> err<span class="token punctuation">,</span> ok <span class="token operator">:=</span> err<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>areaError<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> err<span class="token punctuation">.</span><span class="token function">lengthNegative</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"error: length %0.2f is less than zero\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span>length<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> err<span class="token punctuation">.</span><span class="token function">widthNegative</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"error: width %0.2f is less than zero\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span>width<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span>        <span class="token punctuation">&#125;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"area of rect"</span><span class="token punctuation">,</span> area<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该程序会打印输出：</p><pre class="line-numbers language-none"><code class="language-none">error: length -5.00 is less than zero  error: width -9.00 is less than zero<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在上一教程[错误处理]中，我们介绍了三种提供更多错误信息的方法，现在我们已经看了其中两个示例。</p><p>第三种方法使用的是直接比较，比较简单。我留给读者作为练习，你们可以试着使用这种方法来给出自定义错误的更多信息。</p><p>本教程到此结束。</p><p>简单概括一下本教程讨论的内容：</p><ul><li>使用 <code>New</code> 函数创建自定义错误</li><li>使用 <code>Error</code> 添加更多错误信息</li><li>使用结构体类型和字段，提供更多错误信息</li><li>使用结构体类型和方法，提供更多错误信息</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2019/06/17/golang/32.panic-he-recover/"/>
      <url>2019/06/17/golang/32.panic-he-recover/</url>
      
        <content type="html"><![CDATA[<h1 id="32-panic-和-recover"><a href="#32-panic-和-recover" class="headerlink" title="32. panic 和 recover"></a>32. panic 和 recover</h1><h2 id="什么是-panic？"><a href="#什么是-panic？" class="headerlink" title="什么是 panic？"></a>什么是 panic？</h2><p>在 Go 语言中，程序中一般是使用[错误]来处理异常情况。对于程序中出现的大部分异常情况，错误就已经够用了。</p><p>但在有些情况，当程序发生异常时，无法继续运行。在这种情况下，我们会使用 <code>panic</code> 来终止程序。当[函数]发生 panic 时，它会终止运行，在执行完所有的[延迟]函数后，程序控制返回到该函数的调用方。这样的过程会一直持续下去，直到当前[协程]的所有函数都返回退出，然后程序会打印出 panic 信息，接着打印出堆栈跟踪（Stack Trace），最后程序终止。在编写一个示例程序后，我们就能很好地理解这个概念了。</p><p>在本教程里，我们还会接着讨论，当程序发生 panic 时，使用 <code>recover</code> 可以重新获得对该程序的控制。</p><p>可以认为 <code>panic</code> 和 <code>recover</code> 与其他语言中的 <code>try-catch-finally</code> 语句类似，只不过一般我们很少使用 <code>panic</code> 和 <code>recover</code>。而当我们使用了 <code>panic</code> 和 <code>recover</code> 时，也会比 <code>try-catch-finally</code> 更加优雅，代码更加整洁。</p><h2 id="什么时候应该使用-panic？"><a href="#什么时候应该使用-panic？" class="headerlink" title="什么时候应该使用 panic？"></a>什么时候应该使用 panic？</h2><p><strong>需要注意的是，你应该尽可能地使用错误，而不是使用 panic 和 recover。只有当程序不能继续运行的时候，才应该使用 panic 和 recover 机制</strong>。</p><p>panic 有两个合理的用例。</p><ol><li><strong>发生了一个不能恢复的错误，此时程序不能继续运行</strong>。  一个例子就是 web 服务器无法绑定所要求的端口。在这种情况下，就应该使用 panic，因为如果不能绑定端口，啥也做不了。</li><li><strong>发生了一个编程上的错误</strong>。  假如我们有一个接收指针参数的方法，而其他人使用 <code>nil</code> 作为参数调用了它。在这种情况下，我们可以使用 panic，因为这是一个编程错误：用 <code>nil</code> 参数调用了一个只能接收合法指针的方法。</li></ol><h2 id="panic-示例"><a href="#panic-示例" class="headerlink" title="panic 示例"></a>panic 示例</h2><p>内建函数 <code>panic</code> 的签名如下所示：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">panic</span><span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当程序终止时，会打印传入 <code>panic</code> 的参数。我们写一个示例，你就会清楚它的用途了。我们现在就开始吧。</p><p>我们会写一个例子，来展示 <code>panic</code> 如何工作。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">fullName</span><span class="token punctuation">(</span>firstName <span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">,</span> lastName <span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> firstName <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"runtime error: first name cannot be nil"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> lastName <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"runtime error: last name cannot be nil"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s %s\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>firstName<span class="token punctuation">,</span> <span class="token operator">*</span>lastName<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"returned normally from fullName"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      firstName <span class="token operator">:=</span> <span class="token string">"Elon"</span>    <span class="token function">fullName</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>firstName<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"returned normally from main"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的程序很简单，会打印一个人的全名。第 7 行的 <code>fullName</code> 函数会打印出一个人的全名。该函数在第 8 行和第 11 行分别检查了 <code>firstName</code> 和 <code>lastName</code> 的指针是否为 <code>nil</code>。如果是 <code>nil</code>，<code>fullName</code> 函数会调用含有不同的错误信息的 <code>panic</code>。当程序终止时，会打印出该错误信息。</p><p>运行该程序，会有如下输出：</p><pre class="line-numbers language-none"><code class="language-none">panic: runtime error: last name cannot be nilgoroutine 1 [running]:  main.fullName(0x1040c128, 0x0)      &#x2F;tmp&#x2F;sandbox135038844&#x2F;main.go:12 +0x120main.main()      &#x2F;tmp&#x2F;sandbox135038844&#x2F;main.go:20 +0x80<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们来分析这个输出，理解一下 panic 是如何工作的，并且思考当程序发生 panic 时，会怎样打印堆栈跟踪。</p><p>在第 19 行，我们将 <code>Elon</code> 赋值给了 <code>firstName</code>。在第 20 行，我们调用了 <code>fullName</code> 函数，其中 <code>lastName</code> 等于 <code>nil</code>。因此，满足了第 11 行的条件，程序发生 panic。当出现了 panic 时，程序就会终止运行，打印出传入 panic 的参数，接着打印出堆栈跟踪。因此，第 14 行和第 15 行的代码并不会在发生 panic 之后执行。程序首先会打印出传入 <code>panic</code> 函数的信息：</p><pre class="line-numbers language-none"><code class="language-none">panic: runtime error: last name cannot be empty<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接着打印出堆栈跟踪。</p><p>程序在 <code>fullName</code> 函数的第 12 行发生 panic，因此，首先会打印出如下所示的输出。</p><pre class="line-numbers language-none"><code class="language-none">main.fullName(0x1040c128, 0x0)      &#x2F;tmp&#x2F;sandbox135038844&#x2F;main.go:12 +0x120<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>接着会打印出堆栈的下一项。在本例中，堆栈跟踪中的下一项是第 20 行（因为发生 panic 的 <code>fullName</code> 调用就在这一行），因此接下来会打印出：</p><pre class="line-numbers language-none"><code class="language-none">main.main()      &#x2F;tmp&#x2F;sandbox135038844&#x2F;main.go:20 +0x80<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>现在我们已经到达了导致 panic 的顶层函数，这里没有更多的层级，因此结束打印。</p><h2 id="发生-panic-时的-defer"><a href="#发生-panic-时的-defer" class="headerlink" title="发生 panic 时的 defer"></a>发生 panic 时的 defer</h2><p>我们重新总结一下 panic 做了什么。<strong>当函数发生 panic 时，它会终止运行，在执行完所有的延迟函数后，程序控制返回到该函数的调用方。这样的过程会一直持续下去，直到当前协程的所有函数都返回退出，然后程序会打印出 panic 信息，接着打印出堆栈跟踪，最后程序终止</strong>。</p><p>在上面的例子中，我们没有延迟调用任何函数。如果有延迟函数，会先调用它，然后程序控制返回到函数调用方。</p><p>我们来修改上面的示例，使用一个延迟语句。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">fullName</span><span class="token punctuation">(</span>firstName <span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">,</span> lastName <span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"deferred call in fullName"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> firstName <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"runtime error: first name cannot be nil"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> lastName <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"runtime error: last name cannot be nil"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s %s\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>firstName<span class="token punctuation">,</span> <span class="token operator">*</span>lastName<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"returned normally from fullName"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"deferred call in main"</span><span class="token punctuation">)</span>    firstName <span class="token operator">:=</span> <span class="token string">"Elon"</span>    <span class="token function">fullName</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>firstName<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"returned normally from main"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述代码中，我们只修改了两处，分别在第 8 行和第 20 行添加了延迟函数的调用。</p><p>该函数会打印：</p><pre class="line-numbers language-none"><code class="language-none">This program prints,deferred call in fullName  deferred call in main  panic: runtime error: last name cannot be nilgoroutine 1 [running]:  main.fullName(0x1042bf90, 0x0)      &#x2F;tmp&#x2F;sandbox060731990&#x2F;main.go:13 +0x280main.main()      &#x2F;tmp&#x2F;sandbox060731990&#x2F;main.go:22 +0xc0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当程序在第 13 行发生 panic 时，首先执行了延迟函数，接着控制返回到函数调用方，调用方的延迟函数继续运行，直到到达顶层调用函数。</p><p>在我们的例子中，首先执行 <code>fullName</code> 函数中的 <code>defer</code> 语句（第 8 行）。程序打印出：</p><pre class="line-numbers language-none"><code class="language-none">deferred call in fullName<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接着程序返回到 <code>main</code> 函数，执行了 <code>main</code> 函数的延迟调用，因此会输出：</p><pre class="line-numbers language-none"><code class="language-none">deferred call in main<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在程序控制到达了顶层函数，因此该函数会打印出 panic 信息，然后是堆栈跟踪，最后终止程序。</p><h2 id="recover"><a href="#recover" class="headerlink" title="recover"></a>recover</h2><p><code>recover</code> 是一个内建函数，用于重新获得 panic 协程的控制。</p><p><code>recover</code> 函数的标签如下所示：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>只有在延迟函数的内部，调用 <code>recover</code> 才有用。在延迟函数内调用 <code>recover</code>，可以取到 <code>panic</code> 的错误信息，并且停止 panic 续发事件（Panicking Sequence），程序运行恢复正常。如果在延迟函数的外部调用 <code>recover</code>，就不能停止 panic 续发事件。</p><p>我们来修改一下程序，在发生 panic 之后，使用 <code>recover</code> 来恢复正常的运行。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">recoverName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> r <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> r<span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"recovered from "</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">fullName</span><span class="token punctuation">(</span>firstName <span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">,</span> lastName <span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">defer</span> <span class="token function">recoverName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> firstName <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"runtime error: first name cannot be nil"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> lastName <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"runtime error: last name cannot be nil"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s %s\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>firstName<span class="token punctuation">,</span> <span class="token operator">*</span>lastName<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"returned normally from fullName"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"deferred call in main"</span><span class="token punctuation">)</span>    firstName <span class="token operator">:=</span> <span class="token string">"Elon"</span>    <span class="token function">fullName</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>firstName<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"returned normally from main"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在第 7 行，<code>recoverName()</code> 函数调用了 <code>recover()</code>，返回了调用 <code>panic</code> 的传参。在这里，我们只是打印出 <code>recover</code> 的返回值（第 8 行）。在 <code>fullName</code> 函数内，我们在第 14 行延迟调用了 <code>recoverNames()</code>。</p><p>当 <code>fullName</code> 发生 panic 时，会调用延迟函数 <code>recoverName()</code>，它使用了 <code>recover()</code> 来停止 panic 续发事件。</p><p>该程序会输出：</p><pre class="line-numbers language-none"><code class="language-none">recovered from  runtime error: last name cannot be nil  returned normally from main  deferred call in main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当程序在第 19 行发生 panic 时，会调用延迟函数 <code>recoverName</code>，它反过来会调用 <code>recover()</code> 来重新获得 panic 协程的控制。第 8 行调用了 <code>recover</code>，返回了 <code>panic</code> 的传参，因此会打印：</p><pre class="line-numbers language-none"><code class="language-none">recovered from  runtime error: last name cannot be nil<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在执行完 <code>recover()</code> 之后，panic 会停止，程序控制返回到调用方（在这里就是 <code>main</code> 函数），程序在发生 panic 之后，从第 29 行开始会继续正常地运行。程序会打印 <code>returned normally from main</code>，之后是 <code>deferred call in main</code>。</p><h2 id="panic，recover-和-Go-协程"><a href="#panic，recover-和-Go-协程" class="headerlink" title="panic，recover 和 Go 协程"></a>panic，recover 和 Go 协程</h2><p>只有在相同的 [Go 协程]中调用 recover 才管用。<code>recover</code> 不能恢复一个不同协程的 panic。我们用一个例子来理解这一点。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span>    <span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">recovery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> r <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> r <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"recovered:"</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">defer</span> <span class="token function">recovery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Inside A"</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Inside B"</span><span class="token punctuation">)</span>    <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"oh! B panicked"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"normally returned from main"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的程序中，函数 <code>b()</code> 在第 23 行发生 panic。函数 <code>a()</code> 调用了一个延迟函数 <code>recovery()</code>，用于恢复 panic。在第 17 行，函数 <code>b()</code> 作为一个不同的协程来调用。下一行的 <code>Sleep</code> 只是保证 <code>a()</code> 在 <code>b()</code> 运行结束之后才退出。</p><p>你认为程序会输出什么？panic 能够恢复吗？答案是否定的，panic 并不会恢复。因为调用 <code>recovery</code> 的协程和 <code>b()</code> 中发生 panic 的协程并不相同，因此不可能恢复 panic。</p><p>运行该程序会输出：</p><pre class="line-numbers language-none"><code class="language-none">Inside A  Inside B  panic: oh! B panickedgoroutine 5 [running]:  main.b()      &#x2F;tmp&#x2F;sandbox388039916&#x2F;main.go:23 +0x80created by main.a      &#x2F;tmp&#x2F;sandbox388039916&#x2F;main.go:17 +0xc0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从输出可以看出，panic 没有恢复。</p><p>如果函数 <code>b()</code> 在相同的协程里调用，panic 就可以恢复。</p><p>如果程序的第 17 行由 <code>go b()</code> 修改为 <code>b()</code>，就可以恢复 panic 了，因为 panic 发生在与 recover 相同的协程里。如果运行这个修改后的程序，会输出：</p><pre class="line-numbers language-none"><code class="language-none">Inside A  Inside B  recovered: oh! B panicked  normally returned from main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="运行时-panic"><a href="#运行时-panic" class="headerlink" title="运行时 panic"></a>运行时 panic</h2><p>运行时错误（如数组越界）也会导致 panic。这等价于调用了内置函数 <code>panic</code>，其参数由接口类型 [runtime.Error]给出。<code>runtime.Error</code> 接口的定义如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Error <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>      <span class="token builtin">error</span>    <span class="token comment">// RuntimeError is a no-op function but</span>    <span class="token comment">// serves to distinguish types that are run time</span>    <span class="token comment">// errors from ordinary errors: a type is a</span>    <span class="token comment">// run time error if it has a RuntimeError method.</span>    <span class="token function">RuntimeError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而 <code>runtime.Error</code> 接口满足内建接口类型 [<code>error</code>]。</p><p>我们来编写一个示例，创建一个运行时 panic。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      n <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>n<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"normally returned from a"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"normally returned from main"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的程序中，第 9 行我们试图访问 <code>n[3]</code>，这是一个对[切片]的错误引用。该程序会发生 panic，输出如下：</p><pre class="line-numbers language-none"><code class="language-none">panic: runtime error: index out of rangegoroutine 1 [running]:  main.a()      &#x2F;tmp&#x2F;sandbox780439659&#x2F;main.go:9 +0x40main.main()      &#x2F;tmp&#x2F;sandbox780439659&#x2F;main.go:13 +0x20<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你也许想知道，是否可以恢复一个运行时 panic？当然可以！我们来修改一下上面的代码，恢复这个 panic。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">r</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> r <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> r <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Recovered"</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">defer</span> <span class="token function">r</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    n <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>n<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"normally returned from a"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"normally returned from main"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行上面程序会输出：</p><pre class="line-numbers language-none"><code class="language-none">Recovered runtime error: index out of range  normally returned from main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>从输出可以知道，我们已经恢复了这个 panic。</p><h2 id="恢复后获得堆栈跟踪"><a href="#恢复后获得堆栈跟踪" class="headerlink" title="恢复后获得堆栈跟踪"></a>恢复后获得堆栈跟踪</h2><p>当我们恢复 panic 时，我们就释放了它的堆栈跟踪。实际上，在上述程序里，恢复 panic 之后，我们就失去了堆栈跟踪。</p><p>有办法可以打印出堆栈跟踪，就是使用 [<code>Debug</code>]包中的 [<code>PrintStack</code>]函数。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span>    <span class="token string">"runtime/debug"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">r</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> r <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> r <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Recovered"</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span>        debug<span class="token punctuation">.</span><span class="token function">PrintStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">defer</span> <span class="token function">r</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    n <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>n<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"normally returned from a"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"normally returned from main"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的程序中，我们在第 11 行使用了 <code>debug.PrintStack()</code> 打印堆栈跟踪。</p><p>该程序会输出：</p><pre class="line-numbers language-none"><code class="language-none">Recovered runtime error: index out of range  goroutine 1 [running]:  runtime&#x2F;debug.Stack(0x1042beb8, 0x2, 0x2, 0x1c)      &#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;runtime&#x2F;debug&#x2F;stack.go:24 +0xc0runtime&#x2F;debug.PrintStack()      &#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;runtime&#x2F;debug&#x2F;stack.go:16 +0x20main.r()      &#x2F;tmp&#x2F;sandbox949178097&#x2F;main.go:11 +0xe0panic(0xf0a80, 0x17cd50)      &#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;runtime&#x2F;panic.go:491 +0x2c0main.a()      &#x2F;tmp&#x2F;sandbox949178097&#x2F;main.go:18 +0x80main.main()      &#x2F;tmp&#x2F;sandbox949178097&#x2F;main.go:23 +0x20normally returned from main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从输出我们可以看出，首先已经恢复了 panic，打印出 <code>Recovered runtime error: index out of range</code>。此外，我们也打印出了堆栈跟踪。在恢复了 panic 之后，还打印出 <code>normally returned from main</code>。</p><p>本教程到此结束。</p><p>简单概括一下本教程讨论的内容：</p><ul><li>什么是 panic？</li><li>什么时候应该使用 panic？</li><li>panic 示例</li><li>发生 panic 时的 defer</li><li>recover</li><li>panic，recover 和 Go 协程</li><li>运行时 panic</li><li>恢复后获得堆栈跟踪</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2019/06/17/golang/33.han-shu-shi-yi-deng-gong-min-tou-deng-han-shu/"/>
      <url>2019/06/17/golang/33.han-shu-shi-yi-deng-gong-min-tou-deng-han-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="33-函数是一等公民（头等函数）"><a href="#33-函数是一等公民（头等函数）" class="headerlink" title="33. 函数是一等公民（头等函数）"></a>33. 函数是一等公民（头等函数）</h1><p>现在简单概括一下本教程讨论的内容：</p><ul><li>什么是头等函数？</li><li>匿名函数</li><li>用户自定义的函数类型</li><li>高阶函数<ul><li>把函数作为参数，传递给其它函数</li><li>在其它函数中返回函数</li></ul></li><li>闭包</li><li>头等函数的实际用途</li></ul><h2 id="什么是头等函数？"><a href="#什么是头等函数？" class="headerlink" title="什么是头等函数？"></a>什么是头等函数？</h2><p><strong>支持头等函数（First Class Function）的编程语言，可以把函数赋值给变量，也可以把函数作为其它函数的参数或者返回值。Go 语言支持头等函数的机制</strong>。</p><p>本教程我们会讨论头等函数的语法和用例。</p><h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><p>我们来编写一个简单的示例，把函数赋值给一个变量。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      a <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hello world first class function"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的程序中，我们将一个函数赋值给了变量 <code>a</code>（第 8 行）。这是把函数赋值给变量的语法。你如果观察得仔细的话，会发现赋值给 <code>a</code> 的函数没有名称。<strong>由于没有名称，这类函数称为匿名函数（Anonymous Function）</strong>。</p><p>调用该函数的唯一方法就是使用变量 <code>a</code>。我们在下一行调用了它。<code>a()</code> 调用了这个函数，打印出 <code>hello world first class function</code>。在第 12 行，我们打印出 <code>a</code> 的类型。这会输出 <code>func()</code>。</p><p>运行该程序，会输出：</p><pre class="line-numbers language-none"><code class="language-none">hello world first class functionfunc()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>要调用一个匿名函数，可以不用赋值给变量。通过下面的例子，我们看看这是怎么做到的。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hello world first class function"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的程序中，第 8 行定义了一个匿名函数，并在定义之后，我们使用 <code>()</code> 立即调用了该函数（第 10 行）。该程序会输出：</p><pre class="line-numbers language-none"><code class="language-none">hello world first class function<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>就像其它函数一样，还可以向匿名函数传递参数。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">func</span><span class="token punctuation">(</span>n <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Welcome"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token string">"Gophers"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的程序中，我们向匿名函数传递了一个字符串参数（第 10 行）。运行该程序后会输出：</p><pre class="line-numbers language-none"><code class="language-none">Welcome Gophers<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="用户自定义的函数类型"><a href="#用户自定义的函数类型" class="headerlink" title="用户自定义的函数类型"></a>用户自定义的函数类型</h2><p>正如我们定义自己的结构体类型一样，我们可以定义自己的函数类型。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> add <span class="token keyword">func</span><span class="token punctuation">(</span>a <span class="token builtin">int</span><span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以上代码片段创建了一个新的函数类型 <code>add</code>，它接收两个整型参数，并返回一个整型。现在我们来定义 <code>add</code> 类型的变量。</p><p>我们来编写一个程序，定义一个 <code>add</code> 类型的变量。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">type</span> add <span class="token keyword">func</span><span class="token punctuation">(</span>a <span class="token builtin">int</span><span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> a add <span class="token operator">=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>a <span class="token builtin">int</span><span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> a <span class="token operator">+</span> b    <span class="token punctuation">&#125;</span>    s <span class="token operator">:=</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Sum"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面程序的第 10 行，我们定义了一个 <code>add</code> 类型的变量 <code>a</code>，并向它赋值了一个符合 <code>add</code> 类型签名的函数。我们在第 13 行调用了该函数，并将结果赋值给 <code>s</code>。该程序会输出：</p><pre class="line-numbers language-none"><code class="language-none">Sum 11<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><p>高阶函数（Hiher-order Function）定义为：<strong>满足下列条件之一的函数</strong>：</p><ul><li><strong>接收一个或多个函数作为参数</strong></li><li><strong>返回值是一个函数</strong></li></ul><p>针对上述两种情况，我们看看一些简单实例。</p><h3 id="把函数作为参数，传递给其它函数"><a href="#把函数作为参数，传递给其它函数" class="headerlink" title="把函数作为参数，传递给其它函数"></a>把函数作为参数，传递给其它函数</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">simple</span><span class="token punctuation">(</span>a <span class="token keyword">func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      f <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> a <span class="token operator">+</span> b    <span class="token punctuation">&#125;</span>    <span class="token function">simple</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的实例中，第 7 行我们定义了一个函数 <code>simple</code>，<code>simple</code> 接收一个函数参数（该函数接收两个 <code>int</code> 参数，返回一个 <code>a</code> 整型）。在 <code>main</code> 函数的第 12 行，我们创建了一个匿名函数 <code>f</code>，其签名符合 <code>simple</code> 函数的参数。我们在下一行调用了 <code>simple</code>，并传递了参数 <code>f</code>。该程序打印输出 67。</p><h3 id="在其它函数中返回函数"><a href="#在其它函数中返回函数" class="headerlink" title="在其它函数中返回函数"></a>在其它函数中返回函数</h3><p>现在我们重写上面的代码，在 <code>simple</code> 函数中返回一个函数。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">simple</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>      f <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> a <span class="token operator">+</span> b    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> f<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      s <span class="token operator">:=</span> <span class="token function">simple</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">s</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面程序中，第 7 行的 <code>simple</code> 函数返回了一个函数，并接受两个 <code>int</code> 参数，返回一个 <code>int</code>。</p><p>在第 15 行，我们调用了 <code>simple</code> 函数。我们把 <code>simple</code> 的返回值赋值给了 <code>s</code>。现在 <code>s</code> 包含了 <code>simple</code> 函数返回的函数。我们调用了 <code>s</code>，并向它传递了两个 int 参数（第 16 行）。该程序输出 67。</p><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>闭包（Closure）是匿名函数的一个特例。当一个匿名函数所访问的变量定义在函数体的外部时，就称这样的匿名函数为闭包。</p><p>看看一个示例就明白了。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      a <span class="token operator">:=</span> <span class="token number">5</span>    <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"a ="</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的程序中，匿名函数在第 10 行访问了变量 <code>a</code>，而 <code>a</code> 存在于函数体的外部。因此这个匿名函数就是闭包。</p><p>每一个闭包都会绑定一个它自己的外围变量（Surrounding Variable）。我们通过一个简单示例来体会这句话的含义。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">appendStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>      t <span class="token operator">:=</span> <span class="token string">"Hello"</span>    c <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>b <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>        t <span class="token operator">=</span> t <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> b        <span class="token keyword">return</span> t    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> c<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      a <span class="token operator">:=</span> <span class="token function">appendStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    b <span class="token operator">:=</span> <span class="token function">appendStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token string">"World"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token string">"Everyone"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token string">"Gopher"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token string">"!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面程序中，函数 <code>appendStr</code> 返回了一个闭包。这个闭包绑定了变量 <code>t</code>。我们来理解这是什么意思。</p><p>在第 17 行和第 18 行声明的变量 <code>a</code> 和 <code>b</code> 都是闭包，它们绑定了各自的 <code>t</code> 值。</p><p>我们首先用参数 <code>World</code> 调用了 <code>a</code>。现在 <code>a</code> 中 <code>t</code> 值变为了 <code>Hello World</code>。</p><p>在第 20 行，我们又用参数 <code>Everyone</code> 调用了 <code>b</code>。由于 <code>b</code> 绑定了自己的变量 <code>t</code>，因此 <code>b</code> 中的 <code>t</code> 还是等于初始值 <code>Hello</code>。于是该函数调用之后，<code>b</code> 中的 <code>t</code> 变为了 <code>Hello Everyone</code>。程序的其他部分很简单，不再解释。</p><p>该程序会输出：</p><pre class="line-numbers language-none"><code class="language-none">Hello World  Hello Everyone  Hello World Gopher  Hello Everyone !<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="头等函数的实际用途"><a href="#头等函数的实际用途" class="headerlink" title="头等函数的实际用途"></a>头等函数的实际用途</h2><p>迄今为止，我们已经定义了什么是头等函数，也看了一些专门设计的示例，来学习它们如何工作。现在我们来编写一些实际的程序，来展现头等函数的实际用处。</p><p>我们会创建一个程序，基于一些条件，来过滤一个 <code>students</code> 切片。现在我们来逐步实现它。</p><p>首先定义一个 <code>student</code> 类型。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> student <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>      firstName <span class="token builtin">string</span>    lastName <span class="token builtin">string</span>    grade <span class="token builtin">string</span>    country <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下一步是编写一个 <code>filter</code> 函数。该函数接收一个 <code>students</code> 切片和一个函数作为参数，这个函数会计算一个学生是否满足筛选条件。写出这个函数后，你很快就会明白，我们继续吧。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token punctuation">[</span><span class="token punctuation">]</span>student<span class="token punctuation">,</span> f <span class="token keyword">func</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>student <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> r <span class="token punctuation">[</span><span class="token punctuation">]</span>student    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> s <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token function">f</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token punctuation">&#123;</span>            r <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> v<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> r<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的函数中，<code>filter</code> 的第二个参数是一个函数。这个函数接收 <code>student</code> 参数，返回一个 <code>bool</code> 值。这个函数计算了某一学生是否满足筛选条件。我们在第 3 行遍历了 <code>student</code> 切片，将每个学生作为参数传递给了函数 <code>f</code>。如果该函数返回 <code>true</code>，就表示该学生通过了筛选条件，接着将该学生添加到了结果切片 <code>r</code> 中。你可能会很困惑这个函数的实际用途，等我们完成程序你就知道了。我添加了 <code>main</code> 函数，整个程序如下所示：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">type</span> student <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>      firstName <span class="token builtin">string</span>    lastName  <span class="token builtin">string</span>    grade     <span class="token builtin">string</span>    country   <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token punctuation">[</span><span class="token punctuation">]</span>student<span class="token punctuation">,</span> f <span class="token keyword">func</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>student <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> r <span class="token punctuation">[</span><span class="token punctuation">]</span>student    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> s <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token function">f</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token punctuation">&#123;</span>            r <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> v<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> r<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      s1 <span class="token operator">:=</span> student<span class="token punctuation">&#123;</span>        firstName<span class="token punctuation">:</span> <span class="token string">"Naveen"</span><span class="token punctuation">,</span>        lastName<span class="token punctuation">:</span>  <span class="token string">"Ramanathan"</span><span class="token punctuation">,</span>        grade<span class="token punctuation">:</span>     <span class="token string">"A"</span><span class="token punctuation">,</span>        country<span class="token punctuation">:</span>   <span class="token string">"India"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    s2 <span class="token operator">:=</span> student<span class="token punctuation">&#123;</span>        firstName<span class="token punctuation">:</span> <span class="token string">"Samuel"</span><span class="token punctuation">,</span>        lastName<span class="token punctuation">:</span>  <span class="token string">"Johnson"</span><span class="token punctuation">,</span>        grade<span class="token punctuation">:</span>     <span class="token string">"B"</span><span class="token punctuation">,</span>        country<span class="token punctuation">:</span>   <span class="token string">"USA"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    s <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>student<span class="token punctuation">&#123;</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">&#125;</span>    f <span class="token operator">:=</span> <span class="token function">filter</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>s student<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> s<span class="token punctuation">.</span>grade <span class="token operator">==</span> <span class="token string">"B"</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>main</code> 函数中，我们首先创建了两个学生 <code>s1</code> 和 <code>s2</code>，并将他们添加到了切片 <code>s</code>。现在假设我们想要查询所有成绩为 <code>B</code> 的学生。为了实现这样的功能，我们传递了一个检查学生成绩是否为 <code>B</code> 的函数，如果是，该函数会返回 <code>true</code>。我们把这个函数作为参数传递给了 <code>filter</code> 函数（第 38 行）。上述程序会输出：</p><pre class="line-numbers language-none"><code class="language-none">[&#123;Samuel Johnson B USA&#125;]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>假设我们想要查找所有来自印度的学生。通过修改传递给 <code>filter</code> 的函数参数，就很容易地实现了。</p><p>实现它的代码如下所示：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">c <span class="token operator">:=</span> <span class="token function">filter</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>s student<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> s<span class="token punctuation">.</span>country <span class="token operator">==</span> <span class="token string">"India"</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请将该函数添加到 <code>main</code> 函数，并检查它的输出。</p><p>我们最后再编写一个程序，来结束这一节的讨论。这个程序会对切片的每个元素执行相同的操作，并返回结果。例如，如果我们希望将切片中的所有整数乘以 5，并返回出结果，那么通过头等函数可以很轻松地实现。我们把这种对集合中的每个元素进行操作的函数称为 <code>map</code> 函数。相关代码如下所示，它们很容易看懂。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>      <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">iMap</span><span class="token punctuation">(</span>s <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> f <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> r <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> s <span class="token punctuation">&#123;</span>        r <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token function">f</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> r<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      a <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">&#125;</span>    r <span class="token operator">:=</span> <span class="token function">iMap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> n <span class="token operator">*</span> <span class="token number">5</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该程序会输出：</p><pre class="line-numbers language-none"><code class="language-none">[25 30 35 40 45]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2019/06/17/golang/34.fan-she/"/>
      <url>2019/06/17/golang/34.fan-she/</url>
      
        <content type="html"><![CDATA[<h1 id="34-反射"><a href="#34-反射" class="headerlink" title="34. 反射"></a>34. 反射</h1><p>反射是 Go 语言的高级主题之一。</p><p>分为如下小节。</p><ul><li>什么是反射？</li><li>为何需要检查变量，确定变量的类型？</li><li>reflect 包<ul><li>reflect.Type 和 reflect.Value</li><li>reflect.Kind</li><li>NumField() 和 Field() 方法</li><li>Int() 和 String() 方法</li></ul></li><li>完整的程序</li><li>我们应该使用反射吗？</li></ul><h2 id="什么是反射？"><a href="#什么是反射？" class="headerlink" title="什么是反射？"></a>什么是反射？</h2><p>反射就是程序能够在运行时检查变量和值，求出它们的类型。你可能还不太懂，这没关系。在本教程结束后，你就会清楚地理解反射，所以跟着我们的教程学习吧。</p><h2 id="为何需要检查变量，确定变量的类型？"><a href="#为何需要检查变量，确定变量的类型？" class="headerlink" title="为何需要检查变量，确定变量的类型？"></a>为何需要检查变量，确定变量的类型？</h2><p>在学习反射时，所有人首先面临的疑惑就是：如果程序中每个变量都是我们自己定义的，那么在编译时就可以知道变量类型了，为什么我们还需要在运行时检查变量，求出它的类型呢？没错，在大多数时候都是这样，但并非总是如此。</p><p>我来解释一下吧。下面我们编写一个简单的程序。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    i <span class="token operator">:=</span> <span class="token number">10</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d %T"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的程序中，<code>i</code> 的类型在编译时就知道了，然后我们在下一行打印出 <code>i</code>。这里没什么特别之处。</p><p>现在了解一下，需要在运行时求得变量类型的情况。假如我们要编写一个简单的函数，它接收结构体作为参数，并用它来创建一个 SQL 插入查询。</p><p>考虑下面的程序：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">type</span> order <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    ordId      <span class="token builtin">int</span>    customerId <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    o <span class="token operator">:=</span> order<span class="token punctuation">&#123;</span>        ordId<span class="token punctuation">:</span>      <span class="token number">1234</span><span class="token punctuation">,</span>        customerId<span class="token punctuation">:</span> <span class="token number">567</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的程序中，我们需要编写一个函数，接收结构体变量 <code>o</code> 作为参数，返回下面的 SQL 插入查询。</p><pre class="line-numbers language-none"><code class="language-none">insert into order values(1234, 567)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个函数写起来很简单。我们现在编写这个函数。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">type</span> order <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    ordId      <span class="token builtin">int</span>    customerId <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">createQuery</span><span class="token punctuation">(</span>o order<span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>    i <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"insert into order values(%d, %d)"</span><span class="token punctuation">,</span> o<span class="token punctuation">.</span>ordId<span class="token punctuation">,</span> o<span class="token punctuation">.</span>customerId<span class="token punctuation">)</span>    <span class="token keyword">return</span> i<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    o <span class="token operator">:=</span> order<span class="token punctuation">&#123;</span>        ordId<span class="token punctuation">:</span>      <span class="token number">1234</span><span class="token punctuation">,</span>        customerId<span class="token punctuation">:</span> <span class="token number">567</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">createQuery</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在第 12 行，<code>createQuery</code> 函数用 <code>o</code> 的两个字段（<code>ordId</code> 和 <code>customerId</code>），创建了插入查询。该程序会输出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">insert into order values<span class="token punctuation">(</span><span class="token number">1234</span>, <span class="token number">567</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在我们来升级这个查询生成器。如果我们想让它变得通用，可以适用于任何结构体类型，该怎么办呢？我们用程序来理解一下。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">type</span> order <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    ordId      <span class="token builtin">int</span>    customerId <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> employee <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    name <span class="token builtin">string</span>    id <span class="token builtin">int</span>    address <span class="token builtin">string</span>    salary <span class="token builtin">int</span>    country <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">createQuery</span><span class="token punctuation">(</span>q <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们的目标就是完成 <code>createQuery</code> 函数（上述程序中的第 16 行），它可以接收任何结构体作为参数，根据结构体的字段创建插入查询。</p><p>例如，如果我们传入下面的结构体：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">o <span class="token operator">:=</span> order <span class="token punctuation">&#123;</span>    ordId<span class="token punctuation">:</span> <span class="token number">1234</span><span class="token punctuation">,</span>    customerId<span class="token punctuation">:</span> <span class="token number">567</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>createQuery</code> 函数应该返回：</p><pre class="line-numbers language-none"><code class="language-none">insert into order values (1234, 567)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>类似地，如果我们传入：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">e <span class="token operator">:=</span> employee <span class="token punctuation">&#123;</span>       name<span class="token punctuation">:</span> <span class="token string">"Naveen"</span><span class="token punctuation">,</span>       id<span class="token punctuation">:</span> <span class="token number">565</span><span class="token punctuation">,</span>       address<span class="token punctuation">:</span> <span class="token string">"Science Park Road, Singapore"</span><span class="token punctuation">,</span>       salary<span class="token punctuation">:</span> <span class="token number">90000</span><span class="token punctuation">,</span>       country<span class="token punctuation">:</span> <span class="token string">"Singapore"</span><span class="token punctuation">,</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该函数会返回：</p><pre class="line-numbers language-none"><code class="language-none">insert into employee values(&quot;Naveen&quot;, 565, &quot;Science Park Road, Singapore&quot;, 90000, &quot;Singapore&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于 <code>createQuery</code> 函数应该适用于任何结构体，因此它接收 <code>interface&#123;&#125;</code> 作为参数。为了简单起见，我们只处理包含 <code>string</code> 和 <code>int</code> 类型字段的结构体，但可以扩展为包含任何类型的字段。</p><p><code>createQuery</code> 函数应该适用于所有的结构体。因此，要编写这个函数，就必须在运行时检查传递过来的结构体参数的类型，找到结构体字段，接着创建查询。这时就需要用到反射了。在本教程的下一步，我们将会学习如何使用 <code>reflect</code> 包来实现它。</p><h2 id="reflect-包"><a href="#reflect-包" class="headerlink" title="reflect 包"></a>reflect 包</h2><p>在 Go 语言中，<code>reflect</code>实现了运行时反射。<code>reflect</code> 包会帮助识别 <code>interface&#123;&#125;</code>变量的底层具体类型和具体值。这正是我们所需要的。<code>createQuery</code> 函数接收 <code>interface&#123;&#125;</code> 参数，根据它的具体类型和具体值，创建 SQL 查询。这正是 <code>reflect</code> 包能够帮助我们的地方。</p><p>在编写我们通用的查询生成器之前，我们首先需要了解 <code>reflect</code> 包中的几种类型和方法。让我们来逐个了解。</p><h3 id="reflect-Type-和-reflect-Value"><a href="#reflect-Type-和-reflect-Value" class="headerlink" title="reflect.Type 和 reflect.Value"></a>reflect.Type 和 reflect.Value</h3><p><code>reflect.Type</code> 表示 <code>interface&#123;&#125;</code> 的具体类型，而 <code>reflect.Value</code> 表示它的具体值。<code>reflect.TypeOf()</code> 和 <code>reflect.ValueOf()</code> 两个函数可以分别返回 <code>reflect.Type</code> 和 <code>reflect.Value</code>。这两种类型是我们创建查询生成器的基础。我们现在用一个简单的例子来理解这两种类型。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"reflect"</span><span class="token punctuation">)</span><span class="token keyword">type</span> order <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    ordId      <span class="token builtin">int</span>    customerId <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">createQuery</span><span class="token punctuation">(</span>q <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    t <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span>    v <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Type "</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Value "</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    o <span class="token operator">:=</span> order<span class="token punctuation">&#123;</span>        ordId<span class="token punctuation">:</span>      <span class="token number">456</span><span class="token punctuation">,</span>        customerId<span class="token punctuation">:</span> <span class="token number">56</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    <span class="token function">createQuery</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的程序中，第 13 行的 <code>createQuery</code> 函数接收 <code>interface&#123;&#125;</code> 作为参数。在第 14 行，<code>reflect.TypeOf</code> 接收了参数 <code>interface&#123;&#125;</code>，返回了<code>reflect.Type</code>，它包含了传入的 <code>interface&#123;&#125;</code> 参数的具体类型。同样地，在第 15 行，<code>reflect.ValueOf</code>函数接收参数 <code>interface&#123;&#125;</code>，并返回了 <code>reflect.Value</code>，它包含了传来的 <code>interface&#123;&#125;</code> 的具体值。</p><p>上述程序会打印：</p><pre class="line-numbers language-none"><code class="language-none">Type  main.orderValue  &#123;456 56&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>从输出我们可以看到，程序打印了接口的具体类型和具体值。</p><h3 id="relfect-Kind"><a href="#relfect-Kind" class="headerlink" title="relfect.Kind"></a>relfect.Kind</h3><p><code>reflect</code> 包中还有一个重要的类型：<code>Kind</code>。</p><p>在反射包中，<code>Kind</code> 和 <code>Type</code> 的类型可能看起来很相似，但在下面程序中，可以很清楚地看出它们的不同之处。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"reflect"</span><span class="token punctuation">)</span><span class="token keyword">type</span> order <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    ordId      <span class="token builtin">int</span>    customerId <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">createQuery</span><span class="token punctuation">(</span>q <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    t <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span>    k <span class="token operator">:=</span> t<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Type "</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Kind "</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    o <span class="token operator">:=</span> order<span class="token punctuation">&#123;</span>        ordId<span class="token punctuation">:</span>      <span class="token number">456</span><span class="token punctuation">,</span>        customerId<span class="token punctuation">:</span> <span class="token number">56</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    <span class="token function">createQuery</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述程序会输出：</p><pre class="line-numbers language-none"><code class="language-none">Type  main.orderKind  struct<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>我想你应该很清楚两者的区别了。<code>Type</code> 表示 <code>interface&#123;&#125;</code> 的实际类型（在这里是 <strong>main.Order</strong>)，而 <code>Kind</code> 表示该类型的特定类别（在这里是 <strong>struct</strong>）。</p><h3 id="NumField-和-Field-方法"><a href="#NumField-和-Field-方法" class="headerlink" title="NumField() 和 Field() 方法"></a>NumField() 和 Field() 方法</h3><p><code>NumField()</code>方法返回结构体中字段的数量，而 <code>Field(i int)</code>方法返回字段 <code>i</code> 的 <code>reflect.Value</code>。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"reflect"</span><span class="token punctuation">)</span><span class="token keyword">type</span> order <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    ordId      <span class="token builtin">int</span>    customerId <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">createQuery</span><span class="token punctuation">(</span>q <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> reflect<span class="token punctuation">.</span>Struct <span class="token punctuation">&#123;</span>        v <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Number of fields"</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">NumField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">.</span><span class="token function">NumField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Field:%d type:%T value:%v\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    o <span class="token operator">:=</span> order<span class="token punctuation">&#123;</span>        ordId<span class="token punctuation">:</span>      <span class="token number">456</span><span class="token punctuation">,</span>        customerId<span class="token punctuation">:</span> <span class="token number">56</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    <span class="token function">createQuery</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的程序中，因为 <code>NumField</code> 方法只能在结构体上使用，我们在第 14 行首先检查了 <code>q</code> 的类别是 <code>struct</code>。程序的其他代码很容易看懂，不作解释。该程序会输出：</p><pre class="line-numbers language-none"><code class="language-none">Number of fields 2Field:0 type:reflect.Value value:456Field:1 type:reflect.Value value:56<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Int-和-String-方法"><a href="#Int-和-String-方法" class="headerlink" title="Int() 和 String() 方法"></a>Int() 和 String() 方法</h3><p><code>Int</code>和 <code>String</code>可以帮助我们分别取出 <code>reflect.Value</code> 作为 <code>int64</code> 和 <code>string</code>。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"reflect"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    a <span class="token operator">:=</span> <span class="token number">56</span>    x <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"type:%T value:%v\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> x<span class="token punctuation">)</span>    b <span class="token operator">:=</span> <span class="token string">"Naveen"</span>    y <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"type:%T value:%v\n"</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面程序中的第 10 行，我们取出 <code>reflect.Value</code>，并转换为 <code>int64</code>，而在第 13 行，我们取出 <code>reflect.Value</code> 并将其转换为 <code>string</code>。该程序会输出：</p><pre class="line-numbers language-none"><code class="language-none">type:int64 value:56type:string value:Naveen<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="完整的程序"><a href="#完整的程序" class="headerlink" title="完整的程序"></a>完整的程序</h2><p>现在我们已经具备足够多的知识，来完成我们的查询生成器了，我们来实现它把。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"reflect"</span><span class="token punctuation">)</span><span class="token keyword">type</span> order <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    ordId      <span class="token builtin">int</span>    customerId <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> employee <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    name    <span class="token builtin">string</span>    id      <span class="token builtin">int</span>    address <span class="token builtin">string</span>    salary  <span class="token builtin">int</span>    country <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">createQuery</span><span class="token punctuation">(</span>q <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> reflect<span class="token punctuation">.</span>Struct <span class="token punctuation">&#123;</span>        t <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        query <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"insert into %s values("</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>        v <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">.</span><span class="token function">NumField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">switch</span> v<span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Int<span class="token punctuation">:</span>                <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>                    query <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%s%d"</span><span class="token punctuation">,</span> query<span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    query <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%s, %d"</span><span class="token punctuation">,</span> query<span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token keyword">case</span> reflect<span class="token punctuation">.</span>String<span class="token punctuation">:</span>                <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>                    query <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%s\"%s\""</span><span class="token punctuation">,</span> query<span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    query <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%s, \"%s\""</span><span class="token punctuation">,</span> query<span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token keyword">default</span><span class="token punctuation">:</span>                fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Unsupported type"</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        query <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%s)"</span><span class="token punctuation">,</span> query<span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"unsupported type"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    o <span class="token operator">:=</span> order<span class="token punctuation">&#123;</span>        ordId<span class="token punctuation">:</span>      <span class="token number">456</span><span class="token punctuation">,</span>        customerId<span class="token punctuation">:</span> <span class="token number">56</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    <span class="token function">createQuery</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span>    e <span class="token operator">:=</span> employee<span class="token punctuation">&#123;</span>        name<span class="token punctuation">:</span>    <span class="token string">"Naveen"</span><span class="token punctuation">,</span>        id<span class="token punctuation">:</span>      <span class="token number">565</span><span class="token punctuation">,</span>        address<span class="token punctuation">:</span> <span class="token string">"Coimbatore"</span><span class="token punctuation">,</span>        salary<span class="token punctuation">:</span>  <span class="token number">90000</span><span class="token punctuation">,</span>        country<span class="token punctuation">:</span> <span class="token string">"India"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    <span class="token function">createQuery</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    i <span class="token operator">:=</span> <span class="token number">90</span>    <span class="token function">createQuery</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在第 22 行，我们首先检查了传来的参数是否是一个结构体。在第 23 行，我们使用了 <code>Name()</code> 方法，从该结构体的 <code>reflect.Type</code> 获取了结构体的名字。接下来一行，我们用 <code>t</code> 来创建查询。</p><p>在第 28 行，<code>case 语句</code>检查了当前字段是否为 <code>reflect.Int</code>，如果是的话，我们会取到该字段的值，并使用 <code>Int()</code> 方法转换为 <code>int64</code>。if else 语句用于处理边界情况。请添加日志来理解为什么需要它。在第 34 行，我们用来相同的逻辑来取到 <code>string</code>。</p><p>我们还作了额外的检查，以防止 <code>createQuery</code> 函数传入不支持的类型时，程序发生崩溃。程序的其他代码是自解释性的。我建议你在合适的地方添加日志，检查输出，来更好地理解这个程序。</p><p>该程序会输出：</p><pre class="line-numbers language-none"><code class="language-none">insert into order values(456, 56)insert into employee values(&quot;Naveen&quot;, 565, &quot;Coimbatore&quot;, 90000, &quot;India&quot;)unsupported type<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>至于向输出的查询中添加字段名，我们把它留给读者作为练习。请尝试着修改程序，打印出以下格式的查询。</p><pre class="line-numbers language-none"><code class="language-none">insert into order(ordId, customerId) values(456, 56)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="我们应该使用反射吗？"><a href="#我们应该使用反射吗？" class="headerlink" title="我们应该使用反射吗？"></a>我们应该使用反射吗？</h2><p>我们已经展示了反射的实际应用，现在考虑一个很现实的问题。我们应该使用反射吗？我想引用 <code>Rob Pike</code>关于使用反射的格言，来回答这个问题。</p><blockquote><p>清晰优于聪明。而反射并不是一目了然的。</p></blockquote><p>反射是 Go 语言中非常强大和高级的概念，我们应该小心谨慎地使用它。使用反射编写清晰和可维护的代码是十分困难的。你应该尽可能避免使用它，只在必须用到它时，才使用反射。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2019/06/17/golang/35.du-qu-wen-jian/"/>
      <url>2019/06/17/golang/35.du-qu-wen-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="35-读取文件"><a href="#35-读取文件" class="headerlink" title="35. 读取文件"></a>35. 读取文件</h1><p>文件读取是所有编程语言中最常见的操作之一。本教程我们会学习如何使用 Go 读取文件。</p><p>本教程分为如下小节。</p><ul><li>将整个文件读取到内存<ul><li>使用绝对文件路径</li><li>使用命令行标记来传递文件路径</li><li>将文件绑定在二进制文件中</li></ul></li><li>分块读取文件</li><li>逐行读取文件</li></ul><h2 id="将整个文件读取到内存"><a href="#将整个文件读取到内存" class="headerlink" title="将整个文件读取到内存"></a>将整个文件读取到内存</h2><p>将整个文件读取到内存是最基本的文件操作之一。这需要使用 <code>ioutil</code>]包中的 <a href="https://golang.org/pkg/io/ioutil/#ReadFile"><code>ReadFile</code></a> 函数。</p><p>让我们在 Go 程序所在的目录中，读取一个文件。我已经在 GOPATH（译注：原文是 GOROOT，应该是笔误）中创建了文件夹，在该文件夹内部，有一个文本文件 <code>test.txt</code>，我们会使用 Go 程序 <code>filehandling.go</code> 来读取它。<code>test.txt</code> 包含文本 “Hello World. Welcome to file handling in Go”。我的文件夹结构如下：</p><pre class="line-numbers language-none"><code class="language-none">src    filehandling        filehandling.go        test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>接下来我们来看看代码。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"io/ioutil"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    data<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadFile</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"File reading error"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Contents of file:"</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于无法在 playground 上读取文件，因此请在你的本地环境运行这个程序。</p><p>在上述程序的第 9 行，程序会读取文件，并返回一个字节<a href="https://studygolang.com/articles/12121">切片</a>，而这个切片保存在 <code>data</code> 中。在第 14 行，我们将 <code>data</code> 转换为 <code>string</code>，显示出文件的内容。</p><p>请在 <strong>test.txt</strong> 所在的位置运行该程序。</p><p>例如，对于 <strong>linux/mac</strong>，如果 <strong>test.txt</strong> 位于 <strong>/home/naveen/go/src/filehandling</strong>，可以使用下列步骤来运行程序。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> /home/naveen/go/src/filehandling/$ go <span class="token function">install</span> filehandling$ workspacepath/bin/filehandling<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>对于 <strong>windows</strong>，如果 <strong>test.txt</strong> 位于 <strong>C:\Users\naveen.r\go\src\filehandling</strong>，则使用下列步骤。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">></span> <span class="token builtin class-name">cd</span> C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>naveen.r<span class="token punctuation">\</span>go<span class="token punctuation">\</span>src<span class="token punctuation">\</span>filehandling<span class="token operator">></span> go <span class="token function">install</span> filehandling<span class="token operator">></span> workspacepath<span class="token punctuation">\</span>bin<span class="token punctuation">\</span>filehandling.exe<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>该程序会输出：</p><pre class="line-numbers language-bas" data-language="bas"><code class="language-bas">Contents of file: Hello World. Welcome to file handling in Go.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果在其他位置运行这个程序（比如 <code>/home/userdirectory</code>），会打印下面的错误。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">File reading error <span class="token function">open</span> test.txt: The system cannot <span class="token function">find</span> the <span class="token function">file</span> specified.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这是因为 Go 是编译型语言。<code>go install</code> 会根据源代码创建一个二进制文件。二进制文件独立于源代码，可以在任何位置上运行。由于在运行二进制文件的位置上没有找到 <code>test.txt</code>，因此程序会报错，提示无法找到指定的文件。</p><p>有三种方法可以解决这个问题。</p><ol><li>使用绝对文件路径</li><li>使用命令行标记来传递文件路径</li><li>将文件绑定在二进制文件中</li></ol><p>让我们来依次介绍。</p><h3 id="1-使用绝对文件路径"><a href="#1-使用绝对文件路径" class="headerlink" title="1. 使用绝对文件路径"></a>1. 使用绝对文件路径</h3><p>要解决问题，最简单的方法就是传入绝对文件路径。我已经修改了程序，把路径改成了绝对路径。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"io/ioutil"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    data<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadFile</span><span class="token punctuation">(</span><span class="token string">"/home/naveen/go/src/filehandling/test.txt"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"File reading error"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Contents of file:"</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在可以在任何位置上运行程序，打印出 <code>test.txt</code> 的内容。</p><p>例如，可以在我的家目录运行。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> <span class="token environment constant">$HOME</span>$ go <span class="token function">install</span> filehandling$ workspacepath/bin/filehandling<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>该程序打印出了 <code>test.txt</code> 的内容。</p><p>看似这是一个简单的方法，但它的缺点是：文件必须放在程序指定的路径中，否则就会出错。</p><h3 id="2-使用命令行标记来传递文件路径"><a href="#2-使用命令行标记来传递文件路径" class="headerlink" title="2. 使用命令行标记来传递文件路径"></a>2. 使用命令行标记来传递文件路径</h3><p>另一种解决方案是使用命令行标记来传递文件路径。使用 <a href="https://golang.org/pkg/flag/">flag</a> 包，我们可以从输入的命令行获取到文件路径，接着读取文件内容。</p><p>首先我们来看看 <code>flag</code> 包是如何工作的。<code>flag</code> 包有一个名为 <a href="https://golang.org/pkg/flag/#String"><code>String</code></a> 的<a href="https://studygolang.com/articles/11892">函数</a>。该函数接收三个参数。第一个参数是标记名，第二个是默认值，第三个是标记的简短描述。</p><p>让我们来编写程序，从命令行读取文件名。将 <code>filehandling.go</code> 的内容替换如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"flag"</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fptr <span class="token operator">:=</span> flag<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"fpath"</span><span class="token punctuation">,</span> <span class="token string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string">"file path to read from"</span><span class="token punctuation">)</span>    flag<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"value of fpath is"</span><span class="token punctuation">,</span> <span class="token operator">*</span>fptr<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述程序中第 8 行，通过 <code>String</code> 函数，创建了一个字符串标记，名称是 <code>fpath</code>，默认值是 <code>test.txt</code>，描述为 <code>file path to read from</code>。这个函数返回存储 flag 值的字符串<a href="https://studygolang.com/articles/11756">变量</a>的地址。</p><p>在程序访问 flag 之前，必须先调用 <code>flag.Parse()</code>。</p><p>在第 10 行，程序会打印出 flag 值。</p><p>使用下面命令运行程序。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">wrkspacepath/bin/filehandling -fpath<span class="token operator">=</span>/path-of-file/test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们传入 <code>/path-of-file/test.txt</code>，赋值给了 <code>fpath</code> 标记。</p><p>该程序输出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">value of fpath is /path-of-file/test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这是因为 <code>fpath</code> 的默认值是 <code>test.txt</code>。</p><p>现在我们知道如何从命令行读取文件路径了，让我们继续完成我们的文件读取程序。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"flag"</span>    <span class="token string">"fmt"</span>    <span class="token string">"io/ioutil"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fptr <span class="token operator">:=</span> flag<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"fpath"</span><span class="token punctuation">,</span> <span class="token string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string">"file path to read from"</span><span class="token punctuation">)</span>    flag<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    data<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadFile</span><span class="token punctuation">(</span><span class="token operator">*</span>fptr<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"File reading error"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Contents of file:"</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述程序里，命令行传入文件路径，程序读取了该文件的内容。使用下面命令运行该程序。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">wrkspacepath/bin/filehandling -fpath<span class="token operator">=</span>/path-of-file/test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>请将 <code>/path-of-file/</code> 替换为 <code>test.txt</code> 的真实路径。该程序将打印：</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">Contents of file: Hello World. Welcome to file handling in Go.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-将文件绑定在二进制文件中"><a href="#3-将文件绑定在二进制文件中" class="headerlink" title="3. 将文件绑定在二进制文件中"></a>3. 将文件绑定在二进制文件中</h3><p>虽然从命令行获取文件路径的方法很好，但还有一种更好的解决方法。如果我们能够将文本文件捆绑在二进制文件，岂不是很棒？这就是我们下面要做的事情。</p><p>有很多<a href="https://studygolang.com/articles/11893">包</a>可以帮助我们实现。我们会使用 <a href="https://github.com/gobuffalo/packr">packr</a>，因为它很简单，并且我在项目中使用它时，没有出现任何问题。</p><p>第一步就是安装 <code>packr</code> 包。</p><p>在命令提示符中输入下面命令，安装 <code>packr</code> 包。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go get -u github.com/gobuffalo/packr/<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>packr</code> 会把静态文件（例如 <code>.txt</code> 文件）转换为 <code>.go</code> 文件，接下来，<code>.go</code> 文件会直接嵌入到二进制文件中。<code>packer</code> 非常智能，在开发过程中，可以从磁盘而非二进制文件中获取静态文件。在开发过程中，当仅仅静态文件变化时，可以不必重新编译。</p><p>我们通过程序来更好地理解它。用以下内容来替换 <code>handling.go</code> 文件。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"github.com/gobuffalo/packr"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    box <span class="token operator">:=</span> packr<span class="token punctuation">.</span><span class="token function">NewBox</span><span class="token punctuation">(</span><span class="token string">"../filehandling"</span><span class="token punctuation">)</span>    data <span class="token operator">:=</span> box<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Contents of file:"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面程序的第 10 行，我们创建了一个新盒子（New Box）。盒子表示一个文件夹，其内容会嵌入到二进制中。在这里，我指定了 <code>filehandling</code> 文件夹，其内容包含 <code>test.txt</code>。在下一行，我们读取了文件内容，并打印出来。</p><p>在开发阶段时，我们可以使用 <code>go install</code> 命令来运行程序。程序可以正常运行。<code>packr</code> 非常智能，在开发阶段可以从磁盘加载文件。</p><p>使用下面命令来运行程序。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go <span class="token function">install</span> filehandlingworkspacepath/bin/filehandling<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>该命令可以在其他位置运行。<code>packr</code> 很聪明，可以获取传递给 <code>NewBox</code> 命令的目录的绝对路径。</p><p>该程序会输出：</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">Contents of file: Hello World. Welcome to file handling in Go.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你可以试着改变 <code>test.txt</code> 的内容，然后再运行 <code>filehandling</code>。可以看到，无需再次编译，程序打印出了 <code>test.txt</code> 的更新内容。完美！</p><p>现在我们来看看如何将 <code>test.txt</code> 打包到我们的二进制文件中。我们使用 <code>packr</code> 命令来实现。</p><p>运行下面的命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">packr <span class="token function">install</span> -v filehandling<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>它会打印：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">building box <span class="token punctuation">..</span>/filehandlingpacking <span class="token function">file</span> filehandling.gopacked <span class="token function">file</span> filehandling.gopacking <span class="token function">file</span> test.txtpacked <span class="token function">file</span> test.txtbuilt box <span class="token punctuation">..</span>/filehandling with <span class="token punctuation">[</span><span class="token string">"filehandling.go"</span> <span class="token string">"test.txt"</span><span class="token punctuation">]</span>filehandling<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该命令将静态文件绑定到了二进制文件中。</p><p>在运行上述命令之后，使用命令 <code>workspacepath/bin/filehandling</code> 来运行程序。程序会打印出 <code>test.txt</code> 的内容。于是从二进制文件中，我们读取了 <code>test.txt</code> 的内容。</p><p>如果你不知道文件到底是由二进制还是磁盘来提供，我建议你删除 <code>test.txt</code>，并在此运行 <code>filehandling</code> 命令。你将看到，程序打印出了 <code>test.txt</code> 的内容。太棒了:D。我们已经成功将静态文件嵌入到了二进制文件中。</p><h2 id="分块读取文件"><a href="#分块读取文件" class="headerlink" title="分块读取文件"></a>分块读取文件</h2><p>在前面的章节，我们学习了如何把整个文件读取到内存。当文件非常大时，尤其在 RAM 存储量不足的情况下，把整个文件都读入内存是没有意义的。更好的方法是分块读取文件。这可以使用 <a href="https://golang.org/pkg/bufio">bufio</a> 包来完成。</p><p>让我们来编写一个程序，以 3 个字节的块为单位读取 <code>test.txt</code> 文件。如下所示，替换 <code>filehandling.go</code> 的内容。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"bufio"</span>    <span class="token string">"flag"</span>    <span class="token string">"fmt"</span>    <span class="token string">"log"</span>    <span class="token string">"os"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fptr <span class="token operator">:=</span> flag<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"fpath"</span><span class="token punctuation">,</span> <span class="token string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string">"file path to read from"</span><span class="token punctuation">)</span>    flag<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    f<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token operator">*</span>fptr<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> err <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    r <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>    b <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">&#123;</span>        <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Error reading file:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>            <span class="token keyword">break</span>        <span class="token punctuation">&#125;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述程序的第 15 行，我们使用命令行标记传递的路径，打开文件。</p><p>在第 19 行，我们延迟了文件的关闭操作。</p><p>在上面程序的第 24 行，我们新建了一个缓冲读取器（buffered reader）。在下一行，我们创建了长度和容量为 3 的字节切片，程序会把文件的字节读取到切片中。</p><p>第 27 行的 <code>Read</code> <a href="https://studygolang.com/articles/12264">方法</a>会读取 len(b) 个字节（达到 3 字节），并返回所读取的字节数。当到达文件最后时，它会返回一个 EOF 错误。程序的其他地方比较简单，不做解释。</p><p>如果我们使用下面命令来运行程序：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ go <span class="token function">install</span> filehandling$ wrkspacepath/bin/filehandling -fpath<span class="token operator">=</span>/path-of-file/test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>会得到以下输出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">HelloWorld. Welcometofile handling in Go.Error reading file: EOF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="逐行读取文件"><a href="#逐行读取文件" class="headerlink" title="逐行读取文件"></a>逐行读取文件</h2><p>本节我们讨论如何使用 Go 逐行读取文件。这可以使用 <a href="https://golang.org/pkg/bufio/">bufio</a> 来实现。</p><p>请将 <code>test.txt</code> 替换为以下内容。</p><pre class="line-numbers language-none"><code class="language-none">Hello World. Welcome to file handling in Go.This is the second line of the file.We have reached the end of the file.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>逐行读取文件涉及到以下步骤。</p><ol><li>打开文件；</li><li>在文件上新建一个 scanner；</li><li>扫描文件并且逐行读取。</li></ol><p>将 <code>filehandling.go</code> 替换为以下内容。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"bufio"</span>    <span class="token string">"flag"</span>    <span class="token string">"fmt"</span>    <span class="token string">"log"</span>    <span class="token string">"os"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fptr <span class="token operator">:=</span> flag<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"fpath"</span><span class="token punctuation">,</span> <span class="token string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string">"file path to read from"</span><span class="token punctuation">)</span>    flag<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    f<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token operator">*</span>fptr<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> err <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    s <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewScanner</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token keyword">for</span> s<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    err <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述程序的第 15 行，我们用命令行标记传入的路径，打开文件。在第 24 行，我们用文件创建了一个新的 scanner。第 25 行的 <code>Scan()</code> 方法读取文件的下一行，如果可以读取，就可以使用 <code>Text()</code> 方法。</p><p>当 <code>Scan</code> 返回 false 时，除非已经到达文件末尾（此时 <code>Err()</code> 返回 <code>nil</code>），否则 <code>Err()</code> 就会返回扫描过程中出现的错误。</p><p>如果我使用下面命令来运行程序：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ go <span class="token function">install</span> filehandling$ workspacepath/bin/filehandling -fpath<span class="token operator">=</span>/path-of-file/test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>程序会输出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Hello World. Welcome to <span class="token function">file</span> handling <span class="token keyword">in</span> Go.This is the second line of the file.We have reached the end of the file.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2019/06/17/golang/go-du-qu-kong-zhi-tai-shu-ru/"/>
      <url>2019/06/17/golang/go-du-qu-kong-zhi-tai-shu-ru/</url>
      
        <content type="html"><![CDATA[<h1 id="Go-读取控制台输入"><a href="#Go-读取控制台输入" class="headerlink" title="Go 读取控制台输入"></a>Go 读取控制台输入</h1><h2 id="读取整个句子"><a href="#读取整个句子" class="headerlink" title="读取整个句子"></a>读取整个句子</h2><p>我们使用 <code>while</code> 循环，在 Go 语言中相当于没有任何参数的 <code>for</code> 循环，这样就可以让程序一直运行了。在这个例子中，每次输入一个字符串并按下 <code>enter</code> 键，我们会通过 <code>\n</code> 这个关键字符来区分字符串，如果你想对比刚才输入的字符串，我们还需要调用 replace 方法来去除掉 <code>\n</code> 然后再进行比较。</p><blockquote><p>如果你想让这个程序在 Windows 系统下运行，那么你必须将代码的 <code>text</code> 替换为 <code>text = strings.Replace(text,&quot;\r\n&quot;,&quot;&quot;,-1)</code> 因为 Windowss 系统使用的行结束符和 unix 系统是不同的。</p></blockquote><pre class="line-numbers language-none"><code class="language-none">package mainimport (    &quot;bufio&quot;    &quot;fmt&quot;    &quot;os&quot;    &quot;strings&quot;)func main() &#123;    reader :&#x3D; bufio.NewReader(os.Stdin)    fmt.Println(&quot;Simple Shell&quot;)    fmt.Println(&quot;---------------------&quot;)    for &#123;        fmt.Print(&quot;-&gt; &quot;)        text, _ :&#x3D; reader.ReadString(&#39;\n&#39;)        &#x2F;&#x2F; convert CRLF to LF        text &#x3D; strings.Replace(text, &quot;\n&quot;, &quot;&quot;, -1)        if strings.Compare(&quot;hi&quot;, text) &#x3D;&#x3D; 0 &#123;            fmt.Println(&quot;hello, Yourself&quot;)        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中我们可以发现，无论什么时候我们输入 “hi”，我们的 <code>strings.Compare()</code> 方法都将会返回 0，并且向我们打印出 hello。</p><h2 id="读取一个-UTF-8-编码的-Unicode-字符"><a href="#读取一个-UTF-8-编码的-Unicode-字符" class="headerlink" title="读取一个 UTF-8 编码的 Unicode 字符"></a>读取一个 UTF-8 编码的 Unicode 字符</h2><p>如果你想从命令行中简单地读取一个 unicode 字符，我建议你使用 <code>bufio.ReadRune()</code>，就像这样：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">reader <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stdin<span class="token punctuation">)</span>char<span class="token punctuation">,</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> reader<span class="token punctuation">.</span><span class="token function">ReadRune</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 打印输出 unicode 值为：A -> 65, a -> 97</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token keyword">switch</span> char <span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token string">'A'</span><span class="token punctuation">:</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"A Key Pressed"</span><span class="token punctuation">)</span>    <span class="token keyword">break</span><span class="token keyword">case</span> <span class="token string">'a'</span><span class="token punctuation">:</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"a Key Pressed"</span><span class="token punctuation">)</span>    <span class="token keyword">break</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用-Bufio-的-Scanner-方法"><a href="#使用-Bufio-的-Scanner-方法" class="headerlink" title="使用 Bufio 的 Scanner 方法"></a>使用 Bufio 的 Scanner 方法</h2><p>第三种从控制台读取的权威方法是通过创建一个 <code>scanner</code> 对象 , 然后通过 <code>os.Stdin</code> 来完成，就像我们刚才创建一个 <code>readers</code> 做的，这次我们使用 <code>scanner.Scan</code> 去从控制台读取内容：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">scanner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    scanner <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewScanner</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stdin<span class="token punctuation">)</span>    <span class="token keyword">for</span> scanner<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>无论你什么时候输入内容，上面的代码都将不断地在控制台扫描输入并打印出来。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>正如你所看到的，这里有很多解决的方法，而哪一个方法最适合需要根据需求来决定。如果你只是需要读取一个字符，那就使用 <code>ReadRune()</code> 方法 , 又或则你想读取一个完整的字符串，那 <code>ReadString()</code> 方法将是一个比较好的方法。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
